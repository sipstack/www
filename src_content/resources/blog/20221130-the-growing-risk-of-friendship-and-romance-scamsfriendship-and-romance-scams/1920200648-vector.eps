%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Pol_Jan21_031.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: 1
%%CreationDate: 7/15/2017
%%BoundingBox: 0 0 2754 1836
%%HiResBoundingBox: 0 0 2754 1836
%%CropBox: 0 0 2754 1836
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=0 RasterRes=72 GradRes=72 Text=0 Stroke=0 Clip=0 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2019-05-18T09:11:40+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2019-05-18T09:11:40+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2019-05-18T09:11:39+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Macintosh)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>172</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgArAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A6Hma0OxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxVmEH9zH/qj9WcTl+s+96OH0hflbN2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxVhmd08y7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWYQf3Mf+qP1ZxOX6z73o4fSF&#xA;+Vs3Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWGZ3TzLsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVZhB/cx/wCqP1ZxOX6z73o4fSF+Vs3Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWGZ3TzL&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVZhB/cx/6o/VnE5frPvejh9IX5WzdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVYZndPMuxV2KuxV2KoTVNUtdNtGuripUEKkaCru7dFUbVP+2dsCpF/&#xA;jaStf0c3Cv8Av1edPlTj/wANjaUx03zRpl9Otv8AHbXT19OGcBS9BX4GUsjH2DV9sbQm+FXYq7FX&#xA;Yq7FXYq7FXYqzCD+5j/1R+rOJy/Wfe9HD6Qvytm7FXYq7FXYq7FUo1XzTpWnTG2Yvc3igFrW3Xm6&#xA;1FRzJKpHUdObCuGkxiTyULLzlpdxcpbTxzWMsrBITcKvB2OwUSRtIgJOwDEE9sNdyZQI5p9kWLsV&#xA;dirsVdirsVdirDM7p5l2KuxV2KuxVh/nG5aXVLe0/wB120Xrkdi8pKKfmqo3/BYClJsCoe90PWp9&#xA;Om1YRmOyhPK2lLlOXouA7R8DXmr92FABtvmNkkTKgW+AAjZD022Lm3iMjc3KLyenGppuadq5lOOq&#xA;YVdirsVdirsVdirsVZhB/cx/6o/VnE5frPvejh9IX5WzdirsVdirsVY35/udVt/L0kuniT4WLXbQ&#xA;krIIUid/hZfiWrqqsw3Ck9OonjFlMavdILmyvtIuk0zUo0hueFbdo2LRTIoFWiZgrHj+2p3X5EEy&#xA;z4JQPk5GHNGY2WSxQzxPDKoeNwVkQ7ggjocoBpuZV5Q1Ga70kw3DmS6sZDazSNuXCgNG5PctE6lj&#xA;/NXLJd7hTjRpPMixdirsVdirsVdirDM7p5l2KuxV2KuxVhPmqJo9fLn7M9uhQ+8bMGH0cl+/IpSs&#xA;kAEk0A3JxVnfm/T4dP8Aygs7Oa3Zbx7X1Y7gmMGOS4kF1NFQuHqSN6IRt2zCgbyEuVMVCkfme4js&#xA;VQx1TTAzIbuEMhKupkSoI6givXI8QRa1Ly0up4o4bovArj66bNoXuEjKniYxLWOpaleX7Nab4k2N&#xA;mQpXv1sYI4306XVbicyxo8V4tiYvTdgrsTB6bqVB5V36UpvURHF1SaVMsYuxV2Kswg/uY/8AVH6s&#xA;4nL9Z970cPpC/K2bsVY/rVh5juNUD2hRtPWBVSI3c1owmLuZGPoxSFxxCUqdt9t8thKIG7i6nFkn&#xA;XBPg+FqFodQ0e6W61a49K2npbQWUMtzqMk1w55JwDRiQMqq3wopqNz9nJVx7RG6NPjyYwfEnxfCk&#xA;5fWIkRnaz1EKoJY/o2/2A/545L8nl/mt3jQ7wiLe4tL6zjnhZZ7W5QMjdVZHHgfEZjkEFsXeXNKs&#xA;JdIFnf2cc0ySLcXaSW6iD60ygs0JMaK9D+2Kn3rsN3Aice9wp3GTAvOlpFofmm4lihSG2vBBNLwj&#xA;9NBExkRmFDQusrBpG/lIqK75gayG47q2dho53HzRPlu9Wy8welJtDqcYiDdhPBydB/s0Z9/8kDMO&#xA;O49zbmj1ZxgaHYq7FXYq7FXYqwzO6eZdirsVdirsVYB5mnTUNZma3Yxi1VbcTA15SRsxcU6FQX4n&#xA;3HsDkUpTe/WBp8wkYcqUZ41P2CQGIU8u1cSqbaXFd+Yb30J7mSW3tyGnkuZXkkeNyCwiDFmKvxoz&#xA;VA8K5GMQOSTInmz/ACxi7FUrtdPudOtYbW21K7ALFYoYILeR5HYlzxjW3d2bqTSu2575hz0eMmz9&#xA;7TLTQkbIVrfSL2PUG1Ge11e6u2iEAkl0+4XjGG5cQIreMfa8csxY8ePaLZDCICgEXJJLEFNxaXls&#xA;jMEEtxaXMEfJjRQZJY0QFjsKnc7ZcJAs6K/JIdirsVZhB/cx/wCqP1ZxOX6z73o4fSF+Vs0uTzH5&#xA;ekkaJNUtHlVuDIs8ZYPy48SA1a8tqeOS4D3Kp6h5gjtL02cVncXs6Issog9IBFckJUzSRA8uDfZr&#xA;037ZKOMkW4uo1mPDXGatLr/Vor9I0utBv39GRZoWWS0R0kSvF0dLpWVhU7g5ZCEomwXFPa2mPM/Y&#xA;UXp2qpqFzJZSHVLO4EfqBJryb4oyeJKvBcSgUPiQfDLJajKP4m7T5cGa+DevJNLCygsbSO1t+fox&#xA;VCeo7SNQknd3LMevc5iykSbLmgKN1pFpcyPI73Ebyqqyehc3EAYLXiSsToCRy60/UMnDNKIoFBiD&#xA;zSTXL7y9f+V47TVL0X2u2j3FvbfVijXbNFK0J9VGHEI6oPWLgJ3/AJczs2fGMXFkLVihMT9DD1tr&#xA;+PRoXnEV3acFdJrF5PUjC0dHi5l2kKU5Bg1dqhc0MNdA5KoxPn+nudscZ4e9nflLXZNTsniuWVr6&#xA;14iWRKBZY3BMU6gbASAGo7MCOlMzSOrhTjRT3IsXYq7FXYq7FWGZ3TzLsVdirsVQuq3b2el3l2gB&#xA;e3gklUHoSiFhX7sCvNbZfUt3hBZUjb01lBozFPtMffnWuBLcMs0U/wBXnbnyBaGagBanVWpQch12&#xA;6j5YqiDPPayR3tuaXNsecYrQMP2oz7ONvxxV6Pa3MNzbRXMLcoZ0WSNvFXHIH7jhQqYVaZAWRqlX&#xA;jYPHIjFXVh0ZWUhgflgItUR+kNU/6uN5/wBJU/8AzXkeAJ4ih743d9CILm+u5IhJHL6bXMzKWicO&#xA;vJWYqQGUHcYeALZYNqUwn0PV/MU9xNxMkselxxSssYRG9CJgop9qQFjirLdEtJ7PR7K1uHaSeGFF&#xA;ldmLEuFHLc++FCNwqzCD+5j/ANUfqzicv1n3vRw+kL8rZvNdI8vac+p+b/Kc0MXqyFrzTp2QF1ju&#xA;0r8DEV4xOVHzrmRKRqMlZN5attK1vSLPWL2xim1GaBYbuSeNWf1ICY5F+IGn7wN0yuZMTQYmIKa/&#xA;oDQv+rda/wDImP8A5pyPGe9HAO5EWtjY2gYWtvFbh6cxEipWnSvEDASSyAA5K+BKld3UFpazXVw3&#xA;CC3RpZXPZEBZj9AGKvOpIJJLGzsp1Cz6rM0+ooBT4XLXM6H/ACSx9I+zZop5eLJLJ/N5fcP1u0jG&#xA;oiKP123DaVNJGo9e0U3FoafZliBZKfP7J9iRmNgl6wDyOx9xZzGzvy/CJrGpwRlVS2ijRUB39N3k&#xA;lhHHwSNwPpzosEjLGCfx0Lr84os7yxodirsVdirsVYZndPMuxV2KuxVLPM0kKeX9REsix+pbTIpd&#xA;goLNGwAqfHAVYFYj/R60oGeRh7hpGYH6Qa4Errm3E8XGvB1IaOQdVYdD/X2xVC3E5msbqFwEuo4m&#xA;Lx9q0PFlPdSRscVZv5Jvll02Syr8dm5Cjxhlq8Zp2AqUH+rhCshwodirsVSzzLfS2Wh3c0IJuGX0&#xA;rYL1MsxEcdP9kwwFUj1Kxi+ueW/LEXxQ23G6uaD9i1WiFh4SP198CWX5JDsVZhB/cx/6o/VnE5fr&#xA;Pvejh9IX5WzYX5rJ0nzp5e14fDBdM2k3zVpUS1aCvsH5Mfll0N4kfFUf5e/0DzHrmjmixyyLqlmt&#xA;akpc/DNQdgsyH/gsjLcA/BU0vfMfl+xd473U7W2eOnqJLNGhWuw5BiKfTgEJHkELoPMGgzlRBqVr&#xA;KX+xwnjatPCjb4DAjmEt3Gu6JbAG51C2hB6GSaNP1kYAFpIvMuu6XfaQ8FrP6qPcWsc7KrcTG9wg&#xA;ZQ5HFg32Woelcx82UCJAPqo/c3YsZ4gSNkugIutannG8djH9Wjb/AIslKyTfOgWMfOozQy9OMD+d&#xA;v+gfpdiNyinu4lvI7OhaaVGkIAqFRaDk3hUtQeP0HKhA8PF0ZXvSO8qQwLfas3pr63rI6yUHMJJB&#xA;EhUHrxJg+8Zv9BK8I+P3uu1Q9aeXWo6faFBd3MVuZTxjErqhY+C8iK5mAEuOiMCuxV2KuxVhmd08&#xA;y7FXYq7FWPXCI3niAzqGjOntHAG3AkaUs/EHoSke+DqlhgFzb20ahebWxMNxHT4j6Z9NuPuCtad8&#xA;ComKWOWNZI2Do4qrDoRiqya3jloxqrqGCyL1AYUPWoP0jFVCOHUbZVWCbmEAVWDvBJRdhWSMmv8A&#xA;wOKp55bm836jq9rpUF6sTXJKxvOwmReCl25MYllPwqafFudtuuQnPhFsoR4jTJfO2hWWiSxxXmt6&#xA;gtybdZFuU+sLCz8mDl4reyuIOIpsrSjb7X8xxo5pSb5Y4hi+nHzkupXH1FY/RWON4oJ5ZYwyMWCy&#xA;NHK12458G2EoNafLMiIk0yIb8x6n5jtZtMudXsoW023uVnlFszFuUamhJY0+GvOnt1FMsLBF6G19&#xA;q+vaprlnPHFApWxtfXheQ8IwHegEkJWrEHfFWQehr/8Ay22n/SLJ/wBlGFCItE1BeX1uaKatOHpR&#xA;NFTxryklr+GKssn0q1vUheZ7hSqBQILm4gFOu6wyID8znF5JVI+96OH0hR/w3p3+/r7/ALiF9/1W&#xA;yHGfwAzSTzr5NtbzyzfLbSXbXcEZuLXnd3Uw9SH4wAkkrqS3Hj075PHkqSvPbjzjF5o1W1urzVk0&#xA;O2+qtbPJFIyyMPhM5f0yH4u/wxoSO7fsgPkDHwjYWqH1PT/KNosNxpevwapOjxxx2NwAsfxPxDcp&#xA;zJEFTlVg602HSmW48sr9QYmLL/L2ufl4trdW3muPSI/X4CIWiWjhNjy+OyRXVtx8QO3YjLxOMhR+&#xA;5olGYNhekGgtqgi8qa59YsGgLyKi28hicOFCs3pLIeQ6cyTsdz25ztjBixUQLvzP63ZaPJOViWyJ&#xA;uNEnuoWhudTuXjfZ0VbdRt4ERch4/azSRziJsRH2/rc4xvqiLGxFgkoNy0kBJkpKI14MxLSNyRUr&#xA;yJqeX35HJk4623+PwSBSjooM6zam4o98waIEUIt0qIR9IJkoehY5LPtUP5v39f1fBEe9sX13ZX2o&#xA;mKUW8MqWwe4QCW4LsZFSC2hNQ0r02LbL1o29N12WLxfE/ocHV/UyLQdESCzla9tYVuLypnQ/v5OD&#xA;AD05p35NM3ifs9gKDfOlLucZX8tf8cGyANUWPjCTUkxKSIySd/sAYJ81TPIq7FXYqwzO6eZdirsV&#xA;dirHfNf+iXel6v2tJmSU9ljkWrufkiMB7tgKUg1SD6vrWoQDZfV9ZK9xMokJ/wCRhcfRgVLWtZI5&#xA;GktWCczykhYVRie4pupPiPuxVcH1Cu8MVO59Vv8AqniqjLfXKXEVu0aerM4RUiYyyUatD6ZEQ7d3&#xA;GKst0Ly+lq9tfXmpMuoQsZFS3kWOONmUrQEDmxAY78sBiCN0gkckVdeWfK13O1xdtJcTv9qaa9uZ&#xA;HPfdmlJ7YiICDIldP5F8sXDK1xbSTFRRTJc3L0HtykOSpbai8h+U4WDx2PFhuG9WYkfKr40tprpm&#xA;l2Gl2aWdhCILZCSsYJO7Gp3Yk4oRWFXYqnd/5l0vSjDBds4keJXUKpYU6fwzi5wJkfe9HD6Qhf8A&#xA;Hvl7+eX/AIA5Hwyzd/j3y9/PL/wBx8MqoHzh5SJJMdSdyTCK1w+HJWj5w8nggGOhPQeiMfDkh3+M&#xA;PKH++v8AkiMPhSW0u1LUvy+vVkZoTbXUop9dto/RnBUfCfUShPGnRqj2pgOEnmL97KMyORSW0uJb&#xA;+21C2tLCaW8tECQXsWpXaiT1QwjmEMz8BTiSyM53HcUOXY+yRkiTGMfdQasuv8OQEid0VLBbFTFq&#xA;aaksBpyt5g0sRA/349v6ilfEO9D3zTZeydXi3EB74ubj7Q08/wCP57JtJqlilkLtZBLCx4xel8Zk&#xA;evEJGq1LMW24jvmnjp5ynwV6nOMwBd7Jn5e8ueldNrWoxganOoEcFQy2yUpxBGxkIPxsPkNtz0WD&#xA;F4UOAOsy5OM2m2sXjWWl3d0grJDEzRL/ADSU+Bf9k1BlsRZa1TTrNLHT7WyQ1S1ijhU+IjUKP1Yk&#xA;2bVEYFdirsVYZndPMuxV2KuxVBa1Ym+0ue2UBpCA8St9kyRkOnL25KK+2BWEXkvrW9lefETEgsbp&#xA;n+0ADztWfw5KzBv8v4euBKEmu7aI8XkAc9Ixu5+SirHFVtmNR1C7NtboIVABkkccjEp/aah48iPs&#xA;p9JpkoxJLGUqT688v2a6aY7dQk0QaRJmqzM5HxM5FCa0zIMBTjiZtLbS30tHlW9aWNV9HjO1RF8d&#xA;tFIwLgcVPJz9qmVQiK3bZyN7JsPL2mkAjmQdwQ2WeFFr8SSjL5WtWcvFcTRn+QlWQ/MEcvuYYDiC&#xA;RlLSaRHB/vTafWo+8lq5Rx/zykJB+iSvtkDiLMZQmtn5d8u3kAnty7xmo+0ykEdVZWAKkdwcrpst&#xA;X/who38sn/BnGk2i9O0Sw0+R5LYMGccW5MTtWuKGdrb28sUZliRyEABZQTSnvnFZT6j73o4fSHfU&#xA;bL/lni/4Bf6ZCyzd9Rsv+WeL/gF/pjZVbLa6bFG8ssMKRxgs7sqgBQKkkkdBjZQxayt7fUbqTWJb&#xA;dVSZfTsIWQD07atQxWmzzH429uK/s51HZ+l8OFn6i6DX6ozlwjkFGK4lvE9fTtMt5LRv7qe4k9H1&#xA;B/PGqRTHgexalevTfMwG+QcYgDaRN/jzCydZPrVrHc6bHEvKc+tCySx0FpMaGqxyV+SHMPtC/C5d&#xA;R97l6GvE2PQozSb3S305ZbeWIRxIv1ggheBC7iQGhUj/ACszoSFODkjLi3Xw6hc3/wAOj2xu1P8A&#xA;x+SExWoHiJSCZP8AnmrDxIzC1HaOPH5ly8PZ858/SE10vy9HbXAvr2X67qQBCzFeMcQbYrBHVuAI&#xA;6kkse5ptnP6nVzzGzyd1g08cYqKb5it6VaufrF7p2nL/ALsm+tzjwitCHB/5HmIfKuSjyJVNcirs&#xA;VdirsVYZndPMuxV2KuxV2KsR81ad9QiutRjIFjcKY76I1pSZuJ6AnizNyqoLI1WAbkwyJSxiy9Nu&#xA;S399Hp55FXm9IKJKd1nLPCGp1U1IO1MnEA8ywlIjkGU6XPoUMK29hcwOCS3wSq7Ox6sTUlicyI10&#xA;ceV9Ubc/7zS/6jfqyRYhBaMAVuQelbf/AKgrfK8XJsy81zaX6J9TTpPqj1q0NKwP41j241/mSh8a&#xA;9Mnw9zC+90WsWocwXrpZ3aU5wyOoBB6MjHjyU02P3gHBxd6eHuR+SYqmhA/WtRZdk9WNSP8AiwRK&#xA;Sf8AgWUfRmPk5uTj5JvkGbsVZhB/cx/6o/VnE5frPvejh9IX5WzdirGNduv0reNo0JrY25B1aQdH&#xA;agZLUH32aX/Jov7Rpt+zNHxnjl9Idfr9VwR4R9RQnme7jtdBvnaT0meJ4oWG59SQFEoBuTyPbN/l&#xA;lUS6TBG5hMoo44o0ijUJHGAqKOgUCgAyYDUTaAuru3lubeOKRWljknVkrQhhaTdR1zX9py/cn3h2&#xA;PZ0T4vwROh+UbDha6lqqJf6p6ScZHWsUIoCEhjOw4/zH4j49hodTrJ5D5O4w4I4xQZNmI3uxVQvr&#xA;+0sLV7q6kEcMfU7kknYKqipZmOwUbk9MIFqgtGt7qSSfVL2MxXN5xEdu1OUNulfTjam3M8i707ml&#xA;SFBwyPQKmmRV2KuxV2KsMzunmXYq7FXYq7FUg84/vbO0s+q3l1HBIP8AIkBSv0Oy4CkKMVlaah5t&#xA;v5J4lkNpGsYam9JFjZSGG4IZJBtiqOk8p6DK/OS3Zz4NNMR0p9nnTGkJVr3lyz0zQriXRxLazoU4&#xA;8ZZHSjOFascjOh+Ek9MNkckGIKXabqF5HevbRwpIJkt5FVmZXFLOAPWiutB8PWm5yzFI8mvLHqyP&#xA;L2hAzzBLi9ljUO1tYSrJXoXmKmFCO5PBvlX3ynK3YkVBEsMMcS/ZjUIPkoplwaUX5eUfUXn/AGri&#xA;eWQnxAcxof8AkWi5iyO7lQGyZ4GTsVZhB/cx/wCqP1ZxOX6z73o4fSF+Vs0j80+ZLPSrZbf6zHFq&#xA;V7SKyDn4UaQiNZpdjwijZgXcin05fgwmZ25MJSA5pJpl7Y6fpBjuAba4s29K/tnJeYXTH4lPVpHl&#xA;dqq37dQRWudXinCOO+QDzmbFOWSuZKrd6RcLpN3rWroDexxE2lmCGS1Q0qKjZpmGzv2+yu1S2iy6&#xA;45csa+kSDuMWlGPGR/EQmmdK86k8UFomlpqbQIbh7zUGMwUCQokV0igPStCiCmcrrJk5pB6fSRrH&#xA;H3ITTNX12Cw1GeHUudrp5it7VLqJZf3nqNCUZk9KRviCdyd/kcxjEWNnJZRpreZbrTbO6lubSKWe&#xA;JJZo/qsh481DFB/pPatK5WaBVQ1xvM1rpt1drqFsiQL6h9O0YOEU1c8nmlXZan7GGNE8lSGyWT/E&#xA;HlfUbq4lu5tTtWkJuCGWJxAWcxooWOMlpEX4VByZ5Edys+yhXYq7FXYq7FWGZ3TzLsVdirsVdiqQ&#xA;6sPX8zaRAN1hEkkw8AwLRt/wcGBLXlb97Nql2esly0at4xgmWM/8DPiFT/ChJ/Nd5FDol3D9q4uY&#xA;nigj6mr0T1DTokZYMzdsBKpTocag3UlB6jG2DuBuaWUFB8hU5fi5NGXmi42ur+RobAhY1JWe9Iqi&#xA;EdVjB+2//Cjvv8OGeSuSIY75orUbG2sdHFvAKBri3LMxLO7GdCzOx3YkDv8ALplMebdLYKN1OLe1&#xA;mnbdYkZyPZQTmUS4oCbaXbNa6baWzfahhjjb5qoBzEcxE4q7FU38ySa/FoazaIA1zEUaZAoeRoQp&#xA;5CJW+EvWhoeoqBvTOPiIHKeP6bL0Pq4PTzphQ88+Z7qzVI7u3QHY3MUFJttqfvHeMNUEN+7+gZt4&#xA;dk4zvZIcCeukNqopO0Su8rykzSz/AN/LKTI8m1PjZqk7bUzaY8UYCojZwZ5ZSNks58h+XrUaZbax&#xA;eR/Wb6VeVjLOTK1vaiohjgZ+RRSjc6L/ADU6AZy2szcUyI/S7zDEiIvmnvmiv+GtWo3A/U7ijnsf&#xA;Sbf6Mx8X1j3tkuSAuJ0gt5Z3+xEjO1PBRU52pNB5ICzSFvbZ7XyjpkEu0sdvJ63/ABk+oTlz9LVO&#xA;cYZXMnz/AEvWxFCmMwLJJ+XoC1WTXr1SnYiYRgn/AJLWxyZ+v3MnqKqqqFUUVRQAdABmMqH1O0F7&#xA;pt3ZnYXMMkJ7f3ile3zwg0VYCl56nlzy5qZqrRagUkOw4W7StcU2+HeOFBT3y+tyPJXo+Y6uxV2K&#xA;uxV2KsMzunmXYq7FXYq7FWNtcKvmbUr1vs6ZZ+nID4FVmU+3VxgSi/KNu8GhwpJvJykDN4hHMan6&#xA;UQYhCv5k1SbStEur+CL1poVXghrSrsE5EDcheXIj2xKsatbq7tJJ9St5o7q4u7WW2u3uU9aOe3nU&#xA;ckKq0dF+EFQpoPpOVzgJBnGVIU22oT6bqH1e6ECK9lGYo0IkIltbZK+pyNF+I9Frt1y0SIFNZgCb&#xA;ZzpzwPp9tJboscDxI0SIAFCsoIAA7UwJQutwXtwLCCzQSSzXsERDNxUCRuAZqBjRWYE0HTEz4d14&#xA;OLZV81eTNW0+0s4WvILg6hOIbmMQugSAIzSkP6j8moAq1Udcrx6szNUynpRAXaNy1i7FXYqzCD+5&#xA;j/1R+rOJy/Wfe9HD6Qll95T8uX1ybm60+J5nNZHAK8z0rIFID9P2q5KOecRQJpTCJNkMH07yJbeY&#xA;ddn1DUNGj0nRrZ/StrD0EhklEbVqwVV2c7s3fZVPEFmypZxCHCDxSPM9zARJlZ5B6aqqihVAVVFF&#xA;UbAAdABmvbUHrVlJf6Nf2MbBZLq3lgRm6AyIVBP35KBogqWFX2tPqPlwMtoI01RBbI73dlxVrkCM&#xA;E8Znk2L9AnLxUZ1OXWR4DseTosWhkJjcbHzZN5uAOnKDuD9YrX/mCuM5eHN3zG7eFJLXyZYqoAuj&#xA;+kwo24yKyXXToPheQZYf4ir0DKFdirzdrNpfK/mLTV+BoL+kVDulv6i21d+lY4nO/j9OZF+oFXoG&#xA;nXi3un2t4v2bmGOZflIob+OUEUVRGBXYq7FXYqwzO6eZdirsVdirsVYpZwz3tr5gliT1ZriV7X0w&#xA;QC8aEsOPKijlFNtU4Esh0q2ktdMtLaT+9hhRJCO7hQGP0nFCIlijlieKVQ8UilXRhVWVhQgg9jhV&#xA;57f2j+XriWxnY/oq4DNp1y52QkEmBmPcfs16/gIpatL94bvUrNlBTUbe1t4XrThMLSFY2IJAoXnU&#xA;V6jbt0VZxokU0Ok2sU0ZieOMIImILKq7IDQkV40rhQhNb1S9sNQ0t7JlS4ilkuVMi80IiT0+LLt1&#xA;Mw71yM4iQosoyo2l2p695ivtSi1W6ujczwE8LMVithGwo6IlW4k9QzFmqBU02yMMYjyTOZlzTex8&#xA;waZeMsQcwXLbC2nHpyE+C1+F/wDYE5ZbBMsKuxVmEH9zH/qj9WcTl+s+96OH0hflbN2KuxVLfMmq&#xA;forQr2+BHqxREW4P7Uz/AARL/spGUZZihxyEe9jKVC3j8ttbQWBQusIijCi4IAKlRRWr4g752EoR&#xA;4aPKnQRnLjsd70TV9Wiv/KelX84ER1KBpBHv9qfT534jv3zkRGpEd363oAts40k84adbqKQWGmJJ&#xA;CANldQ0TKP8AnncJgP0n3pZhlSuxVhTWjvr/AJp01PhfU7Mm3HgEiUFgfeW5bLr2B7lTnyVdx3Xl&#xA;mykj/ukDwxf8Y4ZGjT/hFGQyCpKnmQV2KuxV2KsMzunmXYq7FXYq7FUv0LS20zTktpJBNKCTJKBx&#xA;DHoNqn9kDAqYYVdiqhf28VzZTwyxrMjow9NlDAmm2xwKw/y95asdQ1Qa1Kokhg9FYInVhSaG3gXm&#xA;tSB8LKVO3VcACWb5JCTa/od3qNxaXFrdC3e2WVGVk5h1lKH6KGMYCqUv5X8zJUxX9vKeyyxsoH0p&#xA;vgpKHfyv5vnQw3EmnCF9mKiZiPkGFMaVmNlA9vZwW8krTvDGkbzP9pyqgFm9z1woVsKswg/uY/8A&#xA;VH6s4nL9Z970cPpC/K2bsVUry5S1tJ7l1d0gjaVkjUs5CKWIVR1JpsMIFlDyTXfOTa5NF9bmgtbW&#xA;BucOnpIHb1KUDSsaFmAOyhaA/wAxoR0Oi0uPF6jIGTrdTlnMcMYml175blXynea/qUTRPFJbtp9t&#xA;IrK0aLcxl5pE2IZxUAEfCvuxyvJrePPGIPpDPHpuDGb+op35mpZaN5Y0qVuLx28jCp6vb2Rip7mk&#xA;xP0ZqQblI/jm545M106ws0EV6sKi7kgjjkmA+IqoBAP+f6spJ6JR2RV2KqAsLMXxvxEv1xoxCZ6f&#xA;F6Yblx+VcN7UrHvIBEVnqVguyaffSW0Q8EiRE/FlY/TlmXoVZRlSuxV2KuxVhmd08y7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FWYQf3Mf8Aqj9WcTl+s+96OH0hflbN2KuxV2KuxVCanpVhqlt9&#xA;WvovVhryoGZCDSmzIVYbEg79NsIkRyVFKqqoVRRVFAB0AGBW8VdirsVaAArQUrufnireKuxV2Kux&#xA;Vhmd08y7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWYQf3Mf+qP1ZxOX6z73o4fSF+Vs3Yq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUs/wCdI/5ff+EztvU83s7/AJ0j/l9/4TH1Ls7/AJ0j/l9/&#xA;4TH1Ls7/AJ0j/l9/4TH1Ls7/AJ0j/l9/4TH1Ls7/AJ0j/l9/4TH1Ls7/AJ0j/l9/4TH1Ls7/AJ0j&#xA;/l9/4TH1Ls7/AJ0j/l9/4TH1Ls7/AJ0j/l9/4TH1Ls7/AJ0j/l9/4TH1Ls7/AJ0j/l9/4TH1Ls7/&#xA;AJ0j/l9/4TH1Ls7/AJ0j/l9/4TH1Ls7/AJ0j/l9/4TH1Ls03+CabfXfo4fxwHjSKZFF+gvSTj6/H&#xA;iKV41pTObn+X4jfFbt4+LQql3+4P/i78Mh/g39Jl++/ou/3B/wDF34Y/4N/SX99/Rd/uD/4u/DH/&#xA;AAb+kv77+i7/AHB/8Xfhj/g39Jf339F3+4P/AIu/DH/Bv6S/vv6Lv9wf/F34Y/4N/SX99/Rd/uD/&#xA;AOLvwx/wb+kv77+i7/cH/wAXfhj/AIN/SX99/Rd/uD/4u/DH/Bv6S/vv6Lv9wf8Axd+GP+Df0l/f&#xA;f0Xf7g/+Lvwx/wAG/pL++/ou/wBwf/F34Y/4N/SX99/Rd/uD/wCLvwx/wb+kv77+i7/cH/xd+GP+&#xA;Df0l/ff0Xf7g/wDi78Mf8G/pL++/ov8A/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:F87F117407206811822AB2A6B75D99AD</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:F87F117407206811822AB2A6B75D99AD</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:0880117407206811822A8072EAEFE205</stRef:instanceID>
            <stRef:documentID>xmp.did:0880117407206811822A8072EAEFE205</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:AC3D3EC9D6DEE611ADF3FA58164AFD71</stEvt:instanceID>
                  <stEvt:when>2017-01-20T09:07:56+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:02801174072068118083F6D0A67B0728</stEvt:instanceID>
                  <stEvt:when>2017-01-20T18:36:10+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:05801174072068118083F6D0A67B0728</stEvt:instanceID>
                  <stEvt:when>2017-01-20T21:11:37+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:577FABBD61206811822AA8872E1D75D1</stEvt:instanceID>
                  <stEvt:when>2019-04-07T19:22:06+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0880117407206811822A8072EAEFE205</stEvt:instanceID>
                  <stEvt:when>2019-05-11T00:15:08+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F87F117407206811822AB2A6B75D99AD</stEvt:instanceID>
                  <stEvt:when>2019-05-18T09:11:40+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>2754.000000</stDim:w>
            <stDim:h>1836.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Группа образцов по умолчанию</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1836 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1836 li
2754 1836 li
2754 0 li
cp
clp
1349.46 0 mo
2754 0 li
2754 1836 li
1349.46 1836 li
1349.46 0 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 .831373 .576471 rgb
f
0 0 mo
1380.21 0 li
1380.21 1836 li
0 1836 li
0 0 li
cp
.670588 .705882 .780392 rgb
f
1978.75 477.819 mo
2009.04 437.886 2106.81 504.9 2106.81 504.9 cv
2174.74 641.223 li
2174.74 641.223 2164.19 644.435 2155.46 650.861 cv
2143.53 659.583 2130.68 673.811 2117.83 680.696 cv
2099.01 690.795 2083.4 686.205 2083.4 686.205 cv
2083.4 686.205 2087.07 669.221 2081.56 650.402 cv
2077.89 637.55 2068.25 621.485 2057.7 615.978 cv
2044.39 609.092 2024.65 628.37 2016.39 618.731 cv
2006.75 607.256 2006.29 596.24 1997.57 582.011 cv
1991.6 571.914 1986.55 574.208 1985.17 568.241 cv
1983.8 562.734 1992.06 557.685 1987.47 545.75 cv
1976.91 520.046 1963.14 498.015 1978.75 477.819 cv
cp
1 .929412 .870588 rgb
f
497.556 417.69 mo
505.818 404.837 515.916 401.167 531.063 397.952 cv
570.537 389.69 631.583 406.674 654.992 420.902 cv
676.566 434.214 677.025 442.935 677.025 442.935 cv
677.025 442.935 689.877 454.869 687.583 482.409 cv
683.91 527.39 686.205 587.06 678.402 620.109 cv
670.14 655.451 625.617 666.009 625.617 666.009 cv
625.617 666.009 666.467 698.139 684.827 745.415 cv
690.336 759.645 702.27 798.66 713.745 828.035 cv
720.63 845.937 726.137 857.411 734.859 864.755 cv
747.252 875.313 757.809 873.018 771.579 877.148 cv
811.971 889.082 865.674 892.295 865.674 892.295 cv
865.674 892.295 857.871 901.475 848.232 907.442 cv
838.594 913.41 827.578 916.164 827.578 916.164 cv
827.578 916.164 833.544 928.556 836.299 934.982 cv
841.348 947.375 839.97 960.228 835.839 967.571 cv
832.167 974.456 810.594 978.129 794.987 979.505 cv
778.005 980.883 746.333 993.735 746.333 993.735 cv
764.694 1010.72 li
757.809 1017.6 li
757.809 1017.6 748.629 1018.52 735.317 1025.87 cv
724.761 1031.37 711.45 1041.47 700.893 1050.65 cv
681.156 1068.09 653.158 1097.93 642.141 1108.49 cv
631.583 1119.04 617.355 1134.19 605.421 1141.53 cv
566.865 1165.4 531.522 1163.1 526.014 1159.43 cv
520.506 1155.76 514.08 1142.91 509.031 1125.93 cv
505.818 1114.91 493.425 1119.96 477.36 1073.14 cv
462.213 1029.08 447.066 962.981 436.05 893.214 cv
428.706 846.855 421.821 796.365 424.116 758.726 cv
426.87 704.105 453.951 669.68 466.344 648.107 cv
475.065 632.96 470.934 622.404 470.934 620.109 cv
470.934 603.585 478.278 598.535 475.983 591.65 cv
471.393 575.585 462.672 554.012 463.131 535.194 cv
463.131 487.916 485.163 437.886 497.556 417.69 cv
cp
.458824 .490196 .556863 rgb
f
756.891 1016.68 mo
743.121 1033.21 li
743.121 1052.95 li
777.087 1052.95 li
776.627 1234.25 li
776.627 1234.25 730.269 1217.27 685.288 1208.09 cv
661.877 1203.04 633.879 1203.96 624.24 1203.04 cv
595.782 1200.29 562.275 1195.23 549.882 1187.43 cv
532.898 1177.33 529.227 1160.35 529.227 1160.35 cv
529.227 1160.35 567.783 1164.02 599.913 1144.75 cv
632.043 1125.47 664.172 1081.86 697.68 1052.49 cv
724.303 1029.54 756.891 1016.68 756.891 1016.68 cv
cp
.529412 .643137 .772549 rgb
f
757.35 1350.84 mo
776.169 1330.64 li
776.627 1389.39 li
776.627 1389.39 765.152 1375.62 758.728 1361.39 cv
751.843 1348.08 757.35 1350.84 757.35 1350.84 cv
cp
f
800.038 1054.32 mo
975.833 1052.49 li
975.833 1052.49 1091.5 1077.27 1135.11 1109.86 cv
1145.66 1117.67 1151.63 1136.94 1151.63 1143.83 cv
1151.63 1147.04 1149.79 1171.37 1145.66 1197.99 cv
1140.16 1231.04 1131.43 1270.97 1124.09 1311.82 cv
1116.29 1356.8 1111.24 1392.6 1105.73 1416.01 cv
1102.98 1427.95 1089.21 1431.16 1089.21 1431.16 cv
1091.96 1411.42 li
1091.96 1411.42 1077.27 1412.34 1059.37 1415.55 cv
1041.01 1419.23 1019.44 1425.2 1019.44 1425.2 cv
1015.77 1441.72 li
1015.77 1441.72 1007.5 1440.8 1007.96 1432.54 cv
1010.26 1398.57 1013.47 1343.49 1020.82 1292.08 cv
1025.41 1260.41 1037.34 1226.45 1035.96 1210.38 cv
1035.5 1203.04 1024.49 1201.2 1012.55 1199.37 cv
998.783 1197.07 984.555 1195.7 984.555 1195.7 cv
984.555 1195.7 1009.8 1238.38 985.933 1276.02 cv
965.736 1308.15 926.263 1334.31 890.001 1362.31 cv
862.002 1383.42 835.38 1409.13 819.773 1419.23 cv
814.266 1422.9 800.038 1409.59 800.038 1409.59 cv
800.955 1304.48 li
800.955 1304.48 811.052 1293.46 819.773 1284.74 cv
830.331 1274.18 839.97 1265.46 843.643 1257.66 cv
845.478 1253.99 800.496 1242.51 800.496 1242.51 cv
800.496 1054.32 li
800.038 1054.32 li
cp
f
1017.14 1426.11 mo
1017.14 1426.11 1037.34 1419.69 1056.62 1416.01 cv
1075.44 1412.34 1093.34 1411.42 1093.34 1411.42 cv
1093.34 1411.42 1088.29 1437.59 1086.45 1455.03 cv
1084.62 1472.01 1086.91 1480.28 1086.91 1480.28 cv
1086.91 1480.28 1062.58 1498.17 1041.93 1500.47 cv
1021.73 1502.76 1005.21 1490.37 1005.21 1490.37 cv
1017.14 1426.11 li
cp
1 .929412 .870588 rgb
f
732.563 1377.46 mo
757.35 1358.64 li
757.35 1358.64 761.94 1369.2 766.989 1377.46 cv
772.038 1385.72 776.627 1392.15 776.627 1392.15 cv
776.169 1417.85 li
776.169 1417.85 771.12 1416.47 765.613 1416.47 cv
759.645 1416.47 753.219 1418.31 747.252 1412.8 cv
737.154 1402.7 732.563 1377.46 732.563 1377.46 cv
cp
f
625.617 492.047 mo
667.845 468.639 li
667.845 468.639 670.599 478.277 670.14 490.67 cv
669.681 505.359 665.091 522.341 666.009 529.226 cv
666.928 536.111 676.107 543.455 676.107 543.455 cv
676.107 543.455 666.009 556.308 663.255 567.782 cv
659.124 583.848 660.501 601.749 650.402 612.765 cv
642.141 621.945 625.158 610.47 612.765 614.141 cv
598.995 618.731 590.733 638.01 590.733 638.01 cv
590.733 638.01 592.569 625.616 598.077 605.88 cv
601.29 593.486 607.716 576.962 611.388 562.734 cv
620.109 526.014 625.617 492.047 625.617 492.047 cv
cp
f
639.387 458.54 mo
655.911 438.345 671.976 441.099 671.976 441.099 cv
671.976 441.099 692.173 456.705 692.173 468.639 cv
691.712 480.572 671.058 488.375 671.058 488.375 cv
667.386 468.639 li
667.386 468.639 660.96 478.736 650.863 485.163 cv
640.764 491.589 626.535 495.26 626.535 495.26 cv
626.535 495.26 627.912 471.851 639.387 458.54 cv
cp
.623529 .478431 .388235 rgb
f
826.2 916.622 mo
826.2 916.622 843.643 911.115 853.281 903.312 cv
862.92 895.509 870.723 888.165 882.197 883.115 cv
893.672 878.066 896.886 880.361 903.313 880.361 cv
909.737 880.361 919.377 877.607 919.377 877.607 cv
919.377 877.607 943.245 868.886 962.063 869.345 cv
969.409 869.345 976.294 873.935 985.474 877.607 cv
1002.92 884.951 1023.11 894.59 1025.41 895.968 cv
1028.62 897.804 1029.54 904.23 1018.52 904.688 cv
1007.5 905.147 986.392 906.983 986.392 906.983 cv
970.785 907.901 li
970.785 907.901 971.704 912.95 969.409 915.245 cv
967.573 918 962.524 918 962.524 918 cv
962.524 918 963.441 920.295 962.524 923.049 cv
960.688 929.475 947.376 929.015 932.689 928.556 cv
918.919 928.098 903.313 928.098 903.313 928.098 cv
903.313 928.098 889.542 932.688 897.804 934.523 cv
909.279 937.277 941.409 932.229 946.917 937.277 cv
949.671 940.031 951.049 943.704 947.376 945.999 cv
940.033 951.047 911.574 951.965 889.084 956.096 cv
872.1 959.309 861.544 965.734 849.609 967.112 cv
840.429 968.029 833.085 967.112 833.085 967.112 cv
833.085 967.112 837.675 954.719 835.839 942.326 cv
835.38 929.934 826.2 916.622 826.2 916.622 cv
cp
1 .929412 .870588 rgb
f
733.482 1377.92 mo
733.482 1377.92 738.531 1403.16 749.087 1412.34 cv
754.138 1416.93 759.645 1415.1 764.694 1415.1 cv
770.661 1414.64 775.71 1415.55 775.71 1415.55 cv
775.71 1557.39 li
775.71 1557.39 755.514 1554.17 746.333 1544.54 cv
726.137 1523.42 699.058 1489.46 681.615 1465.59 cv
677.484 1459.62 672.435 1450.9 670.14 1443.55 cv
666.928 1432.54 671.518 1429.33 682.074 1418.31 cv
700.893 1398.57 733.482 1377.92 733.482 1377.92 cv
cp
.521569 .556863 .623529 rgb
f
1004.75 1490.37 mo
1004.75 1490.37 1022.19 1501.39 1042.39 1498.63 cv
1052.95 1497.26 1061.67 1487.16 1070.39 1482.57 cv
1078.19 1478.44 1085.54 1479.36 1085.54 1479.36 cv
1085.54 1479.36 1098.39 1509.19 1123.17 1523.88 cv
1144.75 1536.73 1168.61 1539.95 1186.97 1549.58 cv
1192.94 1552.8 1202.58 1557.84 1205.79 1562.43 cv
1208.55 1566.57 1209.01 1571.62 1209.92 1576.21 cv
1210.84 1580.34 1212.22 1584.47 1210.38 1586.3 cv
1205.33 1592.27 1190.19 1594.56 1175.04 1595.94 cv
1146.58 1598.24 1108.94 1595.03 1070.85 1592.27 cv
1038.26 1589.52 1001.54 1593.19 996.03 1588.6 cv
991.44 1584.47 991.898 1578.5 992.817 1565.19 cv
995.571 1535.81 1004.75 1490.37 1004.75 1490.37 cv
cp
f
800.038 1524.8 mo
808.757 1564.73 li
799.119 1563.81 li
800.038 1524.8 li
cp
f
814.725 1503.68 mo
844.101 1528.93 li
844.101 1528.93 851.904 1546.37 845.936 1557.39 cv
839.97 1568.4 824.822 1565.19 824.822 1565.19 cv
814.725 1503.68 li
cp
f
1962.22 454.869 mo
1971.41 446.606 1987.93 437.426 2001.7 429.165 cv
2017.76 419.526 2031.99 411.264 2050.81 407.132 cv
2073.76 402.083 2097.17 402.542 2117.83 413.559 cv
2132.97 421.821 2151.33 439.721 2164.64 466.802 cv
2179.33 496.637 2188.05 536.57 2199.53 568.241 cv
2203.66 579.716 2216.97 602.208 2231.2 620.109 cv
2246.8 639.845 2263.79 655.91 2275.26 682.991 cv
2285.36 706.858 2278.94 739.907 2278.02 760.104 cv
2277.56 769.742 2283.53 777.086 2283.07 778.922 cv
2282.15 783.054 2272.05 783.054 2264.71 777.086 cv
2262.41 775.25 2262.87 769.284 2262.87 769.284 cv
2262.87 769.284 2260.12 743.12 2252.77 716.499 cv
2248.18 699.515 2242.67 683.45 2231.2 670.14 cv
2214.22 650.861 2188.51 645.813 2166.48 639.845 cv
2151.33 635.715 2138.02 628.83 2132.05 623.78 cv
2107.27 601.29 2091.2 553.554 2091.2 553.554 cv
2091.2 553.554 2101.3 547.586 2103.6 539.325 cv
2106.35 530.604 2101.76 519.129 2096.71 517.751 cv
2078.35 511.325 2072.38 530.604 2052.19 523.719 cv
2029.24 515.456 2013.63 494.801 2003.99 485.621 cv
1992.06 474.605 1982.88 472.77 1982.88 472.77 cv
1982.88 472.77 1977.37 476.441 1974.16 484.704 cv
1971.41 492.965 1971.86 507.195 1971.86 507.195 cv
1971.86 507.195 1954.42 499.391 1950.29 488.375 cv
1947.54 478.277 1953.96 462.212 1962.22 454.869 cv
cp
.878431 .6 .356863 rgb
f
1710.23 874.854 mo
1717.58 870.723 1756.59 854.198 1776.33 852.362 cv
1809.84 849.608 1824.98 859.247 1824.98 859.247 cv
1858.95 859.706 li
1858.95 859.706 1877.31 867.05 1894.29 877.607 cv
1908.98 886.787 1932.85 890.46 1932.85 890.46 cv
1932.85 890.46 1938.36 905.147 1939.28 917.081 cv
1940.19 929.015 1935.6 937.736 1935.6 937.736 cv
1919.54 935.441 li
1892 933.146 li
1856.2 924.425 li
1856.2 924.425 1813.97 922.59 1793.31 918.459 cv
1785.97 917.081 1784.13 913.41 1784.13 912.032 cv
1784.13 910.654 1788.72 908.359 1800.2 907.442 cv
1811.21 906.525 1828.66 907.901 1838.29 907.442 cv
1847.02 906.983 1848.39 904.23 1843.8 902.394 cv
1832.33 898.263 1791.48 903.312 1772.66 899.64 cv
1768.07 898.721 1767.15 892.295 1767.15 892.295 cv
1767.15 892.295 1759.35 890 1758.43 887.246 cv
1757.51 884.033 1763.02 879.902 1763.02 879.902 cv
1758.89 878.066 li
1739.61 880.819 li
1729.05 879.443 li
1729.05 879.443 1719.41 881.28 1713.45 880.819 cv
1707.48 880.819 1704.73 877.607 1710.23 874.854 cv
cp
1 .929412 .870588 rgb
f
1634.5 1248.48 mo
1634.5 1248.48 1644.6 1266.84 1656.07 1278.77 cv
1667.09 1290.71 1679.48 1296.21 1679.48 1296.21 cv
1662.96 1316.41 li
1662.96 1316.41 1646.89 1308.15 1634.96 1296.21 cv
1623.02 1284.28 1615.22 1268.22 1615.22 1268.22 cv
1634.5 1248.48 li
cp
f
1813.05 1433.92 mo
1813.05 1433.92 1831.41 1438.5 1848.39 1438.5 cv
1864.92 1438.5 1880.06 1434.38 1880.06 1434.38 cv
1880.98 1458.24 li
1880.98 1458.24 1861.7 1462.83 1844.72 1462.37 cv
1827.74 1462.37 1812.59 1457.33 1812.59 1457.33 cv
1813.05 1433.92 li
cp
f
1773.58 1032.29 mo
1955.8 1030.91 li
1954.88 1207.63 li
1915.87 1206.71 li
1915.87 1206.71 1914.49 1225.53 1911.28 1246.64 cv
1903.93 1293.46 1891.08 1367.36 1888.79 1385.26 cv
1885.57 1410.96 1891.08 1419.69 1887.41 1427.49 cv
1882.36 1438.05 1853.9 1438.96 1848.85 1438.05 cv
1845.64 1437.59 1815.8 1443.09 1805.25 1425.65 cv
1798.82 1414.64 1806.62 1408.21 1803.41 1355.43 cv
1801.12 1319.63 1798.82 1287.95 1797.9 1255.37 cv
1796.99 1222.77 1796.99 1189.73 1796.99 1189.73 cv
1796.99 1189.73 1758.89 1226.91 1727.22 1260.87 cv
1710.69 1278.31 1702.43 1298.05 1691.87 1298.51 cv
1682.69 1298.97 1666.63 1292.08 1653.78 1277.85 cv
1642.3 1264.54 1633.58 1245.27 1633.12 1240.22 cv
1631.75 1230.58 1645.51 1217.73 1662.5 1195.7 cv
1670.76 1185.14 1701.05 1143.37 1725.38 1106.65 cv
1750.63 1067.17 1773.58 1032.29 1773.58 1032.29 cv
cp
.682353 .792157 .843137 rgb
f
1979.21 1031.37 mo
2015.47 1030.91 li
2015.93 1011.63 li
1997.57 993.735 li
1997.57 993.735 2086.16 1008.42 2137.56 1019.9 cv
2188.97 1031.37 2208.71 1035.04 2208.71 1035.04 cv
2208.71 1035.04 2176.58 1063.96 2120.12 1091.5 cv
2087.07 1107.57 2046.22 1120.42 2017.3 1136.03 cv
1995.27 1148.42 1980.13 1166.32 1980.13 1166.32 cv
1979.21 1106.19 li
1979.21 1031.37 li
cp
f
2082.94 686.205 mo
2082.94 686.205 2094.88 690.795 2117.37 679.32 cv
2129.3 672.894 2143.53 660.041 2154.55 651.32 cv
2164.19 643.976 2171.99 640.305 2171.99 640.305 cv
2171.99 640.305 2184.84 643.976 2198.15 648.566 cv
2216.51 654.992 2238.54 666.926 2252.77 715.121 cv
2277.56 798.2 2271.59 972.161 2271.59 972.161 cv
2206.41 1036.88 li
2051.73 1001.54 li
2060.45 981.341 li
2057.7 966.653 li
1961.77 959.31 li
1961.77 959.31 1938.82 958.85 1926.42 952.884 cv
1914.49 947.375 1913.11 936.36 1913.11 936.36 cv
1934.68 937.277 li
1934.68 937.277 1938.82 929.475 1937.9 917.54 cv
1936.98 905.606 1931.47 890.46 1931.47 890.46 cv
1931.47 890.46 1920.46 890 1903.01 882.656 cv
1885.57 875.313 1862.16 860.165 1862.16 860.165 cv
1862.16 860.165 1910.82 862.46 1948.91 857.411 cv
2021.89 845.937 li
2046.68 844.1 li
2046.68 844.1 2043.01 828.495 2046.22 809.216 cv
2049.89 788.103 2063.21 762.398 2071.93 736.235 cv
2080.19 711.909 2082.94 686.205 2082.94 686.205 cv
cp
1 .694118 .160784 rgb
f
1813.51 1457.33 mo
1813.51 1457.33 1830.95 1463.29 1847.47 1463.29 cv
1864 1463.29 1880.06 1457.33 1880.06 1457.33 cv
1880.06 1457.33 1881.44 1469.26 1886.95 1486.7 cv
1892.46 1504.14 1901.64 1528.01 1901.64 1528.01 cv
1890.16 1628.53 li
1876.85 1628.53 li
1873.64 1551.88 li
1873.64 1551.88 1858.95 1562.43 1843.8 1581.25 cv
1832.79 1595.02 1824.98 1616.6 1805.25 1624.86 cv
1788.26 1631.74 1722.63 1631.29 1717.12 1622.56 cv
1714.82 1618.89 1719.41 1608.33 1725.38 1604.2 cv
1738.23 1595.02 1763.02 1589.97 1778.63 1566.11 cv
1806.62 1523.42 1813.51 1457.33 1813.51 1457.33 cv
cp
.521569 .556863 .623529 rgb
f
1615.68 1266.84 mo
1615.68 1266.84 1622.56 1284.74 1634.96 1295.3 cv
1647.81 1306.31 1664.79 1311.82 1664.79 1311.82 cv
1664.79 1311.82 1659.29 1319.63 1651.94 1336.61 cv
1644.6 1353.59 1636.33 1377.46 1636.33 1377.46 cv
1565.19 1449.98 li
1554.63 1441.26 li
1601.45 1381.13 li
1601.45 1381.13 1581.25 1377.92 1557.39 1382.05 cv
1539.95 1385.26 1520.67 1394.9 1500.47 1388.47 cv
1483.03 1382.51 1433.92 1338.9 1435.29 1329.26 cv
1435.75 1325.13 1446.31 1320.08 1453.65 1320.54 cv
1469.26 1322.38 1491.29 1334.31 1518.83 1326.51 cv
1567.03 1312.74 1615.68 1266.84 1615.68 1266.84 cv
cp
f
1599.62 1380.67 mo
1631.75 1384.34 li
1566.11 1451.36 li
1556.01 1442.18 li
1599.62 1380.67 li
cp
f
1874.56 1550.96 mo
1901.18 1533.52 li
1891.54 1628.07 li
1877.77 1628.99 li
1874.56 1550.96 li
cp
f
994.193 909.737 mo
985.933 909.737 977.211 907.442 968.031 901.935 cv
967.114 901.475 966.654 900.099 967.114 898.721 cv
967.573 897.804 968.949 897.345 970.326 897.804 cv
983.179 904.688 993.735 906.525 1004.75 903.312 cv
1006.13 902.853 1007.05 903.77 1007.5 905.147 cv
1007.96 906.525 1007.05 907.442 1005.67 907.901 cv
1001.54 909.278 997.866 909.737 994.193 909.737 cv
cp
.184314 .207843 .254902 rgb
f
1085.99 905.147 mo
1130.06 957.474 li
1208.09 711.909 li
1209.01 709.153 1210.38 704.563 1210.38 702.729 cv
1210.38 702.729 li
1210.38 702.269 1209.01 702.269 1208.09 702.269 cv
1157.14 704.105 li
1157.14 704.105 li
1157.14 704.105 1153.01 704.563 1150.25 706.858 cv
1147.5 709.614 1145.66 715.121 1145.66 715.121 cv
1085.99 905.147 li
cp
1130.98 964.358 mo
1130.52 964.358 1129.6 963.9 1129.14 963.439 cv
1081.4 906.983 li
1080.95 906.525 1080.95 905.606 1080.95 904.688 cv
1141.53 712.826 li
1141.53 712.826 1143.37 706.4 1147.04 702.729 cv
1150.71 699.056 1156.22 698.598 1156.68 698.598 cv
1207.63 696.761 li
1208.09 696.761 1211.3 696.761 1213.6 698.598 cv
1214.51 699.515 1214.97 700.893 1214.97 702.27 cv
1214.97 705.941 1212.68 712.367 1212.22 712.826 cv
1132.81 962.063 li
1132.81 963.439 1132.35 963.9 1130.98 964.358 cv
1131.43 964.358 1130.98 964.358 1130.98 964.358 cv
cp
f
1565.19 685.286 mo
1564.73 687.123 1565.65 691.254 1566.57 693.549 cv
1644.6 939.113 li
1688.66 886.787 li
1628.53 696.302 li
1628.53 696.302 1627.16 690.795 1623.94 688.04 cv
1621.19 685.745 1617.06 685.286 1617.06 685.286 cv
1566.11 683.45 li
1566.57 683.91 1565.65 683.91 1565.19 685.286 cv
1565.19 685.286 li
cp
1643.68 945.999 mo
1643.68 945.999 li
1642.3 945.999 1641.84 945.08 1641.38 944.621 cv
1561.98 694.925 li
1561.98 694.466 1559.68 688.04 1560.14 684.369 cv
1560.14 684.369 li
1561.06 680.237 1564.73 679.318 1566.57 679.318 cv
1617.52 681.155 li
1617.97 681.155 1623.48 681.613 1627.16 685.286 cv
1630.83 688.958 1632.66 695.383 1632.66 695.383 cv
1692.79 886.787 li
1693.25 887.705 1692.79 888.163 1692.33 889.082 cv
1644.6 945.538 li
1645.06 945.999 1644.6 945.999 1643.68 945.999 cv
cp
.356863 .152941 .0784314 rgb
f
979.048 916.164 mo
990.981 949.211 li
1098.39 948.752 li
1072.68 914.786 li
979.048 916.164 li
cp
989.145 954.26 mo
988.228 954.26 987.309 953.801 986.85 952.884 cv
973.539 915.245 li
973.08 914.327 973.539 913.869 973.999 912.95 cv
974.458 912.491 974.916 912.032 975.833 912.032 cv
1073.6 910.654 li
1074.52 910.654 1074.98 911.115 1075.44 911.573 cv
1104.81 949.67 li
1105.27 950.589 1105.27 951.506 1105.27 951.965 cv
1105.27 952.425 1103.89 953.343 1103.44 953.343 cv
989.145 954.26 li
989.145 954.26 li
cp
.184314 .207843 .254902 rgb
f
1788.72 935.899 mo
1788.72 935.899 li
1674.89 935.441 li
1673.97 935.441 1673.05 934.982 1673.05 934.063 cv
1672.6 933.146 1672.6 932.229 1673.51 931.769 cv
1702.89 893.672 li
1703.35 893.214 1703.81 892.754 1704.73 892.754 cv
1768.07 893.672 li
1769.45 893.672 1770.36 894.59 1770.36 895.968 cv
1770.36 897.344 1769.45 898.263 1768.07 898.263 cv
1768.07 898.263 li
1706.1 897.344 li
1680.4 931.31 li
1787.8 931.769 li
1791.94 920.294 li
1796.53 921.671 li
1791.94 934.982 li
1790.56 935.441 1789.64 935.899 1788.72 935.899 cv
cp
.356863 .152941 .0784314 rgb
f
1798.36 909.278 mo
1797.9 909.278 1797.9 909.278 1797.44 909.278 cv
1796.07 908.82 1795.61 907.442 1796.07 906.525 cv
1797.44 902.853 li
1797.9 901.475 1799.28 901.016 1800.2 901.475 cv
1801.58 901.935 1802.03 902.853 1801.58 904.23 cv
1800.2 908.359 li
1800.2 908.82 1799.28 909.278 1798.36 909.278 cv
cp
f
2032.45 1130.06 mo
2031.99 1130.06 2031.53 1130.06 2031.08 1129.6 cv
2019.6 1122.71 2001.7 1114.45 1979.21 1105.73 cv
1977.83 1105.27 1977.37 1103.89 1977.83 1102.98 cv
1978.29 1101.6 1979.67 1101.14 1980.58 1101.6 cv
2003.54 1110.78 2021.44 1119.04 2033.37 1125.93 cv
2034.29 1126.38 2034.75 1127.76 2034.29 1129.14 cv
2033.83 1129.6 2032.91 1130.06 2032.45 1130.06 cv
cp
f
1848.39 1441.26 mo
1830.03 1441.26 1813.51 1437.13 1805.71 1429.79 cv
1802.03 1426.57 1800.2 1423.36 1800.2 1419.23 cv
1800.2 1416.01 1800.2 1411.42 1800.2 1406.38 cv
1800.66 1397.2 1800.66 1384.34 1800.2 1366.9 cv
1799.74 1346.71 1798.36 1322.84 1796.99 1299.43 cv
1795.61 1273.26 1794.69 1248.94 1794.23 1234.71 cv
1793.31 1154.84 1804.33 1107.57 1828.66 1090.58 cv
1860.79 1068.09 1908.52 1080.03 1936.98 1086.91 cv
1941.11 1087.83 li
1944.32 1088.75 1948.46 1089.67 1953.5 1091.5 cv
1954.88 1091.96 1955.34 1093.34 1954.88 1094.25 cv
1954.42 1095.63 1953.04 1096.09 1952.13 1095.63 cv
1947.08 1094.25 1943.41 1092.88 1940.19 1091.96 cv
1936.06 1091.04 li
1908.52 1084.16 1862.16 1072.68 1831.41 1094.25 cv
1808.92 1110.32 1797.9 1157.14 1798.82 1234.25 cv
1798.82 1248.48 1800.2 1272.81 1801.58 1298.97 cv
1802.95 1322.38 1803.87 1346.25 1804.79 1366.44 cv
1805.25 1384.34 1804.79 1396.74 1804.79 1405.92 cv
1804.79 1411.42 1804.33 1415.55 1804.79 1418.77 cv
1804.79 1421.52 1806.17 1423.82 1808.92 1426.11 cv
1817.18 1433.46 1836.46 1437.59 1856.66 1436.21 cv
1866.29 1435.75 1885.57 1431.62 1886.03 1424.28 cv
1886.03 1422.9 1886.03 1421.52 1886.03 1419.23 cv
1886.03 1407.75 1886.03 1383.88 1891.54 1352.67 cv
1893.38 1343.03 1895.21 1332.93 1897.05 1322.38 cv
1906.23 1272.35 1916.33 1215.89 1911.74 1190.19 cv
1911.74 1188.81 1912.19 1187.89 1913.57 1187.43 cv
1914.95 1187.43 1915.87 1187.89 1916.33 1189.27 cv
1920.92 1215.43 1911.28 1270.05 1901.64 1322.84 cv
1899.8 1332.93 1897.96 1343.03 1896.13 1352.67 cv
1890.62 1383.42 1890.62 1406.83 1890.62 1418.31 cv
1890.62 1420.61 1890.62 1422.44 1890.62 1423.82 cv
1890.16 1437.59 1860.33 1439.88 1857.11 1440.34 cv
1853.9 1441.26 1851.15 1441.26 1848.39 1441.26 cv
cp
f
1954.88 1209.46 mo
1954.88 1209.46 li
1944.32 1209 1925.96 1208.09 1918.16 1208.55 cv
1916.78 1208.55 1915.87 1207.63 1915.87 1206.25 cv
1915.87 1204.88 1916.78 1203.96 1918.16 1203.96 cv
1925.96 1203.5 1944.78 1204.42 1954.88 1204.88 cv
1956.26 1204.88 1957.18 1206.25 1957.18 1207.17 cv
1957.18 1208.55 1955.8 1209.46 1954.88 1209.46 cv
cp
f
1435.29 1332.02 mo
1434.83 1332.02 1434.83 1332.02 1434.38 1332.02 cv
1433 1331.56 1432.54 1330.18 1433.46 1328.8 cv
1441.26 1312.28 1462.83 1318.71 1475.68 1322.38 cv
1478.44 1323.3 1480.73 1323.75 1482.57 1324.21 cv
1503.22 1328.34 1514.24 1327.43 1544.54 1313.66 cv
1569.32 1302.18 1581.25 1295.3 1601.45 1276.94 cv
1609.25 1269.59 1623.02 1256.28 1631.75 1247.1 cv
1632.66 1246.18 1634.04 1246.18 1634.96 1247.1 cv
1635.88 1248.02 1635.88 1249.4 1634.96 1250.31 cv
1626.24 1259.5 1612.47 1273.26 1604.21 1280.61 cv
1583.55 1299.43 1571.16 1305.86 1545.91 1317.79 cv
1516.54 1331.56 1503.68 1333.85 1481.19 1328.8 cv
1479.36 1328.34 1476.6 1327.89 1473.85 1326.97 cv
1461.46 1323.3 1443.1 1317.79 1436.67 1331.1 cv
1437.13 1331.56 1436.21 1332.02 1435.29 1332.02 cv
cp
f
1514.7 1393.06 mo
1505.98 1393.06 1497.26 1390.77 1488.08 1384.34 cv
1487.62 1383.88 1432.54 1342.58 1433.46 1329.72 cv
1433.46 1328.34 1434.38 1327.43 1435.75 1327.43 cv
1437.13 1327.43 1438.05 1328.8 1438.05 1329.72 cv
1437.59 1337.52 1477.52 1371.03 1490.83 1380.21 cv
1507.81 1392.15 1522.04 1388.47 1540.86 1383.88 cv
1548.67 1382.05 1556.47 1379.75 1565.65 1378.83 cv
1587.22 1376.08 1602.37 1377.92 1612.93 1379.29 cv
1620.27 1380.21 1626.24 1381.13 1631.29 1380.21 cv
1635.88 1379.29 1638.63 1370.12 1642.3 1359.1 cv
1647.35 1343.03 1654.7 1321 1672.6 1300.35 cv
1673.97 1298.97 1675.35 1297.13 1677.19 1295.3 cv
1678.1 1294.38 1679.48 1294.38 1680.4 1295.3 cv
1681.32 1296.21 1681.32 1297.59 1680.4 1298.51 cv
1678.56 1300.35 1677.19 1302.18 1675.81 1303.56 cv
1658.83 1323.3 1651.48 1344.87 1646.43 1360.93 cv
1641.84 1374.71 1639.09 1383.88 1631.75 1385.26 cv
1625.78 1386.64 1619.81 1385.72 1612.01 1384.8 cv
1600.53 1383.42 1586.76 1381.59 1565.65 1384.34 cv
1556.93 1385.72 1549.13 1387.56 1541.32 1389.39 cv
1532.14 1390.77 1523.42 1393.06 1514.7 1393.06 cv
cp
f
2167.86 1029.08 mo
2167.4 1029.08 li
2153.63 1025.87 li
2114.15 1017.14 2054.48 1003.83 1997.11 995.111 cv
1995.73 995.111 1994.81 993.735 1995.27 992.357 cv
1995.27 990.979 1996.65 990.063 1998.03 990.521 cv
2055.4 999.242 2115.07 1012.55 2155 1021.28 cv
2168.78 1024.49 li
2170.15 1024.95 2170.61 1025.87 2170.61 1027.24 cv
2169.69 1028.16 2168.78 1029.08 2167.86 1029.08 cv
cp
f
1688.66 1300.35 mo
1677.64 1300.35 1660.66 1290.25 1649.19 1276.02 cv
1639.55 1264.54 1623.94 1240.22 1631.75 1230.58 cv
1637.25 1223.69 1666.63 1186.97 1681.78 1166.32 cv
1696.92 1145.66 1708.4 1127.76 1719.41 1110.32 cv
1725.84 1100.22 1731.81 1091.04 1738.69 1080.95 cv
1741.91 1075.89 1745.58 1070.85 1748.79 1065.34 cv
1756.13 1053.41 1764.4 1041.47 1773.12 1030 cv
1774.04 1029.08 1775.41 1028.62 1776.33 1029.54 cv
1777.25 1030.46 1777.71 1031.83 1776.79 1032.75 cv
1768.07 1044.22 1760.26 1056.16 1752.92 1068.09 cv
1749.25 1073.6 1746.04 1078.65 1742.82 1083.7 cv
1735.94 1093.8 1729.97 1102.98 1724 1113.08 cv
1712.99 1130.52 1701.51 1148.42 1686.37 1169.07 cv
1671.22 1189.73 1641.84 1226.45 1636.33 1233.33 cv
1631.75 1238.84 1641.84 1258.12 1653.78 1272.81 cv
1668.01 1290.25 1687.28 1298.05 1693.71 1294.38 cv
1697.84 1292.08 1701.51 1287.5 1707.94 1279.69 cv
1712.99 1273.72 1718.96 1266.38 1727.68 1256.74 cv
1735.48 1248.02 1744.66 1239.76 1753.84 1230.58 cv
1768.53 1216.35 1784.13 1201.66 1796.07 1186.05 cv
1796.99 1185.14 1798.36 1184.68 1799.28 1185.6 cv
1800.2 1186.51 1800.66 1187.89 1799.74 1188.81 cv
1787.35 1204.88 1772.2 1219.56 1757.05 1233.79 cv
1747.41 1242.97 1738.69 1251.23 1730.89 1259.96 cv
1722.17 1269.59 1716.2 1276.94 1711.15 1282.91 cv
1704.27 1291.17 1700.59 1296.21 1695.55 1298.97 cv
1692.79 1299.89 1690.96 1300.35 1688.66 1300.35 cv
cp
f
1565.65 1452.27 mo
1563.81 1452.27 1561.52 1450.9 1558.76 1448.6 cv
1554.17 1444.47 1552.34 1441.26 1553.71 1439.42 cv
1554.63 1438.05 1591.81 1389.85 1599.16 1380.67 cv
1600.07 1379.75 1601.45 1379.29 1602.37 1380.21 cv
1603.29 1381.13 1603.75 1382.51 1602.83 1383.42 cv
1586.3 1404.54 1562.44 1435.75 1558.3 1441.26 cv
1559.68 1443.09 1563.35 1446.77 1565.19 1447.68 cv
1571.62 1442.18 1610.63 1401.79 1631.29 1380.21 cv
1632.2 1379.29 1633.58 1379.29 1634.5 1380.21 cv
1635.42 1381.13 1635.42 1382.51 1634.5 1383.42 cv
1631.75 1386.18 1572.53 1447.23 1567.49 1451.82 cv
1567.03 1451.82 1566.11 1452.27 1565.65 1452.27 cv
cp
f
2078.81 873.935 mo
2078.35 873.935 2077.89 873.935 2077.43 873.477 cv
2076.52 873.018 2076.06 871.181 2076.52 870.264 cv
2099.92 832.625 2109.11 796.363 2116.91 764.694 cv
2126.09 727.974 2134.35 696.302 2161.43 676.106 cv
2162.35 675.188 2163.73 675.647 2164.64 676.565 cv
2165.56 677.484 2165.1 678.86 2164.19 679.779 cv
2138.48 699.515 2131.14 728.891 2121.5 766.07 cv
2113.24 798.2 2104.06 834.461 2080.19 873.018 cv
2080.19 873.477 2079.27 873.935 2078.81 873.935 cv
cp
f
2103.14 971.702 mo
2090.75 971.702 2076.97 970.325 2063.21 968.948 cv
2049.89 967.571 2036.58 966.193 2024.65 966.193 cv
2008.13 966.193 1959.93 961.604 1940.19 957.474 cv
1916.33 952.424 1914.03 947.834 1911.74 940.031 cv
1911.28 939.113 1911.28 938.194 1910.82 936.818 cv
1910.36 935.441 1910.82 934.523 1912.19 934.063 cv
1913.57 933.604 1914.49 934.063 1914.95 935.441 cv
1915.41 936.818 1915.87 937.736 1915.87 938.653 cv
1917.24 944.621 1918.62 948.294 1940.65 952.884 cv
1959.93 957.014 2007.67 961.604 2024.19 961.604 cv
2036.12 961.604 2049.89 962.981 2063.21 964.358 cv
2087.53 966.653 2112.78 968.948 2129.3 963.439 cv
2143.53 958.391 2156.38 930.852 2171.07 898.721 cv
2181.17 876.229 2193.1 850.984 2206.87 829.871 cv
2207.79 828.954 2209.17 828.493 2210.08 829.412 cv
2211 830.33 2211.46 831.707 2210.54 832.625 cv
2196.77 853.279 2185.3 878.524 2175.2 901.016 cv
2160.05 934.063 2147.2 962.522 2131.14 968.029 cv
2123.79 970.785 2114.15 971.702 2103.14 971.702 cv
cp
f
2055.86 885.87 mo
2054.48 885.87 2053.57 884.951 2053.57 883.575 cv
2053.57 870.723 2050.81 862.001 2048.52 853.279 cv
2045.76 844.1 2043.01 834.92 2043.01 820.691 cv
2043.01 806.462 2049.89 789.02 2056.78 772.496 cv
2060.45 763.775 2064.12 754.595 2066.42 746.333 cv
2067.34 742.661 2068.71 738.988 2069.63 735.317 cv
2075.6 716.499 2081.11 698.598 2082.02 665.55 cv
2082.02 664.172 2082.94 663.255 2084.32 663.255 cv
2085.7 663.255 2086.61 664.172 2086.61 665.55 cv
2086.16 699.515 2080.19 717.875 2074.22 736.695 cv
2073.3 740.366 2071.93 743.58 2071.01 747.251 cv
2068.25 755.514 2064.58 764.694 2061.37 773.874 cv
2054.94 790.397 2048.06 807.38 2048.06 820.691 cv
2048.06 834.461 2050.81 843.183 2053.57 851.903 cv
2056.32 860.625 2058.62 869.805 2059.07 883.575 cv
2058.16 884.492 2056.78 885.87 2055.86 885.87 cv
2055.86 885.87 li
cp
f
2270.67 975.375 mo
2270.67 975.375 li
2269.3 975.375 2268.38 973.997 2268.38 973.08 cv
2273.43 908.82 2265.62 807.84 2261.03 771.12 cv
2261.03 769.742 2261.95 768.825 2262.87 768.365 cv
2264.25 768.365 2265.17 769.284 2265.62 770.201 cv
2270.21 806.921 2278.02 908.359 2272.97 973.078 cv
2272.97 974.456 2272.05 975.375 2270.67 975.375 cv
cp
f
2237.63 775.71 mo
2236.25 775.71 2235.33 774.791 2235.33 773.415 cv
2233.04 732.563 2222.48 701.351 2206.41 690.335 cv
2205.5 689.417 2205.04 688.04 2205.95 687.123 cv
2206.87 686.205 2208.25 685.745 2209.17 686.664 cv
2226.15 698.598 2237.63 730.728 2239.92 773.414 cv
2239.92 774.333 2239 775.71 2237.63 775.71 cv
2237.63 775.71 li
cp
f
1763.94 883.115 mo
1763.48 883.115 li
1760.26 882.197 1757.97 880.819 1757.05 878.524 cv
1756.13 876.69 1756.13 874.854 1757.05 873.018 cv
1758.89 868.886 1764.86 866.591 1769.45 865.215 cv
1772.66 864.296 1775.87 862.46 1779.08 860.165 cv
1786.89 855.575 1796.07 850.067 1808 851.903 cv
1809.38 851.903 1810.3 853.279 1809.84 854.657 cv
1809.84 856.035 1808.46 856.952 1807.08 856.494 cv
1796.53 855.116 1788.26 859.706 1780.92 864.296 cv
1777.25 866.591 1774.04 868.428 1770.36 869.345 cv
1763.48 871.64 1761.64 873.477 1760.72 874.854 cv
1760.26 875.313 1760.26 875.771 1760.72 876.688 cv
1761.18 877.607 1762.56 878.066 1763.94 878.524 cv
1765.31 878.983 1765.77 879.902 1765.77 881.278 cv
1765.77 882.656 1764.86 883.115 1763.94 883.115 cv
cp
f
1715.74 883.575 mo
1711.61 883.575 1707.94 882.656 1706.1 880.819 cv
1704.73 878.985 1704.73 877.607 1705.18 876.69 cv
1705.64 873.935 1708.86 872.559 1711.15 871.64 cv
1711.61 871.181 li
1718.04 868.428 1727.68 863.838 1731.35 862.001 cv
1741.45 857.411 1747.87 855.575 1755.67 854.198 cv
1758.89 853.738 1762.1 852.821 1765.77 851.903 cv
1775.41 849.608 1789.64 849.148 1803.41 850.984 cv
1807.08 851.445 1811.21 852.362 1815.34 853.74 cv
1820.85 855.116 1826.36 856.494 1831.41 856.952 cv
1832.79 856.952 1833.71 858.33 1833.71 859.247 cv
1833.71 860.165 1832.33 861.542 1831.41 861.542 cv
1825.9 861.084 1819.93 859.706 1814.43 858.33 cv
1810.3 857.411 1806.62 856.035 1802.95 855.575 cv
1789.64 853.74 1776.33 854.198 1767.15 856.494 cv
1763.48 857.411 1760.26 858.328 1757.05 858.789 cv
1749.71 860.165 1743.28 861.542 1733.64 866.133 cv
1729.51 867.969 1719.87 872.559 1713.91 875.313 cv
1713.45 875.771 li
1712.53 876.229 1710.69 877.148 1710.23 877.607 cv
1711.61 878.985 1716.66 879.443 1724 878.066 cv
1731.35 877.148 1736.86 874.854 1742.82 872.1 cv
1746.04 870.723 1749.25 869.345 1752.46 868.428 cv
1757.05 867.05 1762.56 866.133 1765.77 865.674 cv
1766.23 865.674 li
1767.61 865.674 1768.53 866.591 1768.99 867.509 cv
1768.99 868.886 1768.07 869.804 1767.15 870.264 cv
1766.69 870.264 li
1763.94 870.723 1758.43 871.181 1754.3 872.559 cv
1751.08 873.935 1747.87 874.854 1744.66 876.229 cv
1738.23 878.985 1732.27 881.28 1724.46 882.197 cv
1721.25 883.575 1718.5 883.575 1715.74 883.575 cv
cp
f
1740.07 883.575 mo
1735.94 883.575 1730.43 883.115 1727.68 882.197 cv
1726.3 881.738 1725.38 880.819 1725.84 879.443 cv
1726.3 878.066 1727.22 877.607 1728.59 877.607 cv
1732.72 878.524 1739.15 878.985 1742.82 878.524 cv
1748.79 878.066 1757.97 875.771 1758.43 875.771 cv
1759.81 875.313 1760.72 876.229 1761.18 877.607 cv
1761.64 878.983 1760.72 879.902 1759.35 880.361 cv
1758.89 880.361 1749.71 882.656 1743.28 883.115 cv
1741.91 883.575 1740.99 883.575 1740.07 883.575 cv
cp
f
1976.45 520.965 mo
1975.54 520.965 1974.62 520.505 1974.16 519.587 cv
1971.41 513.161 1965.44 484.245 1980.58 471.851 cv
1981.5 470.934 1982.88 471.393 1983.8 472.31 cv
1984.72 473.229 1984.26 474.605 1983.34 475.523 cv
1970.95 485.621 1975.08 510.866 1978.29 517.751 cv
1978.75 519.129 1978.29 520.046 1976.91 520.963 cv
1976.91 520.965 1976.91 520.965 1976.45 520.965 cv
cp
f
1990.68 575.126 mo
1990.22 575.126 1989.76 575.126 1989.76 574.667 cv
1985.17 572.373 1982.88 569.619 1981.96 566.865 cv
1981.04 563.651 1982.88 560.897 1984.26 558.603 cv
1985.17 557.685 1985.63 556.308 1986.09 555.39 cv
1987.47 550.8 1986.55 548.045 1985.17 544.833 cv
1984.72 543.915 1985.17 542.538 1986.09 541.62 cv
1987.01 541.16 1988.39 541.62 1989.31 542.538 cv
1991.14 546.21 1992.98 550.34 1990.68 556.766 cv
1990.22 558.144 1989.31 559.52 1988.39 560.897 cv
1987.01 563.192 1986.09 564.57 1986.55 565.487 cv
1987.01 566.405 1987.93 568.241 1992.06 570.536 cv
1992.98 570.995 1993.44 572.373 1992.98 573.75 cv
1992.52 574.667 1991.6 575.126 1990.68 575.126 cv
cp
f
1986.55 527.39 mo
1986.09 527.39 1985.17 526.931 1984.72 526.473 cv
1983.8 525.555 1984.26 524.177 1985.17 523.26 cv
1991.14 518.67 1998.49 516.833 2005.37 518.67 cv
2006.75 519.129 2007.21 520.046 2007.21 521.424 cv
2006.75 522.8 2005.83 523.26 2004.45 523.26 cv
1998.95 521.882 1992.98 523.26 1988.39 526.931 cv
1987.93 527.39 1987.01 527.39 1986.55 527.39 cv
cp
f
2083.4 652.697 mo
2082.48 652.697 2081.56 652.239 2081.11 651.32 cv
2073.76 632.96 2062.29 618.731 2056.32 617.355 cv
2050.35 615.978 2043.93 618.272 2037.96 620.567 cv
2030.62 623.321 2022.81 625.616 2016.85 621.485 cv
2011.8 618.272 2009.96 613.683 2008.13 609.092 cv
2007.67 607.715 2008.13 606.339 2009.5 605.88 cv
2010.88 605.42 2011.8 605.88 2012.26 606.797 cv
2012.26 607.256 li
2014.09 611.387 2015.47 615.06 2019.14 617.355 cv
2023.27 620.109 2029.24 618.272 2036.58 615.519 cv
2043.01 613.224 2050.35 610.47 2057.7 612.305 cv
2066.88 614.6 2079.27 632.501 2085.7 649.025 cv
2086.16 650.402 2085.7 651.32 2084.32 651.78 cv
2083.86 652.697 2083.4 652.697 2083.4 652.697 cv
cp
f
2087.07 556.308 mo
2085.7 556.308 2084.78 555.39 2084.78 554.012 cv
2084.78 552.635 2085.7 551.717 2087.07 551.717 cv
2091.66 551.717 2095.33 549.881 2098.09 546.21 cv
2101.76 541.62 2103.14 535.194 2102.22 528.768 cv
2101.3 524.177 2098.55 520.505 2094.42 519.129 cv
2090.29 517.751 2085.7 520.046 2081.56 524.636 cv
2080.65 525.555 2079.27 525.555 2078.35 525.095 cv
2077.43 524.177 2077.43 522.8 2077.89 521.882 cv
2082.94 515.915 2089.37 513.161 2095.33 514.998 cv
2100.84 516.375 2104.97 521.424 2106.35 528.309 cv
2107.73 536.111 2105.43 543.915 2101.3 549.422 cv
2097.63 553.554 2093.04 555.849 2087.07 556.308 cv
2087.07 556.308 li
cp
f
2087.53 541.16 mo
2087.07 541.16 2087.07 541.16 2086.61 541.16 cv
2085.24 540.701 2084.78 539.325 2085.24 537.947 cv
2085.7 537.489 2087.53 532.44 2091.66 530.604 cv
2092.58 530.145 2093.96 530.604 2094.88 531.521 cv
2095.33 532.898 2094.88 533.816 2093.96 534.735 cv
2091.66 535.652 2090.29 538.865 2089.83 539.784 cv
2089.37 540.701 2088.45 541.16 2087.53 541.16 cv
cp
f
1959.47 503.522 mo
1959.01 503.522 1958.55 503.522 1958.09 503.063 cv
1949.37 495.26 1946.16 485.621 1948.46 475.065 cv
1952.13 459 1968.19 443.394 1987.47 437.426 cv
1988.85 436.967 1989.76 437.886 1990.22 438.804 cv
1990.68 440.181 1989.76 441.099 1988.85 441.558 cv
1970.95 447.066 1955.8 461.295 1952.59 475.982 cv
1950.75 484.704 1953.5 492.965 1960.85 499.391 cv
1961.77 500.31 1961.77 501.686 1960.85 502.605 cv
1960.85 503.063 1960.39 503.522 1959.47 503.522 cv
cp
f
2053.11 523.719 mo
2037.96 523.719 2025.11 509.949 2012.26 497.096 cv
1998.95 483.326 1986.09 470.015 1974.16 477.36 cv
1973.24 477.819 1971.86 477.819 1970.95 476.441 cv
1970.49 475.523 1970.49 474.146 1971.86 473.229 cv
1987.01 464.049 2001.7 479.195 2015.93 493.884 cv
2028.32 506.735 2041.63 520.505 2054.94 519.129 cv
2056.32 519.129 2057.24 520.046 2057.24 521.424 cv
2057.24 522.8 2056.32 523.719 2054.94 523.719 cv
2054.94 523.719 2054.03 523.719 2053.11 523.719 cv
cp
f
2005.83 537.947 mo
2003.99 534.735 2000.78 533.357 1998.49 534.735 cv
1996.19 536.111 1995.73 539.784 1997.57 542.996 cv
1999.4 546.21 2002.62 547.586 2004.91 546.21 cv
2007.21 544.833 2007.67 541.16 2005.83 537.947 cv
cp
f
2126.09 1245.27 mo
2060.91 1245.27 2007.21 1238.38 1981.04 1226.45 cv
1979.67 1225.99 1979.21 1224.61 1980.13 1223.23 cv
1980.58 1221.86 1981.96 1221.4 1983.34 1222.32 cv
2016.85 1237.92 2096.71 1244.35 2187.13 1238.84 cv
2324.83 1230.58 2362.01 1142.45 2388.64 1052.95 cv
2409.29 983.178 2419.39 934.982 2418.93 905.606 cv
2418.93 882.197 2412.96 867.509 2401.03 862.001 cv
2379 851.443 2336.77 872.099 2275.26 922.589 cv
2274.34 923.508 2272.97 923.049 2272.05 922.13 cv
2271.13 921.213 2271.59 919.835 2272.51 918.917 cv
2335.39 867.05 2379.46 846.395 2403.32 857.87 cv
2416.63 864.296 2423.52 880.361 2423.52 905.606 cv
2423.52 935.441 2413.42 984.095 2392.77 1054.32 cv
2365.69 1145.66 2327.59 1235.17 2187.13 1243.89 cv
2165.56 1244.81 2145.37 1245.27 2126.09 1245.27 cv
cp
f
1980.13 1168.16 mo
1979.67 1168.16 1979.21 1168.16 1978.75 1167.7 cv
1977.83 1166.78 1977.83 1165.4 1978.75 1164.48 cv
1988.85 1153.01 2000.78 1143.83 2005.83 1140.62 cv
2022.81 1130.06 2043.47 1121.79 2066.88 1111.7 cv
2116.45 1091.5 2178.41 1065.8 2235.79 1007.04 cv
2245.89 996.488 2255.98 985.931 2266.54 974.915 cv
2297.75 941.867 2327.13 910.654 2352.83 890.919 cv
2353.75 890 2355.13 890.459 2356.05 891.377 cv
2356.96 892.295 2356.51 893.672 2355.59 894.59 cv
2330.34 914.327 2300.97 945.08 2269.75 978.129 cv
2259.66 988.685 2249.56 999.701 2239 1010.26 cv
2181.17 1069.93 2118.74 1095.63 2068.71 1116.29 cv
2045.3 1125.93 2024.65 1134.19 2008.13 1144.75 cv
2003.99 1147.5 1992.52 1156.22 1981.96 1167.7 cv
1981.5 1168.16 1980.58 1168.16 1980.13 1168.16 cv
cp
f
1981.96 1226.45 mo
1981.5 1226.45 1981.5 1226.45 1981.04 1226.45 cv
1979.67 1225.99 li
1978.29 1225.53 1977.83 1224.15 1978.75 1222.77 cv
1979.21 1221.4 1980.58 1220.94 1981.96 1221.86 cv
1983.34 1222.32 li
1984.72 1222.77 1985.17 1224.15 1984.26 1225.53 cv
1983.8 1225.99 1982.88 1226.45 1981.96 1226.45 cv
cp
f
2051.73 1003.83 mo
2051.27 1003.83 2051.27 1003.83 2050.81 1003.83 cv
2049.44 1003.37 2048.98 1002 2049.89 1000.62 cv
2050.35 999.242 2051.27 998.325 2051.73 996.947 cv
2054.94 990.521 2059.53 982.719 2057.24 968.948 cv
2057.24 967.571 2058.16 966.653 2059.07 966.193 cv
2060.45 966.193 2061.37 967.112 2061.83 968.029 cv
2064.12 983.178 2059.07 992.357 2055.86 998.783 cv
2055.4 1000.16 2054.48 1001.08 2054.03 1002.46 cv
2053.57 1003.37 2052.65 1003.83 2051.73 1003.83 cv
cp
f
1924.13 952.884 mo
1923.21 952.884 1922.29 952.425 1922.29 951.506 cv
1921.83 950.589 1922.29 949.211 1923.21 948.294 cv
1947.08 935.899 1930.55 891.836 1930.55 891.377 cv
1930.09 890 1930.55 889.082 1931.93 888.624 cv
1933.31 888.165 1934.23 888.624 1934.68 890 cv
1935.6 891.836 1953.04 938.194 1925.5 952.425 cv
1925.05 952.425 1924.59 952.884 1924.13 952.884 cv
cp
f
2002.16 590.732 mo
2001.24 590.732 1999.86 589.815 1999.86 588.896 cv
1999.86 587.52 2000.78 586.601 2001.7 586.143 cv
2001.7 586.143 2009.5 584.765 2014.09 580.175 cv
2015.01 579.257 2016.39 579.257 2017.3 580.175 cv
2018.22 581.094 2018.22 582.47 2017.3 583.389 cv
2011.8 589.355 2003.08 590.273 2002.16 590.732 cv
2002.62 590.273 2002.62 590.732 2002.16 590.732 cv
cp
f
1931.93 893.214 mo
1931.93 893.214 1931.93 892.755 1931.93 893.214 cv
1908.98 890.46 1897.05 882.656 1890.16 878.066 cv
1889.24 877.607 1888.79 877.148 1887.87 876.69 cv
1884.2 874.395 li
1877.77 870.264 1870.88 866.133 1863.54 863.838 cv
1856.66 861.542 1848.39 861.542 1841.05 861.542 cv
1837.38 861.542 1833.71 861.542 1830.03 861.542 cv
1821.77 861.542 1812.59 861.084 1806.17 863.838 cv
1802.49 865.215 li
1794.69 867.969 1780 873.477 1779.08 876.229 cv
1779.08 877.607 1778.17 878.524 1776.79 878.524 cv
1776.79 878.524 li
1775.41 878.524 1774.49 877.607 1774.49 876.229 cv
1774.49 871.181 1782.76 867.51 1801.12 861.084 cv
1804.79 859.706 li
1812.13 856.952 1821.77 856.952 1830.49 857.411 cv
1834.16 857.411 1837.84 857.411 1841.51 857.411 cv
1849.77 857.411 1858.03 856.952 1865.83 859.706 cv
1873.64 862.46 1880.52 866.591 1887.41 870.723 cv
1890.62 873.018 li
1891.54 873.477 1892 873.935 1892.92 874.394 cv
1899.8 878.524 1910.82 885.868 1932.39 888.624 cv
1933.77 888.624 1934.68 890 1934.23 891.377 cv
1934.23 892.295 1933.31 893.214 1931.93 893.214 cv
cp
f
1768.07 895.05 mo
1768.07 895.05 li
1761.64 895.05 1757.05 892.755 1756.13 888.624 cv
1755.22 885.87 1756.59 882.656 1759.81 880.819 cv
1764.86 877.607 1777.71 873.935 1778.17 873.477 cv
1790.56 869.805 1801.58 866.591 1808 864.755 cv
1816.26 862.92 1824.98 863.838 1834.16 865.215 cv
1840.13 866.133 1846.1 866.591 1852.98 866.591 cv
1854.36 866.591 1855.28 867.51 1855.28 868.886 cv
1855.28 870.264 1854.36 871.181 1852.98 871.181 cv
1846.1 871.181 1839.67 870.264 1833.71 869.345 cv
1824.53 868.428 1816.72 867.05 1809.38 868.886 cv
1802.95 870.264 1792.39 873.477 1779.54 877.148 cv
1775.41 878.524 1766.23 881.738 1762.56 884.033 cv
1762.1 884.492 1760.26 885.41 1760.72 886.787 cv
1761.18 888.165 1763.48 889.541 1768.53 889.541 cv
1769.9 889.541 1770.82 890.46 1770.82 891.836 cv
1770.36 893.672 1769.45 895.05 1768.07 895.05 cv
cp
f
1935.14 940.49 mo
1934.68 940.49 li
1925.96 938.194 1914.03 937.736 1904.85 937.277 cv
1898.42 936.818 1892.46 936.818 1889.24 935.899 cv
1880.52 934.065 1875.47 932.688 1870.88 931.31 cv
1864.46 929.475 1860.33 928.556 1849.77 927.18 cv
1836 925.344 1818.56 924.425 1810.3 923.966 cv
1802.95 923.966 1792.85 922.59 1787.8 920.295 cv
1784.13 918.917 1781.38 917.54 1780.46 915.245 cv
1780 913.869 1780 912.95 1780.46 911.573 cv
1782.3 906.983 1788.26 906.523 1797.9 906.523 cv
1802.03 906.523 1805.71 906.523 1809.84 906.064 cv
1815.34 905.606 1820.39 905.606 1826.36 905.606 cv
1834.16 906.064 1839.67 905.606 1842.43 905.147 cv
1840.13 904.229 1835.08 903.77 1828.66 903.312 cv
1820.39 902.853 1809.38 903.312 1799.74 903.77 cv
1791.48 904.229 1784.13 904.229 1780.46 903.77 cv
1775.41 903.312 1768.53 901.934 1765.77 898.721 cv
1764.86 897.344 1764.4 895.968 1764.4 894.131 cv
1765.31 888.624 1773.58 887.705 1778.63 887.246 cv
1780 887.246 li
1781.84 887.246 1791.48 885.41 1801.12 883.573 cv
1808.46 882.197 li
1816.26 880.819 1824.53 881.278 1833.25 882.197 cv
1837.84 882.656 1841.97 882.656 1847.02 883.115 cv
1848.39 883.115 1849.31 884.033 1849.31 885.41 cv
1849.31 886.787 1848.39 887.705 1847.02 887.705 cv
1841.97 887.705 1837.38 887.246 1833.25 886.787 cv
1824.98 886.329 1817.18 885.41 1809.84 886.787 cv
1802.49 888.163 li
1792.39 890 1782.76 891.377 1781.38 891.836 cv
1780 891.836 li
1773.12 892.754 1769.9 893.672 1769.45 895.049 cv
1769.45 895.509 1769.45 895.509 1769.9 895.968 cv
1770.82 897.344 1774.49 898.721 1781.38 899.639 cv
1784.59 900.099 1791.94 899.639 1800.2 899.639 cv
1809.84 899.18 1820.85 899.18 1829.12 899.18 cv
1839.67 899.639 1845.64 901.016 1847.93 902.853 cv
1848.85 903.77 1848.85 904.688 1848.85 905.147 cv
1848.85 905.606 1848.39 906.983 1847.47 907.901 cv
1844.26 911.113 1832.79 910.654 1825.9 910.196 cv
1820.39 909.737 1815.34 910.196 1809.84 910.654 cv
1806.17 910.654 1802.03 911.113 1797.9 911.113 cv
1788.72 911.113 1785.51 911.573 1785.05 913.408 cv
1785.05 913.408 1785.51 914.327 1789.64 916.164 cv
1793.31 917.54 1802.95 918.917 1810.3 919.376 cv
1818.56 919.835 1836.46 920.754 1850.23 922.589 cv
1861.25 923.966 1865.38 925.344 1871.8 927.179 cv
1875.93 928.098 1880.98 929.934 1889.7 931.769 cv
1892.92 932.688 1898.42 932.688 1904.85 933.146 cv
1914.49 933.604 1926.42 934.063 1935.6 936.818 cv
1936.98 937.277 1937.44 938.194 1937.44 939.572 cv
1937.44 939.572 1936.52 940.49 1935.14 940.49 cv
cp
f
2105.89 896.885 mo
2105.43 896.885 2104.97 896.885 2104.51 896.426 cv
2088.91 884.492 2068.25 884.951 2060.45 885.868 cv
2052.19 886.787 2042.09 887.705 2031.08 889.082 cv
2015.47 890.919 1997.57 893.214 1981.04 894.131 cv
1957.63 895.968 1943.41 891.836 1933.77 889.541 cv
1926.42 887.705 1923.21 886.787 1920.92 888.624 cv
1920 889.541 1918.62 889.082 1917.7 888.163 cv
1916.78 887.246 1917.24 885.868 1918.16 884.951 cv
1922.29 881.738 1927.34 882.656 1935.14 884.951 cv
1944.32 887.246 1958.09 890.919 1981.04 889.541 cv
1997.57 888.163 2015.01 886.329 2030.62 884.492 cv
2041.17 883.115 2051.73 881.738 2059.99 881.278 cv
2068.71 880.361 2090.29 879.902 2107.27 892.754 cv
2108.19 893.672 2108.65 895.049 2107.73 895.968 cv
2107.27 896.885 2106.35 896.885 2105.89 896.885 cv
cp
f
1914.03 942.785 mo
1914.03 942.785 li
1644.6 941.408 li
1643.68 941.408 1642.76 940.948 1642.3 940.031 cv
1641.84 939.113 1641.84 938.194 1642.76 937.736 cv
1687.28 886.329 li
1687.74 885.868 1688.2 885.41 1689.12 885.41 cv
1757.51 884.951 li
1757.51 884.951 li
1758.89 884.951 1759.81 885.868 1759.81 887.246 cv
1759.81 888.624 1758.89 889.541 1757.51 889.541 cv
1690.04 890 li
1649.65 936.818 li
1914.03 938.194 li
1915.41 938.194 1916.33 939.113 1916.33 940.49 cv
1916.33 941.867 1915.41 942.785 1914.03 942.785 cv
cp
f
1641.84 944.621 mo
1641.84 944.621 1641.38 944.621 1641.84 944.621 cv
1641.38 944.621 1637.71 944.162 1635.42 941.867 cv
1633.12 939.572 1632.2 935.899 1632.2 935.441 cv
1556.47 697.68 li
1556.01 696.761 1554.17 689.876 1556.47 685.745 cv
1558.76 681.615 1563.35 680.237 1563.81 679.779 cv
1565.19 679.318 1566.11 680.237 1566.57 681.155 cv
1567.03 682.532 1566.11 683.45 1565.19 683.91 cv
1565.19 683.91 1561.98 684.827 1560.6 687.581 cv
1559.68 689.417 1560.14 693.549 1561.06 695.844 cv
1636.79 934.065 li
1636.79 934.982 1637.71 937.277 1638.63 938.194 cv
1639.55 939.113 1641.38 939.572 1641.84 939.572 cv
1643.22 939.572 1644.14 940.95 1644.14 941.867 cv
1643.68 944.162 1642.76 944.621 1641.84 944.621 cv
cp
f
1903.47 863.838 mo
1885.57 863.838 1874.1 862.46 1866.29 861.542 cv
1858.95 860.625 1854.82 860.165 1851.61 861.542 cv
1850.69 862.001 1849.31 861.542 1848.39 860.625 cv
1847.93 859.706 1848.39 858.33 1849.31 857.411 cv
1853.44 855.116 1858.03 856.035 1866.29 856.952 cv
1875.93 858.33 1891.08 860.165 1916.33 859.247 cv
1929.64 858.789 1952.13 855.116 1973.7 851.445 cv
1994.36 848.231 2013.63 845.019 2024.19 844.56 cv
2025.57 844.56 2026.49 845.478 2026.49 846.855 cv
2026.49 848.231 2025.57 849.15 2024.19 849.15 cv
2014.09 849.608 1994.81 852.821 1974.16 856.035 cv
1952.13 859.706 1929.64 863.379 1916.33 863.838 cv
1912.19 863.838 1907.6 863.838 1903.47 863.838 cv
cp
f
1718.04 1624.86 mo
1717.12 1624.86 1716.2 1624.4 1715.74 1623.02 cv
1710.69 1605.58 1729.97 1597.32 1742.82 1591.35 cv
1745.58 1589.97 1748.33 1589.06 1750.17 1587.68 cv
1768.07 1577.58 1777.71 1567.94 1791.48 1537.19 cv
1805.71 1505.06 1809.38 1478.9 1811.67 1433 cv
1811.67 1431.62 1812.59 1430.7 1813.97 1430.7 cv
1815.34 1430.7 1816.26 1432.08 1816.26 1433 cv
1813.51 1479.81 1810.3 1505.98 1795.61 1539.03 cv
1781.38 1571.16 1771.28 1580.79 1752.46 1591.81 cv
1750.63 1593.19 1747.87 1594.11 1744.66 1595.48 cv
1729.97 1601.91 1716.66 1609.25 1720.33 1621.65 cv
1720.79 1623.02 1719.87 1623.94 1718.96 1624.4 cv
1718.5 1624.86 1718.04 1624.86 1718.04 1624.86 cv
cp
f
1761.64 1630.83 mo
1742.36 1630.83 1720.33 1629.45 1716.2 1623.94 cv
1715.28 1623.02 1715.74 1621.65 1716.66 1620.73 cv
1717.58 1619.81 1718.96 1620.27 1719.87 1621.19 cv
1724.46 1627.15 1777.71 1626.7 1792.39 1625.32 cv
1812.59 1623.02 1821.31 1610.17 1832.33 1594.56 cv
1836.92 1588.14 1841.51 1581.25 1847.47 1573.91 cv
1861.7 1557.39 1874.56 1548.67 1883.74 1542.7 cv
1890.16 1538.57 1894.75 1534.89 1897.96 1530.76 cv
1900.72 1527.09 1897.05 1518.37 1892.92 1507.35 cv
1886.49 1491.75 1877.77 1470.18 1877.77 1443.09 cv
1877.77 1440.8 1877.77 1438.5 1877.77 1436.21 cv
1877.77 1434.83 1878.69 1433.92 1880.06 1433.92 cv
1881.44 1433.92 1882.36 1434.83 1882.36 1436.21 cv
1882.36 1438.5 1882.36 1440.8 1882.36 1443.09 cv
1882.36 1469.72 1891.08 1490.37 1897.51 1505.98 cv
1903.01 1518.83 1906.69 1528.01 1902.1 1533.98 cv
1898.42 1539.03 1893.38 1542.24 1886.49 1546.83 cv
1876.85 1553.25 1865.38 1561.06 1851.15 1577.58 cv
1845.18 1584.47 1840.59 1591.35 1836.46 1597.78 cv
1825.44 1613.84 1815.8 1628.07 1793.31 1630.83 cv
1790.56 1629.91 1776.79 1630.83 1761.64 1630.83 cv
cp
f
1888.79 1626.7 mo
1888.79 1626.7 li
1888.79 1626.7 li
cp
1884.2 1631.29 mo
1883.74 1631.29 1883.28 1631.29 1882.82 1631.29 cv
1878.23 1631.29 1875.93 1629.91 1875.47 1628.07 cv
1875.47 1626.24 1873.64 1565.19 1873.64 1553.25 cv
1873.64 1551.88 1874.56 1550.96 1875.93 1550.96 cv
1877.31 1550.96 1878.23 1551.88 1878.23 1553.25 cv
1878.69 1579.88 1879.61 1619.81 1880.06 1626.7 cv
1882.36 1627.16 1887.41 1627.16 1889.24 1626.24 cv
1890.62 1618.43 1895.67 1561.52 1898.42 1532.14 cv
1898.42 1530.76 1899.8 1529.85 1900.72 1529.85 cv
1902.1 1529.85 1903.01 1531.22 1903.01 1532.14 cv
1902.55 1535.81 1895.21 1620.73 1893.83 1627.61 cv
1892.46 1630.37 1887.87 1631.29 1884.2 1631.29 cv
cp
f
661.419 881.738 mo
660.501 881.738 660.042 881.28 659.583 880.819 cv
651.78 867.51 641.223 857.411 629.289 845.937 cv
615.978 832.625 600.372 817.938 585.684 795.446 cv
580.176 787.185 575.586 779.381 570.996 772.038 cv
551.718 740.366 536.571 715.121 496.638 710.531 cv
495.261 710.531 494.343 709.155 494.802 707.777 cv
494.802 706.4 496.179 705.482 497.556 705.941 cv
539.784 710.99 556.308 738.071 575.127 769.742 cv
579.717 777.086 584.307 784.89 589.815 793.151 cv
604.503 815.184 619.65 829.871 632.961 842.724 cv
645.354 854.657 655.911 864.755 664.172 878.524 cv
664.633 879.443 664.633 880.819 663.255 881.738 cv
661.877 881.738 661.877 881.738 661.419 881.738 cv
cp
.184314 .207843 .254902 rgb
f
526.014 1161.73 mo
526.014 1161.73 525.555 1161.73 526.014 1161.73 cv
520.047 1160.81 514.998 1152.09 509.49 1134.19 cv
506.277 1123.17 502.605 1119.96 498.474 1116.29 cv
492.048 1110.78 484.245 1103.43 474.147 1070.85 cv
456.705 1013.47 448.443 975.375 436.05 905.606 cv
426.411 852.821 414.937 777.545 424.116 737.154 cv
431.001 706.4 447.066 672.435 472.312 637.091 cv
473.229 636.174 474.606 635.715 475.523 636.632 cv
476.442 637.55 476.901 638.927 475.983 639.845 cv
451.197 674.73 435.591 707.777 428.706 738.071 cv
419.985 777.545 431.46 852.362 440.64 904.688 cv
453.033 973.997 461.295 1012.55 478.737 1069.47 cv
488.376 1101.14 495.72 1107.57 501.687 1113.08 cv
506.277 1117.21 510.408 1120.88 514.08 1133.27 cv
520.506 1154.38 525.096 1157.6 526.932 1157.6 cv
528.309 1157.6 529.227 1158.97 528.768 1160.35 cv
527.85 1161.27 526.932 1161.73 526.014 1161.73 cv
cp
f
775.251 1236.54 mo
774.792 1236.54 774.792 1236.54 774.333 1236.54 cv
735.777 1222.32 697.68 1209.92 655.911 1206.71 cv
652.239 1206.25 647.648 1206.25 643.059 1205.79 cv
607.716 1203.96 554.472 1200.74 535.653 1177.79 cv
532.44 1174.12 529.227 1168.61 526.473 1162.19 cv
526.014 1161.27 526.473 1159.89 527.391 1158.97 cv
528.768 1158.51 529.687 1158.97 530.604 1159.89 cv
533.358 1165.86 536.571 1170.91 539.325 1174.58 cv
556.767 1196.15 610.929 1199.37 643.059 1201.2 cv
647.648 1201.66 652.239 1201.66 655.911 1202.12 cv
698.139 1205.33 736.695 1218.18 775.251 1232.42 cv
776.627 1232.87 777.087 1234.25 776.627 1235.17 cv
777.087 1235.63 776.169 1236.54 775.251 1236.54 cv
cp
f
854.657 1259.5 mo
854.657 1259.5 854.199 1259.5 854.657 1259.5 cv
837.216 1257.66 818.397 1251.69 800.496 1245.72 cv
799.119 1245.27 798.66 1243.89 799.119 1242.97 cv
799.577 1241.59 800.955 1241.13 801.873 1241.59 cv
819.315 1247.56 838.134 1253.53 854.657 1255.37 cv
856.035 1255.37 856.952 1256.74 856.952 1257.66 cv
856.952 1258.58 855.576 1259.5 854.657 1259.5 cv
cp
f
800.038 1306.31 mo
799.577 1306.31 799.119 1306.31 798.66 1305.86 cv
797.743 1304.94 797.743 1303.56 798.66 1302.64 cv
816.562 1283.82 829.413 1270.97 837.216 1264.54 cv
838.134 1263.63 839.511 1264.08 840.429 1265 cv
841.346 1265.92 840.887 1267.3 839.97 1268.22 cv
832.167 1274.18 819.773 1286.58 801.873 1305.86 cv
801.414 1306.31 800.955 1306.31 800.038 1306.31 cv
cp
f
776.169 1393.06 mo
775.71 1393.06 774.792 1392.6 774.333 1392.15 cv
761.481 1375.62 753.219 1357.26 753.677 1350.38 cv
754.138 1348.08 766.989 1335.23 774.792 1327.43 cv
775.71 1326.51 777.087 1326.51 778.005 1327.43 cv
778.922 1328.34 778.922 1329.72 778.005 1330.64 cv
771.579 1337.07 760.104 1348.54 758.268 1351.29 cv
758.268 1355.88 764.694 1372.41 778.005 1388.93 cv
778.922 1389.85 778.464 1391.23 777.546 1392.15 cv
777.087 1393.06 776.627 1393.06 776.169 1393.06 cv
cp
f
774.792 1550.96 mo
774.333 1550.96 li
771.12 1550.04 768.366 1549.58 766.071 1548.67 cv
750.006 1543.62 741.285 1531.22 731.646 1516.08 cv
727.056 1509.19 722.466 1502.31 716.499 1495.42 cv
697.221 1472.93 679.779 1450.44 675.188 1429.79 cv
672.894 1419.69 692.631 1404.54 724.761 1380.67 cv
736.236 1371.95 747.252 1364.15 755.514 1356.8 cv
756.433 1355.88 757.809 1355.88 758.728 1357.26 cv
759.645 1358.18 759.645 1359.56 758.268 1360.47 cv
750.006 1367.82 738.99 1375.62 727.515 1384.34 cv
705.482 1400.87 677.942 1421.06 679.779 1428.87 cv
683.91 1448.6 701.353 1470.18 720.171 1492.67 cv
726.137 1499.55 730.728 1506.9 735.317 1513.78 cv
744.498 1528.01 752.76 1539.95 767.447 1544.54 cv
769.742 1545.45 772.498 1545.91 775.71 1546.83 cv
777.087 1547.29 777.546 1548.21 777.546 1549.58 cv
776.627 1550.5 775.71 1550.96 774.792 1550.96 cv
cp
f
805.086 1556.93 mo
805.086 1556.93 804.627 1556.93 805.086 1556.93 cv
800.496 1556.47 li
799.119 1556.47 798.201 1555.09 798.66 1553.71 cv
798.66 1552.34 800.038 1551.42 801.414 1551.88 cv
805.545 1552.34 li
806.923 1552.34 807.84 1553.71 807.381 1555.09 cv
807.381 1556.01 806.004 1556.93 805.086 1556.93 cv
cp
f
826.2 1558.3 mo
825.741 1558.3 825.283 1558.3 824.822 1558.3 cv
823.446 1558.3 822.527 1557.39 822.527 1556.01 cv
822.527 1554.63 823.446 1553.71 824.822 1553.71 cv
828.954 1553.71 832.626 1553.71 835.839 1553.25 cv
840.887 1552.34 844.101 1550.04 845.478 1546.37 cv
847.313 1540.4 843.643 1532.14 839.511 1528.01 cv
835.38 1524.34 831.249 1520.67 827.117 1517 cv
821.61 1512.41 816.562 1507.81 811.971 1503.22 cv
811.052 1502.31 811.052 1500.93 811.971 1500.01 cv
812.889 1499.09 814.266 1499.09 815.184 1500.01 cv
819.773 1504.6 824.822 1508.73 829.873 1513.78 cv
834.002 1517.45 838.134 1521.13 842.265 1524.8 cv
847.772 1529.85 851.904 1539.94 849.609 1547.75 cv
848.231 1551.42 845.019 1556.47 836.297 1557.84 cv
833.544 1558.3 829.873 1558.3 826.2 1558.3 cv
cp
f
817.02 1421.06 mo
809.218 1421.06 799.577 1412.34 798.201 1411.42 cv
797.282 1410.51 797.282 1409.13 798.201 1408.21 cv
799.119 1407.29 800.496 1407.29 801.414 1408.21 cv
804.627 1410.96 814.725 1418.77 819.315 1416.01 cv
828.954 1409.59 840.429 1399.95 852.362 1389.85 cv
860.166 1382.97 868.427 1376.08 876.231 1370.12 cv
922.59 1334.31 968.949 1298.05 981.341 1278.77 cv
999.242 1252.15 999.242 1208.55 965.276 1180.09 cv
957.933 1174.12 929.934 1155.76 915.705 1147.96 cv
914.786 1147.5 914.327 1146.12 914.786 1144.75 cv
915.246 1143.83 916.623 1143.37 918 1143.83 cv
932.229 1151.63 960.686 1170.45 968.031 1176.42 cv
1004.29 1206.25 1003.83 1252.61 985.014 1281.07 cv
972.161 1300.8 927.18 1336.15 878.526 1373.33 cv
870.723 1379.29 862.461 1386.18 854.657 1393.06 cv
842.724 1403.62 831.249 1413.26 821.151 1419.69 cv
820.692 1420.61 818.856 1421.06 817.02 1421.06 cv
cp
f
918.917 1148.88 mo
918.458 1148.88 918 1148.88 918 1148.42 cv
897.345 1136.94 869.805 1124.55 843.183 1112.62 cv
827.578 1105.73 812.889 1099.3 799.577 1092.88 cv
798.66 1092.42 797.743 1091.04 798.66 1089.67 cv
799.119 1088.29 800.496 1087.83 801.873 1088.75 cv
815.184 1095.17 829.873 1101.6 845.478 1108.49 cv
872.1 1120.42 900.099 1132.81 920.754 1144.29 cv
921.671 1144.75 922.131 1146.12 921.671 1147.5 cv
920.754 1148.42 919.836 1148.88 918.917 1148.88 cv
cp
f
774.333 1080.03 mo
773.874 1080.03 773.415 1080.03 772.956 1079.57 cv
765.613 1074.98 760.104 1071.3 756.891 1068.09 cv
755.973 1067.17 755.973 1065.8 756.891 1064.88 cv
757.809 1063.96 759.187 1063.96 760.104 1064.88 cv
763.317 1068.09 768.366 1071.76 775.251 1075.89 cv
776.169 1076.36 776.627 1077.73 776.169 1079.11 cv
776.169 1079.57 775.251 1080.03 774.333 1080.03 cv
cp
f
1008.42 1435.29 mo
1008.42 1435.29 li
1007.05 1435.29 1006.13 1433.92 1006.13 1433 cv
1006.59 1424.28 1007.5 1414.64 1007.96 1405 cv
1010.72 1368.28 1013.47 1326.97 1018.06 1295.3 cv
1020.82 1276.94 1024.49 1261.33 1027.24 1248.48 cv
1033.67 1221.4 1035.96 1208.09 1027.24 1205.33 cv
1020.36 1203.5 1015.31 1203.04 1009.34 1202.58 cv
1002 1202.12 993.735 1201.66 981.801 1197.07 cv
980.424 1196.61 979.965 1195.23 980.424 1194.32 cv
980.883 1192.94 982.26 1192.48 983.178 1192.94 cv
994.652 1197.07 1002 1197.53 1009.34 1197.99 cv
1015.31 1198.45 1020.82 1198.91 1028.16 1201.2 cv
1041.47 1205.33 1037.34 1221.86 1030.91 1249.4 cv
1028.16 1262.25 1024.49 1277.85 1021.73 1296.21 cv
1017.14 1327.89 1013.93 1369.2 1011.64 1405.92 cv
1011.18 1416.01 1010.26 1425.2 1009.8 1433.92 cv
1010.72 1434.38 1009.34 1435.29 1008.42 1435.29 cv
cp
f
1147.5 1588.14 mo
1140.16 1588.14 1132.81 1588.14 1125.47 1587.68 cv
1109.86 1587.22 1097.47 1585.84 1086.45 1584.47 cv
1074.06 1583.09 1063.5 1581.71 1052.95 1582.63 cv
1051.57 1582.63 li
1022.65 1584.47 996.488 1585.38 992.816 1573.91 cv
990.063 1564.73 990.981 1543.16 995.571 1522.96 cv
999.242 1506.44 1002.92 1490.37 1006.13 1476.6 cv
1008.88 1464.21 1011.18 1454.11 1012.09 1449.06 cv
1013.93 1440.8 1015.31 1433.92 1016.23 1425.65 cv
1016.23 1424.28 1017.6 1423.36 1018.98 1423.82 cv
1020.36 1423.82 1021.28 1425.19 1020.82 1426.57 cv
1019.9 1434.83 1018.52 1441.72 1016.68 1449.98 cv
1015.77 1455.49 1013.47 1465.13 1010.72 1477.98 cv
1007.5 1491.29 1003.83 1507.35 1000.16 1524.34 cv
996.03 1543.16 994.652 1564.73 997.406 1572.53 cv
1000.16 1581.25 1035.04 1578.96 1051.57 1578.04 cv
1052.95 1578.04 li
1063.96 1577.12 1074.98 1578.5 1087.37 1579.88 cv
1098.39 1581.25 1110.78 1582.63 1125.93 1583.09 cv
1171.83 1584.93 1203.5 1581.25 1206.71 1573.45 cv
1209.92 1566.11 1201.66 1558.76 1178.25 1547.75 cv
1171.83 1544.99 1164.48 1541.78 1156.22 1539.03 cv
1138.32 1532.6 1118.58 1524.8 1108.03 1514.7 cv
1081.4 1489 1082.78 1473.39 1084.16 1460.08 cv
1084.16 1458.24 1084.62 1456.41 1084.62 1454.57 cv
1085.54 1441.26 1087.37 1427.03 1090.13 1411.42 cv
1090.58 1410.05 1091.5 1409.13 1092.88 1409.59 cv
1094.26 1410.05 1094.71 1410.96 1094.71 1412.34 cv
1091.5 1427.95 1089.67 1441.72 1089.21 1455.03 cv
1089.21 1456.87 1088.75 1459.16 1088.75 1461 cv
1087.37 1474.31 1085.99 1487.62 1111.24 1511.95 cv
1120.88 1521.13 1140.62 1528.47 1158.06 1535.36 cv
1166.32 1538.57 1174.12 1541.32 1180.55 1544.54 cv
1199.37 1553.25 1216.81 1562.89 1211.3 1576.21 cv
1206.25 1585.38 1177.33 1588.14 1147.5 1588.14 cv
cp
f
1105.27 1421.06 mo
1104.81 1421.06 li
1103.44 1420.61 1102.98 1419.69 1102.98 1418.31 cv
1107.11 1402.7 1109.4 1387.56 1112.62 1367.82 cv
1113.99 1359.56 1115.37 1350.38 1117.21 1340.28 cv
1121.8 1313.66 1128.22 1280.15 1133.27 1253.53 cv
1135.11 1242.97 1136.94 1233.33 1138.78 1225.07 cv
1141.07 1213.14 li
1149.34 1169.53 1155.76 1135.56 1141.07 1118.12 cv
1127.76 1102.06 1085.08 1083.7 1027.24 1068.55 cv
1014.85 1065.34 994.193 1060.29 973.539 1055.7 cv
972.163 1055.24 971.704 1054.32 971.704 1052.95 cv
972.163 1051.57 973.08 1051.11 974.458 1051.11 cv
994.654 1055.7 1015.77 1060.75 1028.16 1063.96 cv
1056.16 1071.3 1124.09 1091.04 1144.29 1114.91 cv
1160.35 1134.19 1153.93 1169.07 1145.21 1214.05 cv
1142.91 1225.53 li
1141.53 1233.79 1139.7 1243.43 1137.4 1253.99 cv
1132.35 1280.61 1125.93 1314.12 1121.34 1340.74 cv
1119.5 1350.84 1118.12 1360.02 1116.75 1368.28 cv
1113.53 1388.01 1111.24 1403.62 1107.11 1419.23 cv
1107.11 1420.61 1106.19 1421.06 1105.27 1421.06 cv
cp
f
695.844 892.295 mo
694.926 892.295 694.007 891.836 693.549 890.919 cv
686.664 874.394 685.746 859.706 683.91 840.888 cv
682.532 823.905 680.698 802.79 674.271 772.496 cv
673.813 771.12 674.73 770.201 676.107 769.742 cv
677.484 769.284 678.402 770.201 678.861 771.579 cv
685.746 801.873 687.123 823.444 688.5 840.429 cv
689.877 859.247 691.254 873.018 697.68 889.082 cv
698.139 890.46 697.68 891.377 696.302 892.295 cv
696.302 892.295 696.302 892.295 695.844 892.295 cv
cp
f
728.433 863.379 mo
727.515 863.379 727.056 862.92 726.598 862.001 cv
714.663 840.429 706.401 814.725 698.598 790.397 cv
689.417 762.398 680.698 735.776 667.386 715.121 cv
650.402 688.958 628.83 671.516 625.158 668.304 cv
624.24 667.385 623.781 666.009 624.699 665.09 cv
625.617 664.172 626.994 663.714 627.912 664.631 cv
639.846 674.27 657.748 691.712 671.518 712.826 cv
685.288 733.94 694.007 760.563 703.188 789.02 cv
710.991 813.348 719.252 838.593 730.728 859.706 cv
731.188 860.625 730.728 862.001 729.81 862.92 cv
728.893 863.379 728.433 863.379 728.433 863.379 cv
cp
f
762.857 1013.47 mo
762.398 1013.47 761.481 1013.01 761.022 1012.55 cv
758.728 1010.26 755.973 1007.5 753.219 1004.75 cv
750.006 1001.54 746.333 998.325 743.121 994.652 cv
742.202 993.735 742.202 992.357 743.121 991.44 cv
744.039 990.521 745.416 990.521 746.333 991.44 cv
749.548 995.111 752.76 998.325 756.433 1001.08 cv
759.645 1003.83 762.398 1006.59 764.694 1008.88 cv
765.613 1009.8 765.613 1011.18 764.694 1012.09 cv
764.235 1013.01 763.776 1013.47 762.857 1013.47 cv
cp
f
1148.88 1599.15 mo
1147.5 1599.15 1146.12 1599.15 1144.75 1599.15 cv
1125.93 1598.7 1105.27 1597.32 1088.75 1595.48 cv
1074.06 1594.11 1061.21 1593.19 1054.78 1593.65 cv
1039.18 1594.56 1001.54 1596.4 994.193 1589.97 cv
990.522 1586.76 990.981 1579.42 991.44 1572.99 cv
991.44 1571.62 991.898 1569.78 991.898 1568.86 cv
991.898 1567.49 992.817 1566.57 994.193 1566.57 cv
994.193 1566.57 li
995.571 1566.57 996.488 1567.49 996.488 1568.86 cv
996.488 1570.24 996.488 1571.62 996.03 1573.45 cv
995.571 1578.04 995.112 1584.47 996.949 1586.3 cv
1000.16 1589.06 1019.44 1591.35 1054.32 1589.06 cv
1061.21 1588.6 1073.14 1589.52 1088.75 1590.89 cv
1105.27 1592.27 1125.47 1594.11 1144.29 1594.56 cv
1169.99 1595.03 1194.78 1591.81 1204.88 1587.68 cv
1209.46 1585.38 1209.01 1582.17 1207.17 1575.75 cv
1206.71 1574.83 1206.71 1573.91 1206.25 1572.99 cv
1205.79 1571.62 1206.71 1570.7 1208.09 1570.24 cv
1209.46 1569.78 1210.38 1570.7 1210.84 1572.07 cv
1210.84 1572.99 1211.3 1573.91 1211.76 1574.83 cv
1213.14 1580.34 1215.89 1588.14 1206.71 1592.27 cv
1197.07 1596.4 1174.12 1599.15 1148.88 1599.15 cv
cp
f
774.792 1559.22 mo
774.333 1559.22 li
766.071 1556.93 754.138 1552.8 747.252 1547.29 cv
736.236 1539.03 723.842 1522.96 709.155 1502.31 cv
705.023 1496.8 700.893 1491.75 697.221 1487.16 cv
692.173 1481.19 687.583 1475.68 683.451 1469.72 cv
675.647 1458.24 670.14 1450.44 668.304 1441.72 cv
666.009 1430.7 672.435 1424.73 679.32 1419.23 cv
680.237 1418.31 681.615 1418.77 682.532 1419.69 cv
683.451 1420.61 682.993 1421.98 682.074 1422.9 cv
674.73 1428.87 671.516 1433.46 672.894 1440.8 cv
674.271 1448.6 679.32 1455.95 687.123 1466.96 cv
691.254 1472.93 695.844 1478.44 700.434 1484.4 cv
704.565 1489.46 708.696 1494.5 712.826 1500.01 cv
727.515 1520.21 739.907 1536.27 750.006 1544.08 cv
755.514 1548.21 764.235 1551.88 775.71 1555.55 cv
777.087 1556.01 777.546 1557.39 777.087 1558.3 cv
776.627 1558.76 775.71 1559.22 774.792 1559.22 cv
cp
f
807.381 1566.11 mo
806.923 1566.11 806.923 1566.11 807.381 1566.11 cv
805.086 1565.65 802.791 1565.65 800.496 1565.19 cv
799.119 1565.19 798.201 1563.81 798.66 1562.43 cv
799.119 1561.06 800.038 1560.14 801.414 1560.6 cv
803.708 1561.06 806.004 1561.06 807.84 1561.52 cv
809.218 1561.52 810.135 1562.89 809.676 1564.27 cv
809.218 1565.19 808.299 1566.11 807.381 1566.11 cv
cp
f
826.659 1567.49 mo
825.283 1567.49 824.364 1566.57 824.364 1565.19 cv
824.364 1563.81 825.283 1562.89 826.659 1562.89 cv
828.954 1562.89 831.249 1562.89 833.085 1562.43 cv
843.643 1561.52 844.56 1555.55 845.478 1546.83 cv
845.478 1544.99 li
845.478 1543.62 846.855 1542.7 848.232 1543.16 cv
849.609 1543.16 850.527 1544.54 850.067 1545.91 cv
850.067 1547.75 li
849.15 1556.47 847.772 1566.11 833.544 1567.02 cv
831.708 1567.49 829.413 1567.49 826.659 1567.49 cv
826.659 1567.49 li
cp
f
1036.42 1500.93 mo
1028.62 1500.93 1018.52 1498.63 1005.21 1491.75 cv
1004.29 1491.29 1003.83 1489.91 1004.29 1488.54 cv
1004.75 1487.62 1006.13 1487.16 1007.5 1487.62 cv
1037.8 1503.22 1047.9 1495.42 1058.91 1486.7 cv
1065.8 1481.19 1072.68 1476.14 1084.62 1476.6 cv
1085.99 1476.6 1086.91 1477.98 1086.91 1478.9 cv
1086.91 1479.81 1085.54 1481.19 1084.62 1481.19 cv
1074.52 1480.27 1068.55 1485.32 1061.67 1490.37 cv
1055.24 1495.42 1048.36 1500.93 1036.42 1500.93 cv
cp
f
775.71 1418.77 mo
775.251 1418.77 li
771.579 1417.39 767.447 1417.85 763.776 1417.85 cv
749.548 1418.31 739.449 1416.01 731.646 1377.92 cv
731.188 1376.54 732.105 1375.62 733.482 1375.16 cv
734.859 1374.7 735.777 1375.62 736.236 1377 cv
744.039 1414.18 752.76 1413.72 763.776 1413.26 cv
767.908 1413.26 772.038 1412.8 776.627 1414.18 cv
778.005 1414.64 778.464 1416.01 778.005 1416.93 cv
777.546 1418.31 776.627 1418.77 775.71 1418.77 cv
cp
f
1014.39 1443.09 mo
1013.93 1443.09 1013.93 1443.09 1013.47 1442.64 cv
1007.96 1439.88 1005.67 1437.13 1006.13 1433.46 cv
1008.88 1418.31 1080.95 1409.59 1081.86 1409.59 cv
1082.78 1409.59 li
1089.21 1408.67 1105.73 1406.83 1107.57 1416.47 cv
1108.49 1421.06 1103.44 1427.95 1091.5 1433.46 cv
1090.13 1433.92 1089.21 1433.46 1088.29 1432.08 cv
1087.37 1430.7 1088.29 1429.79 1089.67 1428.87 cv
1099.76 1424.28 1103.44 1418.77 1103.44 1416.93 cv
1102.98 1414.64 1099.3 1411.88 1084.16 1413.72 cv
1082.78 1413.72 li
1055.24 1416.93 1012.55 1426.57 1011.18 1433.92 cv
1011.18 1434.83 1012.09 1436.21 1015.77 1438.05 cv
1016.68 1438.5 1017.6 1439.88 1016.68 1441.26 cv
1015.77 1442.64 1015.31 1443.09 1014.39 1443.09 cv
cp
f
542.538 1163.56 mo
536.571 1163.56 530.145 1163.1 524.178 1161.27 cv
522.801 1160.81 522.342 1159.89 522.342 1158.51 cv
522.801 1157.14 523.719 1156.68 525.096 1156.68 cv
557.685 1164.94 596.7 1146.12 613.683 1130.52 cv
630.207 1115.37 643.518 1101.6 654.992 1089.67 cv
664.172 1080.03 672.435 1071.3 681.615 1063.04 cv
701.812 1044.22 729.81 1018.06 757.809 1013.93 cv
759.187 1013.93 760.104 1014.39 760.563 1015.77 cv
760.563 1017.14 760.104 1018.06 758.728 1018.52 cv
732.105 1022.65 705.023 1047.9 684.827 1066.71 cv
676.107 1074.98 667.386 1083.7 658.206 1093.34 cv
646.731 1105.27 633.42 1119.04 616.896 1134.19 cv
599.913 1150.25 570.537 1163.56 542.538 1163.56 cv
cp
f
542.079 648.566 mo
542.079 648.566 li
521.424 646.73 497.556 632.96 488.376 618.272 cv
487.917 617.355 487.917 615.978 489.294 615.06 cv
490.212 614.6 491.589 614.6 492.507 615.978 cv
499.851 627.911 520.965 642.14 542.079 643.976 cv
543.456 643.976 544.374 645.354 544.374 646.271 cv
544.374 647.648 543.456 648.566 542.079 648.566 cv
cp
f
446.148 843.183 mo
445.23 843.183 444.312 842.265 443.853 841.346 cv
436.509 803.708 444.312 751.841 459.918 731.186 cv
460.836 730.269 462.213 729.81 463.131 730.728 cv
464.049 731.645 464.508 733.022 463.59 733.94 cv
448.443 754.136 441.558 803.708 448.443 840.429 cv
448.443 841.805 447.984 842.724 446.148 843.183 cv
446.607 843.183 446.148 843.183 446.148 843.183 cv
cp
f
679.32 1222.77 mo
663.255 1222.77 642.6 1222.32 615.978 1220.02 cv
475.065 1209.92 437.886 1126.84 411.264 1042.85 cv
389.691 973.997 377.757 918.917 378.675 891.836 cv
379.134 867.05 392.445 856.952 429.165 853.279 cv
430.542 853.279 431.46 854.198 431.919 855.116 cv
431.919 856.494 431.001 857.411 430.083 857.87 cv
391.986 862.001 384.183 873.018 383.724 892.295 cv
382.806 918.459 395.199 974.456 416.313 1041.93 cv
442.017 1124.55 478.737 1206.25 616.896 1215.89 cv
700.434 1221.86 725.22 1215.43 725.679 1215.43 cv
727.056 1214.97 727.974 1215.89 728.433 1217.27 cv
728.893 1218.64 727.974 1219.56 727.056 1220.02 cv
725.679 1220.02 713.745 1222.77 679.32 1222.77 cv
cp
f
441.558 1595.94 mo
441.099 1595.94 440.64 1595.94 440.181 1595.94 cv
435.132 1595.03 431.46 1589.97 432.378 1584.93 cv
498.933 1182.84 li
498.933 1181.46 500.31 1180.55 501.687 1180.55 cv
503.063 1180.55 503.982 1181.92 503.523 1182.84 cv
503.523 1183.3 li
502.605 1188.35 li
436.509 1585.38 li
436.05 1588.14 437.886 1590.43 440.64 1590.89 cv
443.394 1591.35 445.688 1589.52 446.148 1586.76 cv
511.785 1191.56 li
511.785 1190.19 513.162 1189.27 514.539 1189.73 cv
515.916 1189.73 516.833 1191.11 516.375 1192.48 cv
450.738 1587.68 li
449.82 1592.27 446.148 1595.94 441.558 1595.94 cv
cp
f
771.579 1335.69 mo
770.661 1335.69 769.284 1334.77 769.284 1333.85 cv
751.843 1227.83 li
751.843 1226.45 752.301 1225.53 753.677 1225.07 cv
755.055 1224.61 755.973 1225.53 756.433 1226.91 cv
773.874 1332.93 li
773.874 1334.31 772.956 1335.69 771.579 1335.69 cv
771.579 1335.69 li
cp
f
820.232 1595.94 mo
815.643 1595.94 811.513 1592.73 811.052 1588.14 cv
797.743 1506.9 li
797.743 1505.52 798.201 1504.6 799.577 1504.14 cv
800.955 1503.68 801.873 1504.6 802.333 1505.98 cv
815.643 1587.22 li
816.103 1589.97 818.397 1591.81 821.151 1591.35 cv
823.905 1590.89 825.741 1588.6 825.283 1585.84 cv
797.743 1416.47 li
797.743 1415.1 798.201 1414.18 799.577 1413.72 cv
800.955 1413.26 801.873 1414.18 802.333 1415.55 cv
829.873 1584.93 li
830.79 1589.97 827.117 1595.02 822.069 1595.94 cv
821.151 1595.94 820.692 1595.94 820.232 1595.94 cv
cp
f
776.169 1275.56 mo
775.251 1275.56 773.874 1274.64 773.874 1273.72 cv
767.447 1234.25 li
767.447 1232.87 767.908 1231.96 769.284 1231.5 cv
770.661 1231.04 771.579 1231.96 772.038 1233.33 cv
774.792 1248.48 li
778.922 1272.35 li
778.464 1274.18 778.005 1275.56 776.169 1275.56 cv
776.627 1275.56 776.169 1275.56 776.169 1275.56 cv
cp
f
509.949 1526.17 mo
509.49 1526.17 509.031 1526.17 508.572 1526.17 cv
503.523 1525.26 499.851 1520.21 500.769 1515.16 cv
549.423 1208.55 li
549.423 1207.17 550.8 1206.25 552.177 1206.71 cv
553.554 1206.71 554.472 1208.09 554.013 1209.46 cv
505.359 1516.08 li
504.9 1518.83 506.736 1521.58 509.49 1522.04 cv
510.867 1522.5 511.785 1522.04 513.162 1521.13 cv
514.08 1520.21 514.998 1519.29 515.457 1517.91 cv
564.111 1213.14 li
564.111 1211.76 565.488 1210.84 566.865 1211.3 cv
568.242 1211.3 569.16 1212.68 568.701 1214.05 cv
520.047 1518.83 li
519.588 1521.58 518.211 1523.88 515.916 1525.26 cv
514.08 1525.71 512.244 1526.17 509.949 1526.17 cv
cp
f
819.773 1284.28 mo
818.856 1284.28 817.938 1283.36 817.479 1282.45 cv
811.513 1249.86 li
811.513 1248.48 811.971 1247.56 813.348 1247.1 cv
814.725 1247.1 815.643 1247.56 816.103 1248.94 cv
822.069 1281.53 li
822.069 1282.91 821.61 1283.82 819.773 1284.28 cv
820.232 1284.28 819.773 1284.28 819.773 1284.28 cv
cp
f
867.051 1528.93 mo
865.215 1528.93 863.379 1528.47 861.542 1527.09 cv
859.248 1525.71 857.871 1523.42 857.413 1520.67 cv
837.675 1405 li
837.675 1403.62 838.134 1402.7 839.511 1402.25 cv
840.887 1402.25 841.806 1402.7 842.265 1404.08 cv
862.002 1519.75 li
862.461 1521.13 862.92 1522.5 864.298 1523.42 cv
865.215 1524.34 866.593 1524.34 867.969 1524.34 cv
870.724 1523.88 872.559 1521.13 872.1 1518.37 cv
851.904 1392.15 li
851.904 1390.77 852.364 1389.85 853.74 1389.39 cv
855.118 1389.39 856.035 1389.85 856.494 1391.23 cv
876.69 1517.45 li
877.607 1522.96 873.937 1528.01 868.888 1528.93 cv
867.969 1528.93 867.51 1528.93 867.051 1528.93 cv
cp
f
654.992 1207.17 mo
526.932 1207.17 481.032 1154.38 451.197 1097.01 cv
433.755 1063.96 414.477 1009.34 401.625 957.474 cv
395.199 931.31 381.429 869.345 395.658 862.001 cv
396.576 861.542 397.953 862.001 398.871 862.92 cv
399.33 863.838 398.871 865.215 397.953 866.133 cv
391.986 869.345 391.986 898.721 406.674 956.555 cv
419.526 1007.96 438.804 1062.58 455.787 1095.17 cv
486.081 1152.55 531.981 1205.33 665.091 1203.04 cv
666.467 1203.04 667.386 1203.96 667.386 1205.33 cv
667.386 1206.71 666.467 1207.63 665.091 1207.63 cv
661.419 1207.17 658.206 1207.17 654.992 1207.17 cv
cp
f
666.928 556.766 mo
666.009 556.766 665.55 556.308 665.091 555.39 cv
664.633 554.471 665.091 553.095 666.009 552.176 cv
671.976 548.964 673.353 545.75 673.353 544.374 cv
673.353 543.455 671.976 542.538 670.599 541.16 cv
669.223 539.784 667.386 537.947 666.009 535.652 cv
663.714 531.521 663.255 525.095 664.172 520.965 cv
664.633 519.587 665.55 519.129 666.928 519.129 cv
668.304 519.587 668.762 520.505 668.762 521.882 cv
667.845 525.095 668.762 530.145 670.14 533.357 cv
671.058 535.194 672.435 536.57 673.813 537.489 cv
675.647 538.865 677.484 540.701 677.942 542.996 cv
678.861 547.127 675.188 552.176 668.304 555.849 cv
667.386 556.766 667.386 556.766 666.928 556.766 cv
cp
f
660.96 509.949 mo
660.501 509.949 660.042 509.949 659.583 509.49 cv
656.37 506.735 648.107 504.9 643.977 506.276 cv
642.6 506.735 641.682 505.817 641.223 504.44 cv
640.764 503.063 641.682 502.145 643.059 501.686 cv
648.567 500.31 658.206 502.605 662.796 505.817 cv
663.714 506.735 664.172 508.112 663.255 509.03 cv
662.337 509.949 661.877 509.949 660.96 509.949 cv
cp
f
590.273 642.6 mo
589.815 642.6 589.356 642.6 589.356 642.14 cv
588.438 641.681 587.979 640.305 588.438 638.927 cv
596.241 622.862 603.126 615.519 610.47 613.224 cv
615.978 611.387 623.322 612.305 629.748 612.764 cv
637.092 613.683 644.895 614.6 649.026 611.387 cv
652.697 608.634 654.534 602.208 654.992 597.159 cv
654.992 595.781 656.37 594.864 657.288 594.864 cv
658.665 594.864 659.583 596.24 659.583 597.159 cv
659.124 599.913 658.206 610.01 651.78 614.6 cv
646.272 618.731 638.01 617.813 629.289 616.895 cv
622.863 616.436 616.437 615.519 611.847 616.895 cv
605.88 618.731 599.913 626.075 592.569 640.304 cv
591.651 641.681 591.192 642.6 590.273 642.6 cv
cp
f
655.911 526.473 mo
656.829 523.26 655.911 520.046 653.616 519.587 cv
651.321 518.67 648.107 520.505 647.19 523.719 cv
646.272 526.931 647.19 530.145 649.485 530.604 cv
652.239 531.063 654.992 529.226 655.911 526.473 cv
cp
f
669.223 500.31 mo
669.223 500.31 li
667.386 499.85 666.928 498.933 666.928 497.555 cv
668.762 487.458 668.304 477.819 665.091 467.261 cv
664.633 465.885 665.55 464.966 666.467 464.507 cv
667.845 464.049 668.762 464.966 669.223 465.885 cv
672.435 477.36 672.894 487.916 671.058 498.474 cv
671.518 499.391 670.599 500.31 669.223 500.31 cv
cp
f
638.928 491.589 mo
638.01 491.589 636.633 490.67 636.633 489.752 cv
636.633 488.375 637.092 487.458 638.469 486.999 cv
658.665 484.245 668.762 459 668.762 459 cv
669.223 457.623 670.599 457.164 671.518 457.623 cv
672.894 458.081 673.353 459.458 672.894 460.376 cv
672.435 461.754 661.877 488.375 638.928 491.589 cv
638.928 491.589 li
cp
f
678.402 488.375 mo
677.484 488.375 677.025 487.916 676.566 487.458 cv
675.647 486.54 676.107 485.163 677.025 484.245 cv
682.993 480.572 688.958 475.523 688.958 469.097 cv
689.419 461.754 682.993 453.032 669.681 442.476 cv
668.764 441.558 668.304 440.181 669.223 439.262 cv
670.14 438.345 671.518 437.886 672.435 438.804 cv
687.123 450.279 694.007 460.376 693.549 469.097 cv
693.09 477.819 685.746 483.785 679.32 487.916 cv
679.32 488.375 678.861 488.375 678.402 488.375 cv
cp
f
660.042 578.799 mo
659.583 578.799 li
651.321 576.504 643.518 577.421 643.518 577.421 cv
642.141 577.421 641.223 576.504 640.764 575.585 cv
640.764 574.208 641.682 573.29 642.6 572.831 cv
643.059 572.831 651.321 571.914 660.501 574.667 cv
661.877 575.126 662.336 576.504 661.877 577.421 cv
661.877 577.88 660.96 578.799 660.042 578.799 cv
cp
f
1910.82 948.294 mo
1910.82 948.294 li
1644.14 946.916 li
1642.76 946.916 1641.84 945.999 1641.84 944.621 cv
1641.84 943.245 1642.76 942.326 1644.14 942.326 cv
1644.14 942.326 li
1910.82 943.704 li
1911.74 943.704 1913.57 943.704 1914.49 942.785 cv
1915.41 941.867 1916.78 942.326 1917.7 943.245 cv
1918.62 944.162 1918.16 945.54 1917.24 946.457 cv
1914.95 948.294 1911.74 948.294 1910.82 948.294 cv
cp
.356863 .152941 .0784314 rgb
f
879.444 961.145 mo
878.067 961.145 877.148 960.228 877.148 958.85 cv
877.148 957.474 878.067 956.555 879.444 956.555 cv
1125.01 955.179 li
1084.62 908.359 li
969.868 909.737 li
968.49 909.737 967.573 908.82 967.573 907.442 cv
967.573 906.064 968.49 905.147 969.868 905.147 cv
1085.99 903.312 li
1086.45 903.312 1087.37 903.77 1087.83 904.23 cv
1132.35 955.638 li
1132.81 956.096 1133.27 957.474 1132.81 957.933 cv
1132.35 958.391 1131.43 959.31 1130.52 959.31 cv
879.444 961.145 li
879.444 961.145 li
cp
.184314 .207843 .254902 rgb
f
1132.81 964.358 mo
1131.89 964.358 1131.43 964.358 1130.98 964.358 cv
1129.6 964.358 1128.68 962.981 1129.14 961.605 cv
1129.6 960.228 1130.52 959.769 1131.89 959.769 cv
1131.89 959.769 li
1132.35 959.769 1133.73 959.769 1134.65 959.31 cv
1135.57 958.85 1136.03 957.015 1136.48 956.096 cv
1213.6 712.826 li
1214.51 710.99 1215.43 707.777 1214.97 705.941 cv
1214.97 705.023 1212.68 702.27 1210.38 701.81 cv
1209.01 701.351 1208.55 700.434 1208.55 699.056 cv
1209.01 697.68 1209.92 697.22 1211.3 697.22 cv
1215.43 698.139 1218.64 701.81 1219.1 705.023 cv
1220.02 708.695 1217.73 713.745 1217.73 714.663 cv
1140.62 957.474 li
1140.62 957.933 1139.7 961.145 1137.4 962.981 cv
1136.03 963.9 1134.19 964.358 1132.81 964.358 cv
cp
f
867.51 966.653 mo
864.298 966.653 li
862.92 966.653 862.002 965.276 862.002 964.358 cv
862.002 962.981 863.379 962.063 864.298 962.063 cv
867.051 962.063 li
1122.71 960.687 li
1125.47 960.687 1128.22 960.228 1128.68 960.228 cv
1129.6 959.31 1130.98 959.31 1131.89 960.228 cv
1132.81 961.145 1132.81 962.522 1131.43 963.439 cv
1129.6 965.276 1125.01 965.276 1122.25 965.276 cv
867.51 966.653 li
cp
f
686.205 1000.16 mo
667.386 1000.16 644.895 999.242 618.273 997.406 cv
566.406 994.193 532.44 954.719 492.966 909.278 cv
488.376 903.77 483.786 898.721 478.737 893.214 cv
477.819 892.295 477.819 890.919 478.737 890 cv
479.655 889.082 481.032 889.082 481.95 890 cv
486.54 895.509 491.589 900.558 496.179 906.064 cv
535.194 950.589 568.701 989.604 618.732 992.816 cv
676.566 996.488 716.499 996.028 739.907 991.438 cv
752.301 989.144 760.563 985.931 767.908 982.719 cv
775.251 979.964 781.678 977.21 789.48 976.751 cv
804.627 975.834 824.822 972.161 827.578 970.325 cv
832.626 968.029 836.297 956.555 835.38 946.457 cv
834.002 932.688 828.954 921.671 822.527 915.705 cv
817.479 911.115 813.808 911.115 805.545 911.115 cv
802.791 911.115 799.577 911.115 795.906 910.654 cv
792.234 910.654 788.561 910.654 784.431 910.654 cv
771.579 910.654 755.973 910.654 733.022 904.23 cv
723.842 901.475 716.958 899.18 710.991 897.345 cv
698.139 893.214 690.795 890.919 677.484 890.46 cv
676.106 890.46 675.188 889.541 675.188 888.165 cv
675.188 886.787 676.106 885.87 677.484 885.87 cv
691.712 886.329 699.516 888.624 712.367 892.755 cv
717.876 894.59 725.22 896.885 733.941 899.18 cv
755.973 905.606 771.579 905.606 783.971 905.606 cv
788.103 905.606 791.775 905.606 795.446 905.606 cv
799.119 905.606 802.331 906.064 805.086 906.064 cv
813.806 906.064 818.856 906.064 825.281 911.573 cv
832.626 917.998 837.675 930.393 839.511 945.08 cv
840.887 956.096 837.216 969.866 829.413 973.539 cv
825.283 975.834 803.25 979.046 789.48 980.424 cv
782.595 980.883 776.627 983.178 769.284 985.931 cv
761.481 988.685 753.219 992.357 740.368 994.652 cv
727.056 998.783 709.155 1000.16 686.205 1000.16 cv
cp
f
826.2 918.459 mo
825.283 918.459 824.364 917.54 823.905 916.622 cv
823.905 915.245 824.364 914.327 825.741 913.869 cv
842.265 911.115 850.067 903.77 855.116 898.721 cv
856.035 897.804 857.411 896.885 858.33 895.968 cv
861.083 893.672 li
866.591 889.082 872.559 884.033 879.444 880.819 cv
886.329 877.607 893.214 877.607 900.558 878.066 cv
903.771 878.066 906.525 878.066 909.737 878.066 cv
917.083 878.066 925.344 877.607 931.77 880.819 cv
934.982 882.656 li
948.752 889.541 957.474 894.59 957.474 899.639 cv
957.474 901.016 956.556 901.934 955.179 901.934 cv
955.179 901.934 li
953.801 901.934 952.884 901.016 952.884 899.639 cv
952.884 896.885 939.114 889.541 933.146 886.787 cv
929.934 884.951 li
924.426 882.197 917.081 882.656 910.196 882.656 cv
906.984 882.656 903.771 882.656 901.016 882.656 cv
894.591 882.656 887.706 882.197 882.197 884.951 cv
875.771 888.163 870.264 892.754 864.756 897.344 cv
862.001 899.639 li
861.083 900.558 860.166 901.475 859.248 902.394 cv
852.823 907.442 844.56 915.245 826.2 918.459 cv
826.2 918.459 li
cp
f
962.522 920.754 mo
961.146 920.754 960.228 919.835 960.228 918.459 cv
960.228 917.081 961.146 916.164 962.522 916.164 cv
966.195 916.164 968.031 914.786 968.49 912.95 cv
968.949 911.573 968.49 910.196 967.112 908.82 cv
964.359 906.064 956.556 902.853 952.884 901.016 cv
946.458 898.263 934.982 893.672 927.639 891.377 cv
921.671 889.541 915.246 890.46 907.442 891.836 cv
902.394 892.755 896.886 893.672 890.919 893.672 cv
889.541 893.672 888.624 892.755 888.624 891.377 cv
888.624 890 889.541 889.082 890.919 889.082 cv
896.426 889.082 901.476 888.165 906.525 887.246 cv
914.327 885.87 922.131 884.492 929.016 886.787 cv
936.36 889.082 948.294 894.131 954.261 896.426 cv
955.637 896.885 965.736 901.016 969.866 904.688 cv
972.621 906.983 973.539 910.654 972.621 913.869 cv
971.244 918.459 967.112 920.754 962.522 920.754 cv
962.522 920.754 li
cp
f
835.38 970.325 mo
834.002 970.325 833.085 969.407 833.085 968.029 cv
833.085 966.653 834.002 965.734 835.38 965.734 cv
845.478 965.734 852.362 965.276 858.789 963.439 cv
866.134 961.145 870.264 959.769 873.937 958.391 cv
879.444 956.555 883.116 955.179 892.296 953.343 cv
904.23 951.047 918.919 950.129 926.263 949.67 cv
932.688 949.211 940.491 947.834 943.704 945.999 cv
947.835 943.704 947.835 942.785 947.376 942.326 cv
946.917 940.49 945.081 940.031 936.819 940.031 cv
933.147 940.031 929.934 939.572 926.721 939.572 cv
922.131 939.113 918 939.113 913.41 939.113 cv
909.279 939.572 898.723 940.031 895.05 936.818 cv
893.674 935.899 893.674 934.523 893.674 933.604 cv
893.674 932.229 893.214 927.639 910.656 926.72 cv
918 926.261 927.18 926.72 935.442 927.179 cv
942.328 927.639 948.294 927.639 951.047 927.179 cv
955.637 926.72 958.851 925.344 960.228 923.508 cv
960.688 923.049 960.688 922.13 960.688 921.671 cv
960.228 919.376 955.179 917.998 951.966 917.54 cv
950.589 917.54 li
949.212 917.081 941.409 915.703 933.147 913.408 cv
926.263 911.573 li
920.295 910.196 913.41 910.654 906.525 911.573 cv
902.853 912.032 898.723 912.491 894.591 912.491 cv
893.672 912.491 892.296 911.573 892.296 910.196 cv
892.296 908.818 893.214 907.901 894.591 907.901 cv
898.721 907.901 902.394 907.442 906.066 906.983 cv
913.41 906.064 920.295 905.606 927.18 906.983 cv
934.065 908.818 li
941.867 910.654 949.671 912.491 951.047 912.95 cv
951.966 912.95 li
956.096 913.869 963.441 914.786 964.359 920.754 cv
964.817 922.589 963.9 924.425 962.981 926.261 cv
960.228 929.934 954.261 931.31 950.589 931.31 cv
947.376 931.769 941.409 931.31 934.065 931.31 cv
926.261 930.852 917.081 930.852 909.737 930.852 cv
903.311 931.31 899.181 932.229 897.804 933.146 cv
899.181 934.063 904.23 934.523 912.032 934.063 cv
917.081 933.604 921.671 934.063 925.802 934.523 cv
929.016 934.982 932.229 934.982 935.901 934.982 cv
943.704 934.982 949.211 935.441 951.047 940.49 cv
952.884 945.538 947.376 948.294 945.081 949.67 cv
940.95 951.965 931.77 953.343 925.802 953.801 cv
918.917 954.26 904.23 955.179 892.755 957.474 cv
884.034 958.85 880.361 960.228 875.313 962.522 cv
871.641 963.898 867.51 965.734 859.706 967.571 cv
853.281 969.866 845.478 970.325 835.38 970.325 cv
835.38 970.325 li
cp
f
856.035 895.05 mo
834.002 895.05 811.052 889.082 786.726 883.115 cv
772.956 879.443 758.268 875.771 743.58 873.477 cv
742.202 873.477 741.285 872.099 741.744 870.723 cv
741.744 869.345 743.121 868.428 744.498 868.886 cv
759.645 871.64 774.333 875.313 788.103 878.983 cv
816.103 885.868 842.265 892.754 866.593 890 cv
867.969 890 868.888 890.919 868.888 892.295 cv
868.888 893.672 867.969 894.59 866.593 894.59 cv
863.379 895.05 859.708 895.05 856.035 895.05 cv
cp
f
981.343 902.394 mo
980.883 902.394 979.965 902.394 979.506 902.394 cv
975.375 902.394 971.704 901.935 968.49 901.475 cv
963.9 901.016 960.229 900.558 957.015 901.016 cv
955.639 901.016 954.72 900.099 954.72 898.721 cv
954.72 897.345 955.639 896.426 957.015 896.426 cv
960.688 895.968 964.359 896.426 969.409 896.885 cv
972.621 897.345 975.833 897.345 979.965 897.804 cv
987.309 898.263 992.359 895.968 992.817 894.59 cv
992.817 894.131 992.359 892.755 988.228 890.46 cv
985.474 888.624 982.26 888.165 978.589 887.246 cv
976.294 886.787 973.999 886.329 971.244 885.41 cv
968.49 884.492 965.736 883.575 962.982 882.656 cv
958.393 881.28 954.261 879.902 949.671 878.985 cv
948.294 878.524 947.835 877.607 947.835 876.229 cv
948.294 874.854 949.212 874.395 950.589 874.395 cv
955.179 875.313 959.769 876.69 964.359 878.066 cv
967.114 878.985 969.868 879.902 972.621 880.361 cv
975.375 881.28 977.67 881.738 979.506 882.197 cv
983.638 883.115 987.309 883.575 990.522 885.87 cv
996.03 889.082 998.325 891.836 997.407 895.05 cv
995.571 900.558 988.228 902.394 981.343 902.394 cv
cp
f
1018.52 907.901 mo
1015.77 907.901 1013.47 907.442 1010.72 907.442 cv
1008.42 907.442 li
1001.08 906.983 986.85 902.394 986.392 902.394 cv
985.014 901.934 984.555 900.558 985.014 899.639 cv
985.473 898.263 986.85 897.804 987.768 898.263 cv
987.768 898.263 1002 902.394 1008.88 903.312 cv
1011.18 903.312 li
1016.23 903.77 1024.49 904.688 1025.41 901.475 cv
1026.32 898.263 1018.98 895.509 1012.09 893.214 cv
1007.5 891.836 1004.75 890 1002 888.624 cv
999.702 887.246 996.949 885.868 993.735 884.492 cv
990.063 883.115 986.392 881.738 982.26 879.902 cv
977.211 877.607 972.163 875.313 966.654 873.477 cv
959.769 871.181 948.294 873.477 940.033 875.313 cv
938.196 875.771 936.36 876.229 934.984 876.229 cv
934.065 876.229 932.229 876.69 930.394 877.607 cv
923.509 879.443 912.493 882.656 898.723 883.575 cv
897.345 883.575 896.428 882.656 896.428 881.28 cv
896.428 879.902 897.345 878.985 898.723 878.985 cv
912.034 878.066 923.049 875.313 929.475 873.477 cv
931.77 873.018 933.147 872.559 934.523 872.1 cv
935.901 871.64 937.738 871.64 939.574 871.181 cv
948.754 869.345 960.688 866.591 968.49 869.345 cv
973.999 871.181 979.048 873.477 984.555 875.771 cv
988.687 877.607 992.359 878.985 995.571 880.361 cv
999.702 881.738 1002 883.115 1004.75 884.951 cv
1007.5 886.329 1009.8 888.165 1013.93 889.541 cv
1021.73 892.295 1032.75 895.509 1030.46 903.312 cv
1028.62 906.525 1024.03 907.901 1018.52 907.901 cv
cp
f
2264.25 779.381 mo
2263.33 779.381 2261.95 778.464 2261.95 777.545 cv
2261.03 772.496 2260.58 767.447 2260.12 763.316 cv
2257.82 744.498 2255.98 731.645 2250.02 714.663 cv
2249.56 712.826 2248.64 710.99 2248.18 709.155 cv
2241.76 690.335 2233.04 664.172 2196.31 651.32 cv
2188.05 648.566 2180.71 646.73 2172.91 644.895 cv
2142.61 637.091 2118.29 631.125 2095.33 568.7 cv
2094.88 567.324 2095.33 566.405 2096.71 565.946 cv
2098.09 565.487 2099.01 565.946 2099.47 567.324 cv
2121.5 627.452 2143.53 632.96 2173.82 640.305 cv
2181.17 642.14 2188.97 643.976 2197.23 647.19 cv
2236.25 660.96 2245.43 688.04 2251.85 707.777 cv
2252.31 709.614 2253.23 711.45 2253.69 713.285 cv
2259.66 730.728 2261.49 743.58 2263.79 762.857 cv
2264.25 767.447 2265.17 772.038 2265.62 777.086 cv
2266.54 778.005 2265.62 779.381 2264.25 779.381 cv
2264.25 779.381 li
cp
.356863 .152941 .0784314 rgb
f
2288.57 782.135 mo
2288.12 782.135 2288.12 782.135 2287.66 782.135 cv
2274.34 777.086 2275.26 761.021 2276.18 748.629 cv
2276.18 746.792 2276.64 744.956 2276.64 743.12 cv
2276.64 740.825 2277.1 738.071 2277.1 735.317 cv
2278.48 719.711 2280.77 696.302 2267.46 672.435 cv
2260.58 660.041 2252.31 649.944 2243.13 638.927 cv
2230.74 623.78 2216.05 606.797 2202.74 579.716 cv
2194.02 562.275 2189.43 546.669 2184.38 529.685 cv
2179.33 511.785 2173.37 492.047 2161.89 466.344 cv
2148.58 437.426 2126.09 416.313 2099.47 408.969 cv
2071.93 401.165 2040.25 408.05 2008.58 429.165 cv
2007.67 430.083 2006.29 429.624 2005.37 428.705 cv
2004.45 427.788 2004.91 426.41 2005.83 425.492 cv
2038.88 403.46 2071.47 396.116 2100.38 404.379 cv
2127.92 412.181 2151.79 434.214 2165.56 464.507 cv
2177.5 490.211 2183.46 510.407 2188.51 528.309 cv
2193.56 545.75 2198.15 560.438 2206.41 577.421 cv
2219.72 604.044 2233.49 621.026 2246.35 635.715 cv
2255.53 646.73 2264.25 657.288 2271.13 670.14 cv
2284.9 695.385 2282.61 720.63 2281.23 735.776 cv
2280.77 738.53 2280.77 741.285 2280.77 743.12 cv
2280.77 744.956 2280.77 746.792 2280.31 748.629 cv
2279.39 761.021 2278.48 773.874 2289.03 777.545 cv
2290.41 778.005 2290.87 779.381 2290.41 780.3 cv
2290.41 781.676 2289.49 782.135 2288.57 782.135 cv
cp
f
605.88 684.827 mo
605.421 684.827 605.421 684.827 604.962 684.827 cv
574.668 674.27 587.52 632.96 599.913 593.027 cv
601.29 587.979 603.126 582.47 604.503 577.421 cv
611.388 554.471 614.142 537.489 616.896 522.8 cv
619.191 509.49 621.486 496.637 626.076 481.95 cv
633.879 457.164 651.78 434.214 674.73 439.262 cv
676.107 439.721 676.566 440.64 676.566 442.016 cv
676.107 443.394 675.188 443.853 673.813 443.853 cv
650.863 438.804 635.715 466.344 630.666 483.326 cv
626.076 497.555 623.781 510.407 621.486 523.719 cv
618.732 538.865 615.519 555.849 609.093 578.799 cv
607.716 583.848 605.88 589.355 604.503 594.403 cv
593.028 632.042 581.094 671.516 606.798 680.237 cv
608.175 680.696 608.634 682.074 608.175 682.991 cv
607.716 684.369 606.798 684.827 605.88 684.827 cv
cp
.184314 .207843 .254902 rgb
f
617.355 673.811 mo
616.896 673.811 616.896 673.811 616.437 673.353 cv
615.519 672.894 615.06 671.516 615.519 670.14 cv
617.813 666.009 623.781 663.255 632.502 659.583 cv
648.567 653.156 670.599 644.435 676.107 620.109 cv
681.615 598.076 681.615 582.93 682.074 559.98 cv
682.532 543.455 682.532 522.8 685.288 493.425 cv
685.288 492.047 686.664 491.13 687.583 491.13 cv
688.958 491.13 689.877 492.506 689.877 493.425 cv
687.583 522.8 687.123 543.455 686.664 559.52 cv
686.205 582.011 686.205 598.076 680.698 620.567 cv
674.271 647.19 649.944 656.829 634.338 663.255 cv
627.453 666.009 621.027 668.762 619.65 671.516 cv
618.732 673.353 617.813 673.811 617.355 673.811 cv
cp
f
470.475 629.748 mo
469.557 629.748 468.639 628.83 468.18 627.911 cv
465.426 615.06 469.098 607.256 471.852 601.749 cv
473.688 598.535 474.606 595.781 474.147 592.569 cv
473.688 589.815 472.77 587.52 471.393 584.765 cv
468.18 577.88 463.131 567.782 461.295 542.996 cv
459 515.456 467.262 486.08 472.77 470.934 cv
473.688 468.18 474.606 465.425 475.523 462.212 cv
482.409 441.558 490.212 418.607 505.818 405.296 cv
524.178 390.15 582.93 387.855 633.879 406.674 cv
642.141 409.886 681.615 430.083 680.237 444.771 cv
680.237 446.147 678.861 447.066 677.942 447.066 cv
676.566 447.066 675.647 445.688 675.647 444.771 cv
676.566 434.672 643.518 415.395 632.043 411.264 cv
582.471 392.904 526.014 394.74 508.572 408.969 cv
493.884 420.902 486.081 443.853 479.655 463.59 cv
478.737 466.344 477.819 469.556 476.901 472.31 cv
471.852 486.999 463.59 515.915 465.885 542.538 cv
467.721 566.405 472.312 575.585 475.523 582.47 cv
476.901 585.684 478.278 588.438 478.737 591.65 cv
479.655 596.24 477.819 599.454 475.983 603.585 cv
473.229 609.092 470.475 615.519 472.77 626.535 cv
473.229 627.911 472.312 628.83 470.934 629.289 cv
470.475 629.748 470.475 629.748 470.475 629.748 cv
cp
f
537.03 1122.71 mo
535.653 1122.71 534.735 1121.79 534.735 1120.42 cv
534.735 1119.04 535.653 1118.12 537.03 1118.12 cv
571.455 1117.21 618.273 1091.5 649.026 1066.71 cv
649.944 1065.8 651.321 1066.26 652.239 1067.17 cv
653.158 1068.09 652.697 1069.47 651.78 1070.39 cv
620.109 1095.63 572.373 1121.34 537.03 1122.71 cv
537.03 1122.71 li
cp
f
2348.7 1636.79 mo
2346.87 1636.79 2345.03 1636.33 2343.2 1634.96 cv
2340.9 1633.58 2339.52 1631.29 2339.06 1628.53 cv
2273.89 1221.4 li
2273.89 1220.02 2274.34 1219.1 2275.72 1218.64 cv
2277.1 1218.64 2278.02 1219.1 2278.48 1220.48 cv
2343.65 1627.61 li
2343.65 1628.99 2344.57 1630.37 2345.49 1630.83 cv
2346.41 1631.75 2347.79 1631.75 2349.16 1631.75 cv
2351.92 1631.29 2353.75 1628.53 2353.29 1625.78 cv
2287.2 1214.05 li
2287.2 1212.68 2287.66 1211.76 2289.03 1211.3 cv
2290.41 1211.3 2291.33 1211.76 2291.79 1213.14 cv
2291.79 1214.05 li
2357.88 1624.86 li
2358.8 1629.91 2355.13 1634.96 2350.08 1635.88 cv
2349.62 1636.33 2349.16 1636.79 2348.7 1636.79 cv
cp
.356863 .152941 .0784314 rgb
f
2279.85 1564.73 mo
2278.02 1564.73 2276.18 1564.27 2274.34 1562.89 cv
2272.05 1561.52 2270.67 1558.76 2270.21 1556.01 cv
2221.56 1240.68 li
2221.56 1239.3 2222.02 1238.38 2223.4 1237.92 cv
2224.77 1237.92 2225.69 1238.38 2226.15 1239.76 cv
2274.8 1555.09 li
2275.26 1556.47 2275.72 1557.84 2277.1 1558.76 cv
2278.02 1559.68 2279.39 1559.68 2280.31 1559.68 cv
2283.07 1559.22 2284.9 1556.47 2284.44 1553.25 cv
2235.79 1236.54 li
2235.79 1235.17 2236.25 1234.25 2237.63 1233.79 cv
2239 1233.79 2239.92 1234.25 2240.38 1235.63 cv
2289.03 1552.34 li
2289.95 1557.84 2286.28 1562.89 2281.23 1563.81 cv
2281.23 1564.73 2280.77 1564.73 2279.85 1564.73 cv
cp
f
1979.21 1480.73 mo
1978.75 1480.73 1978.75 1480.73 1979.21 1480.73 cv
1977.37 1480.73 1976.91 1479.36 1976.91 1477.98 cv
1978.29 1469.26 li
2015.47 1236.54 li
2015.47 1235.17 2016.85 1234.25 2018.22 1234.71 cv
2019.6 1234.71 2020.52 1236.09 2020.06 1237.46 cv
1981.5 1479.36 li
1981.04 1479.81 1980.13 1480.73 1979.21 1480.73 cv
cp
f
1948 1636.79 mo
1947.54 1636.79 1947.08 1636.79 1946.62 1636.79 cv
1941.57 1635.88 1937.9 1630.83 1938.82 1625.78 cv
1953.5 1533.98 li
1953.5 1532.6 1954.88 1531.68 1956.26 1532.14 cv
1957.63 1532.14 1958.55 1533.52 1958.09 1534.44 cv
1957.63 1536.27 li
1943.41 1626.24 li
1942.95 1628.99 1944.78 1631.75 1947.54 1632.2 cv
1948.91 1632.2 1949.83 1632.2 1951.21 1631.29 cv
1952.13 1630.37 1953.04 1629.45 1953.04 1628.07 cv
1953.96 1623.94 li
1953.96 1622.56 1955.34 1621.65 1956.72 1622.1 cv
1958.09 1622.1 1959.01 1623.48 1958.55 1624.86 cv
1957.63 1628.99 li
1957.18 1631.75 1955.8 1634.04 1953.5 1635.42 cv
1951.67 1635.88 1949.83 1636.79 1948 1636.79 cv
cp
f
1979.21 1387.56 mo
1979.21 1387.56 li
1977.37 1387.56 1976.91 1386.18 1976.91 1384.8 cv
2001.24 1234.71 li
2001.24 1233.33 2002.62 1232.42 2003.99 1232.87 cv
2005.37 1232.87 2006.29 1234.25 2005.83 1235.17 cv
1981.5 1385.72 li
1981.5 1387.1 1980.58 1387.56 1979.21 1387.56 cv
cp
f
2016.85 1564.73 mo
2016.39 1564.73 2015.93 1564.73 2015.47 1564.73 cv
2010.42 1563.81 2006.75 1558.76 2007.67 1553.25 cv
2055.86 1240.22 li
2055.86 1238.84 2057.24 1237.92 2058.62 1238.38 cv
2059.99 1238.38 2060.91 1239.76 2060.45 1241.13 cv
2012.26 1554.17 li
2011.8 1557.39 2013.63 1560.14 2016.39 1560.6 cv
2017.76 1560.6 2018.68 1560.6 2019.6 1559.68 cv
2020.98 1558.76 2021.44 1557.39 2021.89 1556.01 cv
2069.63 1244.81 li
2069.63 1243.43 2071.01 1242.51 2072.38 1242.97 cv
2073.76 1242.97 2074.68 1244.35 2074.22 1245.72 cv
2070.55 1269.13 li
2026.03 1556.93 li
2025.57 1559.68 2024.19 1561.98 2021.89 1563.81 cv
2020.52 1564.27 2018.68 1564.73 2016.85 1564.73 cv
cp
f
1094.71 897.804 mo
1130.06 935.441 li
1201.2 712.367 li
1153.01 712.826 li
1094.71 897.804 li
cp
1130.98 941.867 mo
1130.52 941.867 1129.6 941.408 1129.14 940.95 cv
1090.13 899.64 li
1089.67 899.18 1089.21 898.263 1089.67 897.345 cv
1148.88 709.614 li
1149.34 708.695 1150.25 708.236 1151.17 708.236 cv
1204.42 707.319 li
1205.33 707.319 1205.79 707.777 1206.25 708.236 cv
1206.71 708.695 1206.71 709.614 1206.71 710.072 cv
1133.27 940.031 li
1132.81 940.948 1132.35 941.408 1131.43 941.408 cv
1131.43 941.867 1130.98 941.867 1130.98 941.867 cv
cp
.184314 .207843 .254902 rgb
f
1575.29 695.844 mo
1645.51 918.917 li
1679.94 882.197 li
1620.27 695.844 li
1575.29 695.844 li
cp
1644.6 925.344 mo
1644.14 925.344 li
1643.22 925.344 1642.76 924.425 1642.3 923.966 cv
1569.78 694.007 li
1569.78 693.09 1569.78 692.63 1570.24 692.171 cv
1570.7 691.712 1571.16 691.254 1572.08 691.254 cv
1622.11 691.254 li
1622.11 691.254 li
1623.02 691.254 1623.94 691.712 1624.4 692.63 cv
1684.99 882.197 li
1685.45 883.115 1684.99 884.033 1684.53 884.492 cv
1646.43 924.885 li
1645.51 925.344 1645.06 925.344 1644.6 925.344 cv
cp
.356863 .152941 .0784314 rgb
f
1337.99 1037.8 mo
1337.99 1037.8 li
741.744 1036.42 li
740.826 1036.42 739.907 1035.96 739.449 1035.04 cv
738.99 1034.13 739.449 1033.21 739.907 1032.75 cv
796.365 978.588 li
797.282 977.67 798.66 977.67 799.577 978.588 cv
800.496 979.505 800.496 980.883 799.577 981.8 cv
747.252 1032.29 li
1337.53 1033.67 li
1338.9 1033.67 1339.82 1034.58 1339.82 1035.96 cv
1340.28 1036.88 1339.36 1037.8 1337.99 1037.8 cv
cp
.184314 .207843 .254902 rgb
f
1029.54 900.558 mo
1027.7 900.558 li
1026.32 900.558 1025.41 899.64 1025.41 898.263 cv
1025.41 896.885 1026.32 895.968 1027.7 895.968 cv
1084.16 895.968 li
1085.54 895.968 1086.45 896.885 1086.45 898.263 cv
1086.45 899.64 1085.54 900.558 1084.16 900.558 cv
1029.54 900.558 li
cp
f
1157.6 901.935 mo
1157.6 897.345 li
1332.48 897.345 li
1333.85 897.345 1334.77 898.263 1334.77 899.64 cv
1334.77 901.016 1333.85 901.935 1332.48 901.935 cv
1157.6 901.935 li
cp
f
742.663 1055.24 mo
741.285 1055.24 740.368 1054.32 740.368 1052.95 cv
739.449 1033.67 li
739.449 1032.29 740.368 1031.37 741.744 1031.37 cv
743.121 1031.37 744.039 1032.29 744.039 1033.67 cv
744.498 1050.65 li
1337.53 1049.73 li
1337.53 1049.73 li
1338.9 1049.73 1339.82 1050.65 1339.82 1052.03 cv
1339.82 1053.41 1338.9 1054.32 1337.53 1054.32 cv
742.663 1055.24 li
742.663 1055.24 li
cp
f
788.103 1629.91 mo
776.627 1629.91 774.333 1623.94 774.333 1618.89 cv
774.333 1054.32 li
774.333 1052.95 775.251 1052.03 776.627 1052.03 cv
778.005 1052.03 778.922 1052.95 778.922 1054.32 cv
778.922 1618.89 li
778.922 1622.1 779.841 1625.32 788.103 1625.32 cv
795.906 1625.32 797.282 1622.1 797.282 1618.89 cv
797.282 1054.32 li
797.282 1052.95 798.201 1052.03 799.577 1052.03 cv
800.955 1052.03 801.873 1052.95 801.873 1054.32 cv
801.873 1618.89 li
801.873 1623.94 799.577 1629.91 788.103 1629.91 cv
cp
f
1414.18 1015.77 mo
1412.8 1015.77 1411.88 1014.85 1411.88 1013.47 cv
1411.88 1012.09 1412.8 1011.18 1414.18 1011.18 cv
2010.42 1009.8 li
1959.47 961.145 li
1958.55 960.228 1958.55 958.85 1959.47 957.933 cv
1960.39 957.015 1961.77 957.015 1962.68 957.933 cv
2017.76 1010.72 li
2018.22 1011.18 2018.68 1012.55 2018.22 1013.01 cv
2017.76 1013.93 2016.85 1014.39 2015.93 1014.39 cv
1414.18 1015.77 li
1414.18 1015.77 li
cp
.356863 .152941 .0784314 rgb
f
1704.73 879.902 mo
1689.58 879.902 li
1688.2 879.902 1687.28 878.985 1687.28 877.607 cv
1687.28 876.229 1688.2 875.313 1689.58 875.313 cv
1705.18 875.313 li
1706.56 875.313 1707.48 876.229 1707.48 877.607 cv
1707.02 878.985 1706.1 879.902 1704.73 879.902 cv
cp
f
1615.68 879.902 mo
1615.68 879.902 li
1416.01 879.902 li
1414.64 879.902 1413.72 878.985 1413.72 877.607 cv
1413.72 876.229 1414.64 875.313 1416.01 875.313 cv
1616.14 875.313 li
1617.52 875.313 1618.43 876.229 1618.43 877.607 cv
1617.97 878.985 1617.06 879.902 1615.68 879.902 cv
cp
f
2015.01 1033.67 mo
2015.01 1033.67 li
1414.18 1032.75 li
1412.8 1032.75 1411.88 1031.83 1411.88 1030.46 cv
1411.88 1029.08 1412.8 1028.16 1414.18 1028.16 cv
1414.18 1028.16 li
2012.71 1029.08 li
2013.17 1012.09 li
2013.17 1010.72 2014.55 1009.8 2015.47 1009.8 cv
2016.85 1009.8 2017.76 1010.72 2017.76 1012.09 cv
2016.85 1031.37 li
2017.3 1032.75 2016.39 1033.67 2015.01 1033.67 cv
cp
f
1967.27 1653.32 mo
1956.26 1653.32 1953.5 1647.35 1953.5 1642.3 cv
1952.59 1031.83 li
1952.59 1030.46 1953.5 1029.54 1954.88 1029.54 cv
1954.88 1029.54 li
1956.26 1029.54 1957.18 1030.46 1957.18 1031.83 cv
1958.09 1642.3 li
1958.09 1645.51 1959.01 1648.73 1967.27 1648.73 cv
1975.54 1648.73 1976.45 1645.51 1976.45 1642.3 cv
1976.91 1032.29 li
1976.91 1030.91 1977.83 1030 1979.21 1030 cv
1979.21 1030 li
1980.58 1030 1981.5 1030.91 1981.5 1032.29 cv
1981.04 1642.3 li
1981.04 1647.35 1978.75 1653.32 1967.27 1653.32 cv
cp
f
934.065 671.058 mo
1088.75 671.058 li
1097.93 671.058 1105.73 678.86 1105.73 688.04 cv
1105.73 688.04 li
1105.73 691.712 1104.35 694.925 1102.52 698.139 cv
1102.52 698.139 1101.14 705.482 1107.11 712.367 cv
1109.86 715.121 1088.29 705.023 1088.29 705.023 cv
933.606 705.023 li
924.426 705.023 916.623 697.22 916.623 688.04 cv
916.623 688.04 li
917.083 678.401 924.426 671.058 934.065 671.058 cv
cp
1 1 1 rgb
f
934.065 673.353 mo
925.802 673.353 919.377 679.779 919.377 688.04 cv
919.377 696.302 925.802 702.729 934.065 702.729 cv
1088.75 702.729 li
1089.21 702.729 1089.21 702.729 1089.67 702.729 cv
1093.8 704.563 1098.39 706.858 1102.06 708.236 cv
1099.3 702.269 1100.22 697.22 1100.22 697.22 cv
1100.22 696.761 1100.22 696.761 1100.68 696.302 cv
1102.52 694.007 1103.44 690.795 1103.44 687.581 cv
1103.44 679.32 1097.01 672.894 1088.75 672.894 cv
934.065 672.894 li
934.065 673.353 li
cp
1105.27 713.745 mo
1105.27 713.745 li
1105.27 713.745 li
cp
1107.57 715.121 mo
1105.73 715.121 1101.14 713.285 1088.29 707.319 cv
934.065 707.319 li
923.507 707.319 914.788 698.598 914.788 688.04 cv
914.788 677.484 923.507 668.762 934.065 668.762 cv
1088.75 668.762 li
1099.3 668.762 1108.03 677.484 1108.03 688.04 cv
1108.03 691.712 1107.11 695.385 1104.81 698.598 cv
1104.81 699.975 1104.81 705.482 1108.94 710.531 cv
1109.86 711.909 1109.86 713.285 1109.4 713.745 cv
1108.94 714.663 1108.49 715.121 1107.57 715.121 cv
cp
.184314 .207843 .254902 rgb
f
890.001 597.159 mo
973.08 597.159 li
984.555 597.159 994.193 604.502 994.193 613.683 cv
994.193 613.683 li
994.193 622.862 984.555 630.206 973.08 630.206 cv
890.001 630.206 li
887.246 630.206 884.951 629.748 882.656 629.289 cv
882.656 629.289 860.625 637.091 865.215 633.42 cv
871.181 628.37 871.181 621.485 871.181 621.485 cv
869.805 619.19 868.886 616.436 868.886 613.683 cv
868.886 613.683 li
868.888 604.502 878.526 597.159 890.001 597.159 cv
cp
.584314 .898039 .556863 rgb
f
890.001 599.454 mo
879.444 599.454 871.181 605.88 871.181 613.683 cv
871.181 615.978 871.641 618.272 873.018 620.109 cv
873.476 620.567 873.476 621.026 873.476 621.485 cv
873.476 621.945 873.476 626.075 870.264 630.665 cv
873.476 629.748 878.066 628.37 881.739 626.994 cv
882.197 626.994 882.656 626.994 883.116 626.994 cv
885.411 627.452 887.246 627.911 889.541 627.911 cv
972.621 627.911 li
983.178 627.911 991.44 621.485 991.44 613.683 cv
991.44 605.878 983.178 599.454 972.621 599.454 cv
890.001 599.454 li
890.001 599.454 li
cp
865.215 636.174 mo
863.379 636.174 863.379 635.715 862.92 634.796 cv
862.461 633.879 862.002 632.501 864.298 631.125 cv
868.427 627.911 869.346 623.321 869.346 621.485 cv
867.969 618.731 867.051 615.978 867.051 613.224 cv
867.051 602.666 877.609 594.403 890.46 594.403 cv
973.539 594.403 li
986.392 594.403 996.949 602.666 996.949 613.224 cv
996.949 623.78 986.392 632.042 973.539 632.042 cv
890.46 632.042 li
888.165 632.042 885.411 631.583 883.116 631.125 cv
872.1 635.255 867.51 636.174 865.215 636.174 cv
cp
.184314 .207843 .254902 rgb
f
1015.77 544.833 mo
1086.91 544.833 li
1095.63 544.833 1102.52 551.717 1102.52 560.438 cv
1102.52 560.438 li
1102.52 563.651 1101.6 566.405 1099.76 569.16 cv
1099.76 569.16 1099.76 576.045 1103.89 580.635 cv
1108.03 585.225 1086.91 576.045 1086.91 576.045 cv
1015.77 576.045 li
1007.05 576.045 1000.16 569.16 1000.16 560.438 cv
1000.16 560.438 li
1000.16 551.717 1007.05 544.833 1015.77 544.833 cv
cp
1 1 1 rgb
f
1015.77 547.127 mo
1008.42 547.127 1002.46 553.095 1002.46 560.438 cv
1002.46 567.782 1008.42 573.75 1015.77 573.75 cv
1086.91 573.75 li
1087.37 573.75 1087.37 573.75 1087.83 573.75 cv
1091.96 575.585 1096.55 577.421 1099.76 578.34 cv
1097.47 573.75 1097.47 569.16 1097.47 569.16 cv
1097.47 568.7 1097.47 568.241 1097.93 567.782 cv
1099.3 565.487 1100.22 563.192 1100.22 560.438 cv
1100.22 553.095 1094.26 547.127 1086.91 547.127 cv
1015.77 547.127 li
cp
1102.06 582.011 mo
1102.06 582.011 li
1102.06 582.011 li
cp
1103.89 583.848 mo
1101.6 583.848 1097.01 582.47 1086.45 577.88 cv
1015.77 577.88 li
1006.13 577.88 997.866 570.077 997.866 559.98 cv
997.866 550.34 1005.67 542.079 1015.77 542.079 cv
1086.91 542.079 li
1096.55 542.079 1104.81 549.881 1104.81 559.98 cv
1104.81 563.192 1103.89 566.405 1102.06 569.16 cv
1102.06 570.995 1102.98 575.585 1105.73 578.34 cv
1107.57 580.175 1106.65 581.552 1106.19 582.47 cv
1105.73 582.93 1105.27 583.848 1103.89 583.848 cv
cp
.184314 .207843 .254902 rgb
f
1839.67 659.583 mo
1684.99 659.583 li
1675.81 659.583 1668.01 667.385 1668.01 676.565 cv
1668.01 676.565 li
1668.01 680.237 1669.38 683.45 1671.22 686.664 cv
1671.22 686.664 1672.6 694.007 1666.63 700.893 cv
1663.88 703.646 1685.45 693.549 1685.45 693.549 cv
1840.13 693.549 li
1849.31 693.549 1857.11 685.745 1857.11 676.565 cv
1857.11 676.565 li
1856.66 666.926 1849.31 659.583 1839.67 659.583 cv
cp
.584314 .898039 .556863 rgb
f
1684.99 661.877 mo
1676.73 661.877 1670.3 668.304 1670.3 676.565 cv
1670.3 679.779 1671.22 682.532 1673.05 685.286 cv
1673.05 685.745 1673.51 685.745 1673.51 686.204 cv
1673.51 686.664 1674.43 691.712 1671.68 697.22 cv
1675.35 695.844 1679.94 693.549 1684.07 691.712 cv
1684.53 691.712 1684.53 691.712 1684.99 691.712 cv
1839.67 691.712 li
1847.93 691.712 1854.36 685.286 1854.36 677.023 cv
1854.36 668.762 1847.93 662.336 1839.67 662.336 cv
1684.99 662.336 li
1684.99 661.877 li
cp
1666.17 703.188 mo
1665.25 703.188 1664.79 702.729 1664.33 702.27 cv
1663.88 701.351 1663.42 699.975 1664.79 699.056 cv
1669.38 694.007 1669.38 688.5 1668.92 687.123 cv
1666.63 683.91 1665.71 680.237 1665.71 676.565 cv
1665.71 666.009 1674.43 657.288 1684.99 657.288 cv
1839.67 657.288 li
1850.23 657.288 1858.95 666.009 1858.95 676.565 cv
1858.95 687.123 1850.23 695.844 1839.67 695.844 cv
1685.45 695.844 li
1673.05 701.81 1668.46 703.188 1666.17 703.188 cv
cp
.356863 .152941 .0784314 rgb
f
1883.74 585.225 mo
1800.66 585.225 li
1789.18 585.225 1779.54 592.569 1779.54 601.749 cv
1779.54 601.749 li
1779.54 610.929 1789.18 618.272 1800.66 618.272 cv
1883.74 618.272 li
1886.49 618.272 1888.79 617.813 1891.08 617.355 cv
1891.08 617.355 1913.11 625.157 1908.52 621.485 cv
1902.55 616.436 1902.55 609.551 1902.55 609.551 cv
1903.93 607.256 1904.85 604.502 1904.85 601.749 cv
1904.85 601.749 li
1904.85 592.569 1895.21 585.225 1883.74 585.225 cv
cp
1 1 1 rgb
f
1891.08 615.06 mo
1891.54 615.06 1891.54 615.06 1892 615.06 cv
1895.67 616.436 1900.26 617.813 1903.47 618.731 cv
1900.26 614.141 1900.26 609.551 1900.26 609.551 cv
1900.26 609.092 1900.26 608.634 1900.72 608.175 cv
1902.1 606.339 1902.55 604.044 1902.55 601.749 cv
1902.55 593.945 1894.29 587.52 1883.74 587.52 cv
1800.66 587.52 li
1790.1 587.52 1781.84 593.945 1781.84 601.749 cv
1781.84 609.551 1790.1 615.978 1800.66 615.978 cv
1883.74 615.978 li
1886.03 615.978 1888.33 615.519 1890.16 615.06 cv
1890.62 615.06 1890.62 615.06 1891.08 615.06 cv
cp
1907.14 623.321 mo
1907.14 623.321 li
1907.14 623.321 li
cp
1908.52 624.699 mo
1906.23 624.699 1901.64 623.321 1890.62 619.65 cv
1888.33 620.109 1886.03 620.567 1883.28 620.567 cv
1800.2 620.567 li
1787.35 620.567 1776.79 612.305 1776.79 601.749 cv
1776.79 591.191 1787.35 582.93 1800.2 582.93 cv
1883.28 582.93 li
1896.13 582.93 1906.69 591.191 1906.69 601.749 cv
1906.69 604.502 1905.77 607.256 1904.39 610.01 cv
1904.39 611.846 1905.31 615.978 1909.44 619.65 cv
1911.28 621.026 1910.82 622.862 1910.82 623.321 cv
1910.82 624.24 1910.36 624.699 1908.52 624.699 cv
cp
.356863 .152941 .0784314 rgb
f
1757.97 532.898 mo
1686.83 532.898 li
1678.1 532.898 1671.22 539.784 1671.22 548.505 cv
1671.22 548.505 li
1671.22 551.717 1672.14 554.471 1673.97 557.225 cv
1673.97 557.225 1673.97 564.11 1669.84 568.7 cv
1665.71 573.29 1686.83 564.11 1686.83 564.11 cv
1757.97 564.11 li
1766.69 564.11 1773.58 557.225 1773.58 548.505 cv
1773.58 548.505 li
1773.58 540.242 1766.69 532.898 1757.97 532.898 cv
cp
.584314 .898039 .556863 rgb
f
1687.28 535.194 mo
1679.94 535.194 1673.97 541.16 1673.97 548.505 cv
1673.97 551.259 1674.89 553.554 1676.27 555.849 cv
1676.73 556.308 1676.73 556.766 1676.73 557.225 cv
1676.73 557.685 1676.73 562.275 1674.43 566.405 cv
1677.64 565.487 1682.24 563.651 1686.37 561.815 cv
1686.83 561.815 1686.83 561.815 1687.28 561.815 cv
1757.97 561.815 li
1765.31 561.815 1771.28 555.849 1771.28 548.505 cv
1771.28 541.16 1765.31 535.194 1757.97 535.194 cv
1687.28 535.194 li
cp
1669.84 571.914 mo
1668.46 571.914 1668.01 571.455 1667.55 570.536 cv
1667.09 570.077 1666.63 568.7 1668.01 566.405 cv
1670.76 563.192 1671.22 558.603 1671.68 557.225 cv
1669.84 554.471 1668.92 551.259 1668.92 548.045 cv
1668.92 538.406 1676.73 530.145 1686.83 530.145 cv
1757.97 530.145 li
1767.61 530.145 1775.87 537.947 1775.87 548.045 cv
1775.87 557.685 1768.07 565.946 1757.97 565.946 cv
1687.28 565.946 li
1676.73 570.995 1672.14 571.914 1669.84 571.914 cv
cp
.356863 .152941 .0784314 rgb
f
1844.72 1465.13 mo
1831.87 1465.13 1819.48 1463.29 1812.59 1458.7 cv
1811.67 1457.78 1811.21 1456.41 1812.13 1455.49 cv
1813.05 1454.57 1814.43 1454.11 1815.34 1455.03 cv
1827.28 1463.29 1860.33 1462.37 1878.69 1455.95 cv
1880.06 1455.49 1880.98 1456.41 1881.44 1457.33 cv
1881.9 1458.7 1880.98 1459.62 1880.06 1460.08 cv
1870.42 1463.29 1857.57 1465.13 1844.72 1465.13 cv
cp
f
1664.33 1314.12 mo
1663.88 1314.12 1663.88 1314.12 1663.42 1314.12 cv
1639.09 1305.86 1621.65 1290.71 1613.84 1270.05 cv
1613.38 1268.67 1613.84 1267.76 1615.22 1267.3 cv
1616.6 1266.84 1617.52 1267.3 1617.97 1268.67 cv
1627.61 1293 1648.73 1304.48 1664.79 1309.98 cv
1666.17 1310.44 1666.63 1311.82 1666.17 1312.74 cv
1666.17 1313.66 1665.25 1314.12 1664.33 1314.12 cv
cp
f
2162.35 621.485 mo
2161.89 621.485 2161.43 621.485 2160.97 621.026 cv
2138.94 606.339 2127.01 570.995 2120.58 551.717 cv
2120.12 550.34 2121.04 549.422 2121.96 548.964 cv
2123.33 548.505 2124.25 549.422 2124.71 550.34 cv
2130.68 567.324 2142.61 603.125 2163.27 617.355 cv
2164.19 618.272 2164.64 619.65 2163.73 620.567 cv
2163.73 621.026 2163.27 621.485 2162.35 621.485 cv
cp
f
2093.96 688.958 mo
2090.75 688.958 2087.53 688.5 2084.32 688.04 cv
2082.94 688.04 2082.02 686.664 2082.48 685.286 cv
2082.48 683.91 2083.86 682.991 2085.24 683.45 cv
2110.02 687.581 2125.17 673.811 2139.86 660.5 cv
2150.42 650.861 2160.51 641.681 2173.37 639.845 cv
2174.74 639.845 2175.66 640.305 2176.12 641.681 cv
2176.58 643.059 2175.66 643.976 2174.28 644.435 cv
2162.81 646.271 2153.17 654.992 2143.07 664.172 cv
2129.76 676.106 2115.07 688.958 2093.96 688.958 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.0
%%For: (1) ()
%%Title: (Pol_Jan21_031.eps)
%%CreationDate: 7/15/2017 9:03 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj2Oede<S6>hAc^:,4(?_5>b0"%b0`'*n^BA7%l;2rNUG?8@`9iVDkZh'M`+ChP/+YSf[gR2Mc#9<(nW<Dq/eXL.iKC9;ce
%de[`&QT#p4QPYs,F1P+2%H7<\5;P+ACO8?+9?0r2dVf95hJT5k$+esC<k[&J0'$&_qT[g(ImQs/h#!aNDuH).WV_r:HDe8]*L:L6
%T\Sfhr*IZ$B\[8@o#n5KoG.mdhq[W>DD\;+5NqcR/MoAscg7d;,c@G=rnm(_^#5^;m</>5Xk!@I&7(25[N'TXB`%?$%CV?3oY4OT
%Qn&?\I_Xa'F6;IgoX"9GLER`%G1pWonln"H,kukXqOd\D:nnKt0/)hpEOYPSn6=3V3E+50]3E,l]'Ng?3Ra_C\p?Z4RfG%H]LZH"
%+DA.JIP9V"o/*RWjmk>0-i$9bRJ).mg;5?WNp"ef29d^4_K0`a\GUsJ6pWWZ)t@MF5AJ$,$b>GO?O]&2:Q(e#IdMWlGIh:PKFGb!
%&,,kmT_#`tlOiu(RjU.*]2]=*"E$=e\aK&)-_TRNWu_Lpk9T7'Bt!;Tm)MH<e\YrPqi*3-B)q31C6G-2coc!TiM@0'Q;]IGgWWfd
%<mY-1[ZUPIN1;STO`N':gd$dj2\Q!+c@Fk-=?):m/__T*h!*<`C<Zq61NRifZPD/rGA>ZqC)oJ#b'u-2"ZPt4(]L2\9j$WPJn>:E
%cjs3e'D/IC[eDNL>-kfoC1'E?piD-;^I_*rDk3i)nK7[fL?Q)]/DP4>Z:-FrRMbh7s*6&c\VIfi5!<0>[/00Lk&K_%s-YH>>=V!I
%9i1)^3jclVgs4;+qVu"%p6239T+"s$A=3"M/`]-^-JL)@g?H/Ej*=B`0HKgO`%RSSgS/jap2M&j4.<A2f@g`g=WHD%'BJ4QHC+Z-
%ruU48=l(ML5k6<Ei00l!E]mNkUW%#T"9:.k&G0>aT\oC&A*2iSCX!qe^"(.#iQn%OXQJC9ST^=,m+2-4hoYD@?X1`ZHC=9h(i"+)
%RmfYKD?g*U9>!:4DV_.W[q\-@2*Ol.VI^EBZt[k]-12FtE+t*GUJ+V^]i.fW6*o;DFT`"@^;u,HJ$#r)KEF57QBgk;C`KkJ[;LWK
%-.H+]\E>0*0tl>Q@NI+)ZQ+jO199IKHm7Y"p`0_Q6nW(3*`\Oi!2QUJ/<(DY/aQppar=OiCO<Gk1O%49C\:s#8'it^'+fBKhU7,n
%2cfZi0Nchc&OacpKZL!\1X@Y.b;f=sWF$qRj16QjF]rW>AB"f>"ik`s03JS4[Yj.5)40kK+J\&0k3'Q9::qW)"(a8ofCXnCZS'+u
%qg\RW^'2U:1/;0Dpl44ck*DcRS9jS+G.lG>:>El7AmGIpQL=F.^)AWajK&5cX5COtajk?5-a.YBp$:@W2-e/C='?V"^TVKp2-e/C
%N=n'9Zcct0FY1EX*NoAed=9P)U(6eUYr/]qpGDVn]@QLBlTFk8)CIX\Fo%j>>sA3D>A?%m]h]0B(Xgd*1Rc\?j(k1SXoBWu)`]"3
%&tjT#[H?)E(K(\?iNe;)>lU>?hcr)(oD(>s470kV[E`INPu"TIL+8a%[#$'#?K6.H:1`KsG]pcVm#G*Io'(9@ZI,f[H`b[Omaof1
%7pW:8aGO6$?I3ES1o2ioP3+TFct_*\h4N,TfZ@c]8,8OGUVi*>S4lS64X5`QX^\1U(\I0H+R4?VWu!7qionP,eE$aW_!1.7l<!q1
%]lqiogS_I%o`Cd667QDG`CL-R9XXRJlla0,bD!`k=Dt((7"mX4&5!O4GTo,`Ile9P"H=\F@8+KG6P9_P._OqtnHW?/JYiD)PdbD$
%9(_2qWjNlSiSi1e$iB;jl1Z[*A4dqdr(\iR,dmiM5*f7<I_XGAAE6add:.k#4,":b+>OTEW2S&t,4I=+3AGKc%-ql7=\VAAoD)$h
%a$Pt#pYW'=C\8`H"7sq/g]IHIDL:\\WuCKr;N8R5Icol?NtufCIl6LcHC-(MG%sPG?I4+fS"l"_:<+IC;`Uu1X.>p*4nRP-7^Emq
%`4pU_&Y#VPZU3,Q*p2VZC!c!6]$h2)hH.DiXAsVF,J#bS;s.Jo!7c"*XFWA@C+#pm%+'YJD[N!c_#0GuNk`RQKV',Ipj$p'ZoHNu
%8-N?1d4qsh-i>a8QKils:_ku"MtQeCIjcoSY?&mJ'fsTN>Of5F`*U3"e?9,%8oQdCjBIs[,9$Jl\?MW/Q\0>>GCso`ptdC>Zgd$@
%s-j(mg"PoFaHF%Q^b5@KeisOHVL%,6E$3-C!UBmEIQ`TY$Tm2Z3;Va@2#E9'9$dO"BoeFJ1CBUK$PsU2r,RW9**agI''m7KrF8N7
%[H=D.9Sn5j\g\9HDtQ2W?sU@#=Wkiid*9B_Ee+N>>&@dW>Fc1q`*I;K?WLBjG,rfX>R#BI9rh[Flgb5'Q\+8Qima544(+qggj"B(
%FlgWbPr#>@gi:@^qlp(*<U8K_B.egp55"$7^>*W2-\HN/qJp(>BN&:++,=Lob>!DqN:)aPRs_b?^eB\?Qe-/,2jXu01&'kPdod!+
%"Eeuj@@FbO]>*2E,m,OB`fpZ-HaC1HrF`@%]=hr.peg&qa%UqVZMP)8!UG3LgTC:rQ-hEJhKEu+pp_:8/m/)uZ;:b"X(KaZeJhIg
%fqd>=i;[O-NEc@,j1N+DX>5oC?AJ30C;(&4S+,V*BYPi>R"*\n`!05V)`+n0%%st[9#'e<f)BEnRR&`f&3Kp7N<,Ce^=?8jg[hTO
%?i8&@_2"<BoLH$/&f"5tb+ijhF6lt[rJI5,a&:`3O&DE7LEg_O=pCBNmbY1p14_1Br\-A*RDAT)"u-%#j#4npX4HWSAIAjirOuk0
%/)@G+m"U?RH>]?Y\RK5[luO28GA-@!S8":!*$miS_thNtYT;qL;j<P5[@N:tZ;WHEA*q(%AJ%sU2^k`4m)(52;_X#sK:uW;n\&8<
%80qS.KoE]+]PXWt^JjHh2M,6N@/e^!E>"i#X!A1X4!=%)2KV%ES-6Xg6s;\*V>KZ8O5IO+BpI"efn*[:jYI74)mAh;1-dY`@EhJM
%1?LmIJ'F[HeQ/`bdKtO*AOo>Jp,]'%0tf*1?sI--(tVY"1*#-<psiP4$cdrADq;J3/S/MD)SUH845J'H<i:A'48^l_WA/K^Z5gb!
%G;491c7Id(0fBbQ;rRC2)?6/kl,OQqM%O*_:A'T,_rmptYiEOS\+3pS#3A$3(dEHSj,Yt^g\<:f/=,D9.%2]eJ(unUL;N!8"U-ij
%1OBu`l`6q4ZPh9eK0"Jb02%u:gab<PH,U1XpT)2Urfrt)DcE90;@R3>jhKaurX>HY^Zro@`8mkg/B5L#f.UF=#/*TF;lXupFh\RI
%6`\sjHQlHb_l)HKU^ecidttefS3-IDUjcV[0`T@+re);1N2*QO3kMX#@WFkZ(?IP"1/<:Yq][1<hX^%^K=<Z9glVVnal/72nnQs.
%kUacVs+)[n`f8`51R@8FfBW$F'hJ"egZ*U^)>G(!QcW1,Cq$\aTI.8,R#*ZBUe/RXK9Jt;W;><a-lEjQ!E:oO98;A&i!0&8'Ta1X
%J$5-V0Q2rYYWV?\)Hd1EGIo:`R]U0+g#c?crC6g=m!Xc6&tNqJXA6Q;C^.t\eQT0M,84<Zf,J4i%"bXNj[(TQl__Jel[Saq1Oqem
%?-htM[/X[_)tbc[B!%2P7HT'N$?!]!CmEaOM38$ua`239JT$`rVj/Z?^tcE)&nUpQ]u_foWSE5+PUo'nN2F^mqo<!mA@\"G>)P/<
%7JRD^h=b$:$qB$*e=oo[6S1nG+=9VQgl>R&lW0_.>*N_Qb33"CnLph0WSE53PUo'nNi8Q#U5Y(ZX5&G5PUo'n%X1T^;2.AXCHnFI
%M)@/YUrJ'YnB&C,02jI]F=/F(L53n(Lu5e$Rp<e3]"bJZEEM5t3tAGSF>\pO.nef9;Jqf2D7;/oDjd$9[D+$>m&=75J:ab*S'&.<
%>al#0[aq.<WOXoEf>^sp"X)6m<1?LfX%B^uYr4JjVG_7\eS^:E94iheYIWY#&qsNo'`>!EJ5\A;3ZC(X2TgQ%.2u"7-q,qXQEr=\
%n4B;I1=bk?qVIH*p94;!cu/6STY=Y)Ii_qf8_Qb#J"<7[)L8iBdOoI;264Q5XZ?6qS#LG9G2W*eR4\S4oXu^#\o$4rF#d@OHYIAr
%*\SlVFY+slqR;ccIhq9-rHFAFjDIi"pLQs6nh8mg?MH9A(VY\V,%Q#[bDgci=1Rj4ge=K<CnIpQpY,R^?qa8erpBPeiACHdhD1bP
%C:%2NE[Z,-)*XZV@8(csCsprXlcgiZa'BaF>i::u`)]5hRRelh+\m,;We;_0*U%TT^30\t7cfk40UOe4m:UqmMkiDG5s^cI+%F)7
%JjJ03$q[RGRkF9DU2;pa9(?ZIbLe=8^JjHh2M,6NPN?/R,UY;YECH9N4m=mgkr6le:@l5%Keeqn^#o2D-W05*o=pKOs.+V*AA%NK
%X:pZrf!WJUqI,iaS`Y<t3T%R`"e+S$8&nE&3T"PrGFJ+DlS-mHk<%NUi+Gli\,O$fPNoQ>diNYQ=)^T>L2@iViMHmb>!"q9BDK9_
%fZUhLOA(V3bAc3@\)01mX):/f7II/Cj/nH`??Tu,G%KL#<:;Pr8o`R"X%=XM1CGS$HR#:l)E2dmNK?jZA2a_B/W,W]ZYK$+'*QQK
%;?t#^&S(4([J6NJWX$5V:/G54Fo:CC7+EQ;c8+(/e+hTQIeHQPqrq1&Vt%+NZmU$O]LPer^G88:&q+\W?/,iBq>[KQqRoauJP>T`
%f^jj81o2+[j]bPX2d2\KP((96dZbD:p*,FLh@;$2cT5ik[7OS7EhUdnEaqe)JHs'B?GT,os2rTcqGFN#gCWl_nU.rDZ"2k*Bs;Cl
%GaSbBVLb'a!d0D&0.P0i""u,2_ss(-i+3gOR0HupJX<FS0b(dST<U3^]NccPEcW_pT0I=7lN9]Tb.4),#h&,4cu7Zig+2R=fGCkf
%0:NeK8W`%cJE^VYirR'-?T+&._MiKLCnb8%mJ=5Ql%DW-MqJJWa'U.L[L\Qq0:<YijZ'r1BfqX?oHpI*;NA6N(8`TC=_"WYZPtSs
%j`k!oj!<dAY96K8[kCHo?b.[ArR]h'["%@B>CTC4;DUJ]51VVXL.enNa4YB/?6124K-$?9$*"l"DIQ]s_cJOmUD-+rT&QrCKAi+9
%NR"gE)8:pMSSjhXGF2t@NBY/8&Jhk))&TiRq2KCfak;oXLGfG[RP;.;b:3)0=uB77QKiZmC/#OJJ2n(EPsIhZD[N#IYVL`m`FQPG
%M^]SV=cA?42[@:9/WMR!Cj?r>(h`lfT#NM)g&Sk;E=@%0`u#UQOC]r>EJuX([*q"S\;Kfj*+Ko-R#j;I^W/_-q3aj$DS(CAh!lmX
%^](N=b>Oi^hn'REdI9(njB0KB8]m1Q%Eb7"HTu1EZC!NPrGN%OAo#._lW$CX&Q=]/qAn)NRI2[uotDm5.b>Xn)-\41`^d(7F(*kV
%?KBZ'2g._%rlE#/aj(PLp88]9A`CGg774flW%>N(o'`R*$5pR(dVEDKVcmSJ9HA=\N@[tZ]A9"A1qbh]@dX\o?5k`T,+PlQK76n[
%kFg]mlISU]9QEu!p=p=Eaa"hL=(-D<aD^.l>88P$g2/>7aoor,'RXHmB$AH3Z@FV\p)8uk6>VGtNk1#)?^+CN?"TBs?91BAjqB's
%T)_d%7D\a-<B@lVN'6jqrY<.P2TD/2F&R!plHN&:\M8&WVV^+XS%F,f/q_i,gV(.%=WWmff`'BkS%<[U)4V+73-FD]mbH<_S%<Z>
%GOC>0OEI&J\P0e4N'!@B\%n]\#/o#f)\8;'D6$Z"l1eERa)1S61*0O=pHo_*nlCV%o0J3AY0HTFM&SZ/ILG5PXhGofHI:n$$+,36
%"W964N38?f-bjQ4E)cQ^B8\e'e8"lG>4:W@VU04ipTpG;9!.sG'ZjqaM"fP[k_sKY*N=FMCfCVt9dCNtq/3do>=)Z*g&h%r=8Il(
%4?BNV)gA>j)NZ"1q=`ucVM!fLp$(i@7F[^[T"u4\MX%Ks8TWZuG@jAm7UTl-)!U`Ua*o>eYP?ePcrBb=)u"-IPcU[HFa$`s`u$;F
%Bre@J\*&hM/76Ou*IK*,:)Z'.?t["I-)f:")$?"X^,NLX7KtU-s0(#;B1d)34`:ZK<ie6!<VGl:T1UtQRB:93ft$"N&E_q'A[kF0
%24*FqVXWoNCO``rboi3p49*G?9CHi)<tO9P?b%W\DS%oXV,-h\%G=ruaA._hWDW<"N2!:GFR9Ih=5nP#NM>1,F)G48op']7lshEl
%@.uWQJddP7Ct,:,amD?kS"cu80T=0?VdM4!)homFlg+i;<<c7kCfI#@%,rVYVV\I_)sJPBU0>d4mhpV?GhWR2rD'J=g'BH^8Re\>
%a&/L(Q/d,U_mh5;/Gh,$NrM(0=7ic;?9r2\U8`%C/\5p7,KS>p%?@L:o6Vb(jQsp*?,]30`%AX>B6kjS)aBO1LX2eU_b?d:HFl?J
%57X;YqcuO9_Cm6NpbZ61CDnNdL5VS!r\s1Fe8dRVr%e^(L)k1>icTRZHU53d,g*j%#kU\C3;ICGp-lVPhI>K1Sqaj_C3Fnn`cs;e
%c>>aIR_K;U9DlNfe'75N#+'LZai&,T#)%+b=U2G%[b8D?c6aZ@EWqYQlik23_J\/j6&%aA'-e'k-KiC?Gsmte<)3tg)ePmia$HV.
%leJ?;aD]KlPF*'Pq+"T70G2](4dR<#c2bW$)LbBQ^0t_RmPcYC'.HCg'9O$"S<geSA@=ZJZ^W9tEVkICb)I0lY`"-\":dJAZ[85(
%9+#0"o70.3fl*:<G3*3=@itHTRP?u!hV0mZ0okgT9AYR!qX9OLPN^t1<C0GQ`d?-+/:Z+UY4rU)RGrtJ%bI0"k[R0=AteJYAZN@7
%U[T!UH.BVASCF"L-ia.kbP'hBa-4i,S_cQ5WpULn]P+bQD":r+QJ%>+:nROM1Vr^Hf$D:A?Yd%76.AKLmGM>[r=/c#c:?&!rN"ji
%6?DL`<j4/O#Qm:bh)<Is*nd-E8&FmTSc:3nA&ggj'erBaddulSrn=/Thl,qgSBu<2\W<Aj>kPl(E"@:c1KS:A>eUXE`a>2RK^4gH
%S55/Vk<:o75sJ'@63#;MRi[q8rO1o3qQFE/!q_eU$c)+R[`cHJR]Z`n:D:/S6?[3bntm$C,e!>cg=Z)a6*D(q0QrM_YC$!'*kgIu
%FZ@0.=99'&rWi@u+8kjt]9Qf,Rb`=b>?5X4s1O#6X00&bn\V'_?&b;^B`>cOdj_"UO&.k%hrH`UFagk#ZZ4KpA#TEoPQ:lgULm>A
%Q<KQ&K,fW/h]kh?*6s<KTM#-MdV.-l:j58JO&d=O3Dpt!e1fK2b:"f(F*OCESiN=Shs;E`n2oIF93!fk`e-oihIne&oUceXW[@PD
%=g1kD<R-1hD]@]$KO*c\!l1R7'Aka\]TABS'$]bJ]pB.%#!eC.YELA`*@VdC68ODM:f0T=-PL-'g$'G'KW>K7Kcf!e!r@o^_#qtT
%^Y<N]`^'J#<YA^%qQT+T6\u>[;sHT`2uArn5Q0's\Qu;l4oTL2k^*@VH+.+\g`A2QP7NbEh[BAY"X%ISZnF'Vrj_FAK-jj@^(dqj
%+8Y)!,X1mJo>'H^a12no91t<,!lbBh@0u[+QnBuDjV@\5':;>GXL).I_/n,kO_M'8*;=V;[?JcYS@k6\09(r+_;\;rFno7_f-Vqb
%Mheh>Ea:WIX\QdKr)*R\IU&oY(\UU&7^DnnE.Bk-E=0LQh`2!hA5=AKe(lE`!qZ=_[jd3->q.^X8;t%V:6r6]&n.aU`e?0#JPp(k
%158B[c4^7bX\%i\qj!-0-+f3AKX:Eqr-qkF(s/OZE7%/ge$(12Ns2VOmq/o6I5Mkj08tni^0Ei"ZOV1_dZ;A1>4#Xu;>VH5F2hs'
%jMR%t3Z:<1YPPq0B;2Q7)"3e-F0DTA6(,5<d5tldl&`!rK:iR0qb:PhGf8Tr&@j4R6r_QPkK7p$GVeREFuquKkiEGNm:b;7L6pX)
%\u3)%^InW7O]?9PkdKdTkbuG8$Tn;n]AL6e'k&TQ%9qVRh`U0#-UDXZeaBn6+YtNK@h60<=0(jhUbHW[h6TC;VqZ+^#5e5h=t%B!
%/Mma6m92e5L?kqJl3U<igrL6-]iG9t3EaR6L&7,sCUP^*/],Y%V\K4hU2Q#FjnFA^;*EiR`qeItY3i]4kIS&j^[<J2W^f&AE_3$`
%VQEjtHaHI>2g%(,g$eQn>(3B<j"Kc[FIG=d,;HK2f"k*B6,YRGG)i[MgTh6'FB=T0jJ@9gCUg`m]EVd`Xq>dca`Q'Orp[Ps0g8$@
%/"*.n5D%ZVn5h9P<iu&mUKY@^q`/3I[G5c?M3WCh9l!"aq_)-j$#OL&a99Udg>Q#5+$lfaoQ)s_,il/i$QUSHr/[N!,>aI!]$L+r
%%$;nfm)LJ"b,hfT=s7$UHrf#NpZqJ`05lG;(ODtqObOg7\P(9&1i)JKYYN\m\;,Ubg0_NqS6aJZZ7XTcM%;ZKT&8nbEl?CTpC^^E
%1Y-?d+P6"'>%^.PhEBT>!P&13;Sj+rH.DYoe%)U=7o2Fb(&HlQaWPlp8?3Yf&oHeM&e!GI^Weo+f\Xc)l94mQ)m&JrNuCZe?_u&Y
%N<Y(%IfJWA<NcVcB$JoRS?s'm)[!bY1duHONFo$D-U[[bp27n#E3TmFmJL;YFgLenq<]3hosWGQ[f.8P@=oT0rCTso%m7"k3-&E@
%eQ2Q[DT/fL6!Q@L,@U,:NQ#-!Lb@f3[<`B[`0K>m"#:4(T/98qEn\1cMrroFdJCI.)W?VB'joJ:&UfE.6G]2ZSSg&'H5A7'5'05i
%I[aYoU5`M_#u:F@[Fh`'gi-Op09A4.RuE$C%<8=Pl*ZUF]Spd*cnW&XQd"Rh^";Ul[R$4g[(eP&7)N)P/#:'K-GAIt@lPoDns4Q]
%(e=&G?ruckqSsZ3&;j0irVa03+YC7UB_QtY#5*:d.$i<MYU&-"gKUdPdVKU6]Q-hpMmV1/A:Ec0A[L=J,-;jmg%l6fBuml]hOp2R
%#n35g6VdnVO-o^TU)a^?_>3Thcj@311DR%;Yb(#0nc`4A?F6HGU"r3g'\dUI?!-8;MNq$k)3c#EF+ZU^'#-@l?h4Z15u?p>=*fM=
%^u-4'c!<QVX=fOu3<4HV0Br?C&:\`&pj?k4fWCEsD4Nu#%JuPS'U:gGd^i&+X7h2BF2(5gfK^-lUX\DG_a@X*?a*?IS=Sr9lu@PR
%$qq\1\"RfR?>kt^]be'Qp$NA5RZ26oNg$nqqXHkPSU@r'LQto<)H;KBS=>#]lD:+WTm5<9G9B:TPc53p_P%clNh"quNaJnsPC2(U
%)%meYkh1;X^U467R>0n6fGQaEQD5g6'"PF+r@E"!Gq6d;=-#AcIbYF5[=0>Tf&r9G/E+5eR$-r<&3#,t;M9r@482<jL.>cP?<+/d
%hFL_0qsGlqA:LC*PNm<&q_4%qn4_2!L,7uL8FLLDjW050^,prgk<QfhRrT*MdOlMc&&V(%8:k.aT]UXbbAia6QU$Rs,Sp$oL`A;1
%+Eg..Ia`,P%XYA0A>`cT*m;L:iH4[2.";/"l_qT$qXo.Od5\lukM@>Emh"^o!]"NO9=f8lC@*64bh2t/#Q&Yb4mmCoJCM-*CSb%7
%`u8bN,U(B'BGRA!$kU,*3ne6g[rMeKHl8YK/aB:cC\S1LN!P(`qmT?>B8%RdmFLfI6'b$Z<p#5;%DQu84kG0#g=*t6])`3r<YF4Z
%LaC=N%Ds5@*&&;Zm!3KKDQdBFb-@<TU:hL00"S*4M*Ub<IG<:AWuBKWfiQQbDl4"eQ1_D%cXC&3DKf'pM\&URe@_JIpT/t?&)BV<
%S#ePi9i:CLp.SJ)$)aGaUO$s:VGIe`UY[4#Q!Ja=:mY=F>7e[Y0'_7aXM`T%K'cn"5=M*K6tR]3X1>!t\Pe3QJBeFH_u!1.I(CIi
%PCj\lh<T0u2]4JT9ANQlfl2TBc4L,%j7rHsU8o2SCF@A8&c/3\ogmUY>rX2*Cn[(?91Q`I-.Sj?1VFmn6*>D=NAt<+W_92=Ui#QD
%cZ0U;kSi\M;AYUVe4$34/Wa1*QC=G3ZpT0]PBCiulMN:n\qbH=D0q,pQ4ol)/uCna.6J4c[#s2>lDSC'90<-_"O_1a?*F1=5[MQ-
%Q"KbW>,G'.>!6G9NI^R)8j(fFd%NL,"99sSTEuG!6Fi%m?+Al1&hnNnniOZ)(\B#2n'u_=$Pdc!Ua@FN&(>J_(1!Sf0C)U%[+^l>
%JQZ"u>NN/>S]'d;9BS`'i5kA/0A=4K23C]l)1)%?E*_$TWG42U6&Ck;kT-iP6g*N&L@NZ2ZWF*V09L^h;nI,+3Zi;^m+:VH76G8m
%gT<)Z)lJaOg*0fX6".0-[-?C51H=oe7(]rF]FQc/]9gkU3g/cB?8>\i<&jYs4tJD7Z$Yc"ocIFl/bBBraMTlLI5*p?N]5>0)(,7\
%C)>;YcT()Pd&hB7\EC*;Yc]@kr.&2rQ$Q,7&VoajgefCG0Bl(9n)@K4'D9[se\c^Ag6IRA%eo0n[/JdTg<UNt)0kZa$\TM3D?c*:
%h2_BWb!j5m4/pk#pL5M<qteQL<&ntb[nC"_8gA%=c*"LrZ*!0246q5^_omIsh:UW,$/IM1]Y:%SRec4,.$q&%p0H)R*+i;N-TGJ@
%k!de>,KV-]9&o)gL036;eN44<eM*,H>n$TX^$K:B`JOb9]=#D*qJOY?%PmqAZQD-kofd0(<[[Wcr7[jm#QX4Wb(khjLC4Y*p>.)A
%]oc4@Q]/SBnCr\YX/#-4cYlkEq"<b/*aEATKO#*L[Dk+h?KQ8%dZ2l!"WqjaFus0Vfn34tP+:D9E^V67jYH#1@BS\;e"E,pb(Q,=
%b[Ej\npB?(Juj$B(CuGSekqO(3MQAK![fOF4@N>cQQ#X3X.O0kK[7&p3KcRN_TS$nT(o^*Y1Aj+jV"pWQ_TD4!La.=Y1LNUPos/g
%(nI;"qsqFmW8o.Y3Id"Q[Vij#M?RoT9C22fK?9P3I"^fLXh&Wp0<!IHop]U(nt[skLdN02aH]N&I>O*n[uXHP/$Z38K%s=4WW%gH
%9D4g$mfb(1,._IG-jH,KfWsE%]a^"Ye:Kn@N%DN=ei^RSYK;T!iNS6aJh%O,?,X7YoFYf5AoCb.B1SWM(/`4CSm!C9P^#pLjdIIR
%<PL,$aD-jN1u**XLY?W'>F!Z4WtCSP\E)W5@<J'W#.Un1lD!sTitYI+#H.O?;:D^;8SS'rQTG,le^sqO;&b[F]E5CF/<a\)Z'(JN
%f1-CmOOlJ^=ZgHta>.88Ysn6^Nr7b"s"fI5oAW?0OY<*PbX;QNnN14W0.D8fk-61#a^Au9:_,)i&KGR:di(gSr7UA*`MuV@/ts9(
%$bgSJW-u3UJ.a7*)8b/rhT3RNHF0hT2W).0hQo\Mgh^!Ak"u(&\_.eGajkRnE^OE6O@dgNLfZBt@?*`0Bn*QJ&!B5Z.sMtp_MN"c
%ASNuqlqmQuZ'23^bTQ'Qhb50XC7DPMBa/;4X%@prMf^73Y&^%SUInFmG$GCZ.o.eMgC)/l0=1lC!!hZt"V,alLPt?eao;b!jaR48
%QteL*Hf2UHN36+iQS+ihoFXBM.iaV[&C^`WE;o7kmj?T$La_J[s6qqf9L\5e\XtN.9E0to]8Xm[,X5V:6h'Ak$G"O>PGq6K+AkNr
%mOp_f11W7_39,]ca*4b\ID>"W\nm")MYqO^CsQP?>Q0[kS%Pa>D..E,fq1C20i6rZVSU-Rib[scajhUchI6_b4':OKffI:Ca@F>b
%NqnrDkc#Bm=#W$BX$kfjQ*4Pb0q[jgs7gj'm?7d5rk#^8j8Mf&A\#/(3*eLXhUsI;R@AW/>4W-X5O@"JfBdhlbHKNiDO\rf[QZk,
%?LIG9:3fRkG%ZJBhUAiLl!*C_:A\OHnOqigo$UdT]A.h.cdO_oMd(Bd@B[r4b/s6V>K]ZOYeO@go!D:E'HWd7Rqo)$SgJPOjd?;8
%_g8NYmIQ52+[9%E['mQ!gYV2TVtRfQ\Rb^0G3)s,_-<A*FKB=#%3=gHa#eJ$]__E&Gd(@r1O@V_^P1"W95!A4b7!,mj)JdNVI,p#
%Y9).LN3DeRie,\LkI8`/IC]>piHXIk[sI=e&1NQc]jIdqXmaG+cQ9`a"4<jTX'\W9[-6-?n"l$/`grC-qsBI(If<YP0&iF/mF*oK
%\(Sfe[>OWlG4j?I>[/c()##,U]U\lqG^8tulgef;J+WBXk.T6_9#X$4YM/$Ej/l6?[F"&aVc3KQlU(!^Ap'q6oB\cWoCu8!\@$hd
%3rjN8]XW6%cntIUS'T9sB&u>=nWW@ZH)L2s8^28;]>mCG;qV_CcPAo*A>QZdI7'BC*X'bm6`Vih<p+nbA?l)D2Er"Ze=GEMK]2m\
%bjt&=d_3,*F.S)41J8Z/m<_X"e^g)-95ggP(\FJLT6]4ibo$TIWVu$%[cO:_epc-PWh-A`4gag<5i5PM2"CCuG%of?\mN2Cpd5;8
%fQcn>8)Z'WNHTDf_rO$'5:nOf?V>=h?HE,HF),.EB_m((K.-McpA!n$[5kqmm,X!Akj=S1`Tjq!?[+N)("7Ch.onV=oig%-QLHn@
%Js^tlLL,PRD:Y8CdNPBTm*o[FrPAJ6.3=_f4Y@c$^\GP*q[`[.Z&`5+>'aL9Hs/WlXn7L_IoNk7#J'pK-p"!XhkQO<+4f:sIFaI`
%,`+HKX^BB5dG0&Ao/tg8pT;m6r`YRa9&oaY+$[HJpf?eq7]'nN%`RHe/*=IgnoCXLqV#3,If#(JagGk(Rs+;KguFZcpLOo*C!`'B
%%oFW3(IQS,MiXM&B?R-_=OB%/"o?i^<g*VK[?"M7M[-r-`IlEAs#`1EFu+^GE;/74m\&qI1@9F^<ZFM-J'SMFZhN2b=&84s%r4\h
%d\B^el-*kXmZYV',n_F73k!UtLRWm0DCPUn%$l<=-uF?QHmJsWY.FMf)_[(1?WOVYX2g^4-=.ZlbH'15H^:Hpp0iBGDEiCc%rV-M
%SpXXcIW4bt^`mG1>">eq>!JJ_BWbE0&2o8d]^W@PI_CC4.eIMZ\)+iGjEZe&c'JMl=kr5LN`U#PRa%Q_s)D+iG]2Vf%+esmE5+\$
%^%W(+[f-!Ck(h3#errlTdgUO`Zh8"FG?A\rpV1U3k%db)bAr-n#LDes_05-Tq9?a1?X@e\]q];-*c#P`,)in\k#sG2npPlD*Gp2]
%>H=9B^E:b:N)KDHR(iUj_%t/8-P))]p%G.k^K:DU&qpiiBCGIiU%mXGIZpX#8G'.(iUVP@IqNoiqgh;;O@T%<a2J9j;CZ+Y>X!O[
%kEGuj!Se*>[B--SV]cA>_c]V',[PsgC3@4t2KquC6AU$^Q<=(@+-3$XYml.cgn.egY1@?kWW;Gs\f?r@]Qg#$0<J@fq'e[Pnu+#7
%+)EUVXOK2:!qtqibc$R!XS0_?IM6CToqD1bHSO8WUOQ9FZkoH?PeT-65Omsh];O0@0.5Mm#qcKY]VN.8lHL-O-`c3qhrrZZDjOf<
%?Opf-2YjQ0G+&1igS8-59!Sgco/*2TQ<YPY,mWFD)Pt8)'$H?mfK?4#e8jW=YW<[k:;_uu89mc(q/BnP[].Xk/tN9N%q8*^qY[F!
%98jm_L52;tpakt3AoD==HG+bss8#hk@T.ILZ5b'/ku@ck&u?Zk]F7=+;N.;@mFDI<H\K]]fEhjYZl/_2oakK;<7V$/dh#M.N6$J<
%T9<lTHn]\X&JCOG6dsCmfbT<.rX.U^:Qp9;RSi-c)/Xc2Z^$1oVO-n=bL;EgQc(m/,K*+SC31MS=!j"3eEq9EcpJq@0<#8Q1"+6:
%^<6M+I%$K=j3arKD^(.]C!p39d>&n,.L@!1=@Su*YCR4IUoL*HD<)1.5^,,\@B@4j.LDR%;_LSO+29)snRV<2&L3LJAC&1&4SqKm
%-iCq+!>#PfEVGAlq\=tZDh_/C?EmYg4$IpU#3Up<JGpr<]QqmU0+2bhe#^ls+-Nm<c.WJ^V>k:BWI3>[GdP,^mG<-$p?(3&:q,Qd
%8D"ac94?2,9(o#ofPcj@%;FqE$0P$-jNtPAYof'%q!d<7GKX.eYZ3:oB7Fa'Q]MF90tRrQNSE1:S@/:MYuuDCm(8[UB&t]pmPX`G
%(\`7qNO?f2o<[\Zp%#CIdgged]n`k>->2!+GjrDVZb!HcQAr2])CaI'RgSI4%;Wf^E>C(.pPR7oc+VP;kL%mi!u.m#T/VW\hS+RN
%Xk*2lk%q`C'6KI5\7Mk*.fWJ(>`6J<Y/SA/"e-L*COskQkOn#r7HsSIGCR?8qiN:JmJEn?`XVn7a,@X-Off<kPOt/M63V>V&V!m;
%.@7c^4^>+;Zf`-c)`&jPqE>OFQD\(1B<U%+lLM45Ub(="qWE)O&@<ACFu^W;UF:*NZuhI\pe9!&b'<cJ%(Mi5X/D$9YKkak5$:_Z
%Pt"cr<B2;h09fsb)8[`2&%g/5$YWT$*hj'IP4fWM-<;nEkICOkP'bCX]?fe^4C\%-m2I=:lCA)3<XGSej7:g>Vd=*9]lQkRqjO\P
%lfRp!\?G<_r&!?L-q[\O-iWtBFSu"*\eZ9N9DZQkRUej1B>rZmW[EMQQ_jRlU\N"]J,0$+??r[+s/OCi%6#P`V7AhQ5IsU$CNJUf
%mP7*"^@>))!rD@uMQ^@S^F>Kj<l5.sc+!+Vc<:0\=5/%@e;c]V_;L"Gi=((>HMZmO_W.Q[LPI%$I4il)(1+)4D*KAbJ+kp7h??;Y
%^9!jh:[Z.3U4@g':i4]>,$".G#lbIV7GnjiRJj^pB!nLJ&"0q5GkLjb)uk7E_h#/,pu;6XE\UAYU^,d+m]T^,dG@"Mkf^0uGe=R"
%#u>11H2tfDjp-u^cVD*#hJ)EnM--5/Mbdh&FOq#Wib3W-on,RTW2<el]8O`.h/C8bfD^,c@A0ih5:mh]SEK]=<Y'pG&5T?n>K<N&
%7RUMm68hT!QB@/d<"SV0:=aO!Ge\?2#5aamEFL5%itDuGq;H4>Z!=Ruk`;@Ms8;*YO;XbnM/g!;CqR&rGfhGRhE82)qk_/928?fn
%o%R<CZOZ?6jlWS#-5$XIgYZ5Cdep_rjUe7!K)*mRb?(@DX&c]9HD8@BgF!an^V8.KGm^sF1.PZ>.m&1>"/1(F]Cu#^I@O,B1%g*j
%lp'odGF'-&I]k=E5<h23??fOH%OL5GFRd$h`1`mDQfd/Zc[##55$)$t=`W\P(#$P9Ml!)[Zc+hWI;d<ALGlj<iaDY$4MUKb^3)]0
%n(AduLKa:jl1gp)!:ecJCV*r\QAZj:._GA/"'1YDAtI5:O`^9a3o0UuDi+d(bMYlDIt%2dZceoPf.ZR[c$s&uI;t<^fAAd/hB]0D
%WLod+'A[If,.$C[lgj#ol29J@qU=mBg?Fe_bMSplK(oB?X']t0g*['or6:aHUMYaVG4<QHI!N0^4WJ\nNj^k<G`52T@aQk#/+nX?
%9LNsq_1&u"o6ttim>:GMWIDK=eCAPG[2t=o`Ea7ZeYDTr]6q\d2"/>7nnMR)'b<pN=K/q,>YUjf?<^agGua$%9+%/0[)CXW-^Alt
%M0V_J`P$ocn)k#<??`gNA@oId:nI4EBD/t1eX*=TSjd7d*U4SVWE/gsg8OB*Y*a/#hRVJBEpjJe'CAeFG4XCQp\[t#V[R+DOTcr<
%(\ZjH5DmLXPC&orB;&U5,pTD_-lu!LK,Eu8BS#k@/j9,Bjq'qp[!";+Tq+*bjkALBqg[t!&+A?3-O:fD>5Rlm=5gCFH'GK+erEcP
%c-eEVgQ.>T`Iig?G>]^XCa0jB9*M^;D/;e+*<,bJ"I2*a='dJ--JNNc"4=r*C$rco_MiNKhH=jcT]gWI-_C-VV*SLlBHt,S0DP%5
%*p/r5#Ed^5`#q#(g"GrEdl,WB/+oc_J&iJCb1VF(k)0!6md'%35+)p:_5ck:e0qYW:HZnT`_1>JelkWL[$P"DO.-E:'#9fQO$&4/
%?9H5ZE::Fj5CC6#/&$6]WejlN]QdR2<?'e".cWg1RjFcCF*80h@k!RF?Vdd,b=9#Q.=NARCjdfSH^j]VdA,ES\+R/8<%cakG<(C=
%5VsSa,QnoiY0MMH]m-e=05W]IeUG6F-B;`^$cTfkiNBnc,t2c,Da,ZeT<?g&D6(&&f4WBcUAF:F_Tq=-#hD?,`Q$_6Ls@h)/^<s4
%hj9\;hB?``o;I'"d@;=DpGH:JFQ+G'/+MXU2_hK*B_J-A5b/#?9:5]^Sf()X.6K/IB/^_tn+>)PHf`]Dp3q:aD3CE7)k8Gu.j*!&
%.@#$D^LFg5'7iSbs5%LQrcu5jPV5-=4q2ho?Up4R'D5Nbc844gZ_BIlnp5/]Hh81271A0Klcsq:9csqk^E5V`rmlu+nG$DT(uiAD
%'oqsF@dA.!;:;k`Lh3"N,H(#t#)M:4+$"t(rR+@<rq`PcRJ"lY&^=HCdCH_dr_+TAr!1t(SEaW(g0WVg'm<?='#a[sSnjT54e/k#
%3\k?hdo`boc>kZ/.W89-cea&?KJaXJGc$fDkO-?=rcq+/Wq(?+\30Xth+R/mPO,>Gp[Fh^gcoNq98?ESn"-U;m^h9g#1W58p@jA+
%@su8D]JZ"&BCXNtDK3Gk>!K2uXA3K);<sAd>A;FslZW*ip5Cra.bIm+64e0[]=N-'pn!7qL?l80.r.YWkP7dI*Sc/AH-QB#EHe8L
%pjPPB8!K=D8Y3VC8)%<Be,]u:Q=.LLYX6/G+4<VBJ+T;UnVrltP%J/!Xn1IVq0p(!XI/r$EeVRX:UoiJV(q;!3%_5^=2'+;>qTtn
%?hI$\Za46(;`A7LWEAm6Cb`'bmVgkeVqsgfFbj>829`R1(2i;A(">0DI.c]bFCq?mP/;LNhpXJIXtL6g70j?j/X:sBQX>dLjf`%`
%"t7`PEq:B9"SF$B8SA3F]YqaIG4q&?`OjgOnbr/E]D&&oUjQ8tbbqA<I@30j*U,b.(;;of7n2b5i8,:]Rg'`:VI)/%4D9$"m>Le7
%]ADqK%Y5&%%KG7)pYi`rV&,Vn^R'PK06cGNP9.PAPLT;GRj?+RH$eL`kC2"6nZGC=fCS1e_qsR(H20aFOO!(CbV)T@KRUfkC$XmY
%WCmoMXfm4n%mI*9*>ICs:9=?#!D+%5Yu#m<MHbrh[4Q1,*N4EP.Wb:Tj3m[BEHet,Yhe]Uda:J;r[tjs;J"BC.m9oW=.CRH/Qhmh
%]Wi6+1qCdnnc!tT]#l\;q8-E*:"EI!8Yka&E"9TGT.cQ-78@d8+uA:G^/Stc[n3>94BsmN>fnS'ARNRm&pF0NK5+X"+sj!&o[Vb4
%lX:ZR2J^isdRccIWX]:.'W)WA?5N?>>@6cqh]JF9*G_<njh]Brg>(kV47o]4LdSb40@Ik4C-^M%muKA"8+2$m@_8PafA@[Y^TtY6
%fOtE]UCC+``?uqVoAt=BkLK0:A.UmKJc4U*$EklcWTp[!H_@Abqt4iLSlk^Z>^8f_P'?k>Dm$Hmk?(Bo+?R&drT<usOYoOPB$4<o
%(d.'l8h8g!E7-9X[m!%=5h")q\!$Y>/u$Jnlhs0I9C]uVLMfce-n0DF<pAN?ipJof%Qn6=F0U*PpL[hFRV8@H[FTjX:Cm)?p#NLX
%!',-[[HM:S[_6!`IIGIVA7VV1\b?#/.eOg?JqZr!c$#%tPdC=GCuapRKCtZ'o1%e"OU(RQO$[RPnNAB_FhROi>30G#b%1ltok1;8
%EVDY?rt'q?;CY08fi_YZP4'1t<h2VK9WR61cfb79Wu.)]e]C[Ig#D#^ioeoD:35G\PWk^eee&_NY:n4WUQOcmXV)l0Q3cW;Q+C#1
%^V86Y9:ZE6mX&kgHa@m)+6;=/d+@^H=6<;J<W<TujDBYfq]&[ZXbbN]SW=;s2if%\^6c2knkE0\et(>]Jm=&M?#g-U+0?dC3[9U`
%HhuX`-saF>Y/GOLbG-SJQb5pKeLaY9pil/5WAW#eh-Qf'l:7ap_K1,Ec*JD(FZXQ8:G!e=9R.ir/j8L-U:ZWp$Qqs(//IREr;\^=
%dJ9<O+Y-<806uJc\hj+$01m2`S+rd4+0Uc5?P_p:bp$f`nEFE[j*9']Tlo\b^]0^-ipKSak-g_;4^-UEDm$b0-kS@M&-"Cc&,?\2
%[<D=!-de_1dVH&H)q9W!?,s-SG_9;%j-s3g(FZ.f!%JKKKkC;sot*Hgqk&?8C$U@iCm-!k$Do$fa(<&oJnkY0_7-*iHL-<W]`qs<
%/75Z**PGk73CC<e`de#`l]/lt\(#?lBrnG8hr*Cln*qge3f96shlIpfTDIpt=^8##/Ju'3nYaHN_m"7\&A"R'fLc)'[H5!tST=Q[
%^4#CYRc3K>."@1LXkhHbJh@Hb>Z:9=ZtA`srp(KRs8!qV)WPc7b^M<hm?;F&o"W&%s46g<\mm"WMbgp%`IFBL>ViA(`_ENP^0Sin
%m@$$*[SR5)BE'aUn2KO5#=H9*_$SK-_.g$`<Y$s8l/CDZC#2X8J6q8SbhK\]LUhVI=WShWJnDVIpnT#h>F;u7$(gRQ!hA7BhDm5%
%KVaNW@kqtI"]r4X6,GDLJn?d]#\nO"4XY%d*Ai].>eAp?SsOe"?#@o]!GIe3TbF&\YQ,aOgN<k?,q2:-G/6"+6jVOe8Q9(sK>r+P
%@H?:<X)/Y(6Sk[o'Eu\1/a@'g"^I6`D3dW>P(^;=Jj["%Of]F9cSfgEG[%)BC).""8`Y+!Mm,(-;Bq`$?/:+8=[F`@&>C-b'3TpQ
%.KG`G(+^)rE_WF.X#4TJR7CeY2[BGMl+&f@&A;WEnk#RC^pgOQ9eI`q'-99VZ$9-3m1]u\G0hcIRRa+[bB+(L]nIV$eBqLMApDhO
%!gkg<@gMlg@G68<cg.`(;d,QEg?:2s&JfN,F3mCnhKER#h)5Y0+F*[(@2<ZRd+W3A"]#u&80]N6bse*r(i_.7\YMhkDBk9ZL9D9]
%*7#rcFjm-D)44]3"i<!K1iQe=+dC\O!R^=6Rnb4O!B30&Ai-bd%4$V'Rm\mG1nZW1>FOK:c]R&KY::(+V/67<Rl75LW(0`5\cntX
%M!A4MO.\M+=%lC'":i+Vfe.+`3()lDLqZ!%8E:4Ck[J[f@?A,fW&@n4O$I]E!YMT#ZO$*RIYZjiFP]7.+EGKi3C8`n>E@;HNO^Z=
%[6_1\&@$I@bp<Wi*iKS$UPUSW2SjOE<*;8EKr-Z#FL0mCP*1ZBM5@KI[(4+G"Ih##aZ=]V'V])PH397F>-=`44$[K_14CoI&CG`C
%;g$e&VL5+)SKs$WajgrY`'rSmLG/sN0kpRfA8T[H9quP-?P/Eh";\DnrX*%:f,WdMi4pVl0SRK(&OsSj!1lc0%\=nN;BU7I2o.p@
%/Q4$9*#"54F_P@h?mWBU_E]J:jt.Lr1C3B$&t6oc^q`:6+9A0?1oKH0QV!q`cgn[X%Qr.1k:M!t#f;ZuZalN?UP['\XJm2]8MZcG
%'+G@&V0<B$;!pTU=gXG4fc3JkJ^e-EF9igP!5NauJQ3@dQk%=`H9jK7>%#CH?\AHt-Mcfol^gPG-AW*=#+L754l"h*ncg&OU__-\
%a=LLA)(;jGh'7kW'5a`gNbB1:[UpYR%H9\[7uu?O2K]XQBX3GO%:I1&Zk4i_D%NeUQUEPdc":.fa;K`+ejm><[[.@@MD4I-F)<I7
%P?9\u@Pn"[<['t6GB9E(H6:$b(5WLDA4e.*@*9-FP0Uq,(1jiT2L%rk9gL<)"`rfHU3]IW0]ZNn1D%,"MR&'[5Y*.l*?4n8J>=/o
%4.Wh&Zp<h#hkaH'l%]u3%S:hqSG/8lPlceTE%GFh,VtgMjHB`e3oFIL];0q4$F$;dN01'J9IUl)4pLql<Q#s_"%pk84Wu7D;O&M^
%WC-?g3okh:'ML@!MpK#BFMjlM?mqQbBI8n+3SG@1-lO\UNPm2hNsOWPnNsO:5h:`"*$Rd)V$hRa'LZu-9ReUN[YccY@"r][,e<82
%$R@3Djk<l0&Oj5C&HGkl$1jrS**3J#!mtF&6qG.?LjE`,(U+M(*b3s!]k0QaG=a.FT##58dp'TqL8OM)%FSDaUVHrIJ0IZ*`R/Og
%R<]24"r9.j/RW-$qD8lX%V9K=TP3<gS+k2^@-KYJ>VbB7`i@_qA9jY41)Pkd)+5WH?ehG&>_V$n>'8GkSYb-eETA#LQUIP.MI935
%()r.W0gJ,>;N$?sa;UMri>7&(6[(7!M(hZ.BK)`#cKiD9!_gD1%9pqp@T<K42mfB[F\WPIZ>KdK>HeB)*4WT*G+q`8J/p-jZk@3h
%/gMDe7u-kMV+<.'AqpAeP3d6][QuL.aX2,l&$cU7V(hqhN=_VWAY9cm%;@%Ch5UQ6*N^A^S`G:+<cf9YJRG?^ONV1/O9jel*l_^U
%bVb[^,E=#.pL$gZ*crMdd,[K[$">c4;Y3@1n??kg^]jMW-1U137Cl;^OC^6q$#S/83?V0"?D0M;aah@"YX:Q3"Y<2*;Z/.Q_29LO
%M+DIh4:c>/_2M*15bjH0cs_S^b:;oQ"1#jsKe9j$ZmU\R=Nh7SL1>j*80?:r&^"7V6,'nXjG!@R13Oq(>,5,<6[%_mYL*aqJ@J4%
%l!UTVYi(M=SKZ`/e4N,8+Cj8'D^TP$+:4shAl=t+V&F"o7Nk^$QKjXp#H^C2,i/r-k:G(RT=Xf2)!9:Lfa_6'01#gY75Gq7#rXLh
%/WG9)l^gS$>`[6*M^L`HKWbl."P$-rOg@V"Z.L5).O#,;-6GU4&I2tll\'*FK&gX?,,0A:e3jrf4_u(""A6+K\.I:&I2J\664Ws^
%MhcMMT#b":&_KJr;NDE,!@C+51Spk3-VIFm!&fssk(/[YZK>CtC4=koj\$.o$$:JTB+s>e^4M([K`=:eM3K`B'&HVT&NNh7#W;_!
%Sdn=C1+$_CZq)AF1A]?C?l9>1@r)q%/DE"MTCi^KX$I:7Ea76M[-]-)$4("4M*rgR90fVuIZ;Y5C-l)[(3,gX\8lm$<g"jfQUQuq
%O;ZPA]Bm>2fKunkXVN_q\)bZ)c*O6jMbSq>^gq!Sk\u`"%1rR/'T'HCT]63;PsT?j#u<>#8@cTtoa"K8V'$dLq3e=a4ff/HO@;&A
%Gu$[hM)!I)kU[o#3AXebA<6&ZPUnGhdI7d3$I5C16Gnnf,g6n]=9e"<M_,'@+bL1VITI>Z^`i!i@,"hQ66HXm42R&154=V5+d:I"
%_#a0Nh2#IC]cN[-UiU8%)%mQojJeP-dtBiL=<MV.<jW1=,A3&4Qo5O;)jVWicue,K189$:@=K2U-cnVE4\qPBC5-FFg0$>E8Hb6R
%aj!49A7Xh3VWHEDLSWHpc(5)GJ]ntb,_qWjCj(di/!!@;'>t\_jk13\)B4eCpre3/,],iU)i:9@FS:66ZDabE-FLoCK&^W>k!N+!
%-_sd9R`ANil!`Nl).jXt<io6-7e1/,W"f*Yd-6f^5Sb5DarqRW!=1+Y@s[5gYn=[SLo>,577AU+^af!21o(Zn3>cXj@CRauB,MgY
%@06VPJe"\a+`#op2Aie,r]lPXiS"?.SUd]aN/t+_=V^9:l`aaKYHX8-7]l/?&]K:%+D=nY\@V;5YZ)LY?pZ*M_6F:JfV`a\8!j4m
%qr(ZQ`GO!oachZq1g'f]`=udp7WV$[e:iN.\V)M?JZ'4@5NMFHM#j8"4Y'tIS,<<gD^VN8ai,u+%D>R'C\gU*U@^<cdC!pt8MlR3
%"lE?O%32hT^p8(UeWW-:6ml52-j5H_(dd:r1I\gB-N+MNOd7/%.UaDodh&VYU0<W<&cr]64E-<iP5'&l[c&g2fp.[kKP*DLRDO[s
%,2S;(*M<Y,Hr@C.8OD/a]M)F>"sOEX1Xml?ILT8[_.rRP+G?hDLb\/>TTpNhC'?$m9]@MU!DsB%IQNLZW7OUj)&d?AU8r*Zk7Qco
%@'6i\X!8J`^PKh.$^[Jr(9%a6@%D`Y$]tBT:5Y"k@##cWP,jGP=Tg??PF)Lj';T]s;=TMd;9!NNP:c[l?.(BtB8JT7#mDt"arj-I
%&QLM-!h7@#)KRVW`]?4Q%Y>;p>t:Sg8)OOLPU0$U6/'s'*("6(82MS_L`7tM/dt$dE7'cM>97Y_43KuLrYJ._aP$2*%s]M=XiUks
%iX4<rOK9Au1MWVScoo[i\`>T`RAT)omQeEO:<DEI_?6+"70dg"Ck7-129G4s*hl</lC\YQOrW2.`s`(W(c2NJ-(7.]k%GZA7PMa-
%Hu,ll7'a-bg;Js^cgN.r(g(pL$]&7S`<34.5rmF&N(P:JL9tM3SG(Yp(r(gT]E06%"Qo7\@d995IMuFIC!s&b`<#i:1q`W3FdrJr
%7H4p_4<f"k%4LX@SQk#tnkF-/KUE4>L/&nEJ;k\=0qR<b,=-$p6ci7M`s"qo7G&oXb*a/bN!H-.!f(2@ZKY*3K/WUH:oFXROKG<@
%HYOb#^i,l7838;=_RhMM$oqeL&^D[a]*M-bRNum:!7>ANPVDPMKj_dg@^/Np&WrHfTM;XLU;:h"@e;-F6^$)S`rJbo7=.-'gQk)+
%0@;+F9>L2-V)0D:fL-6(VB`tpR.B1WZ:QR2h#Ih74Ud7=&fDLp+Q3_<VEC8f3mU&c[]<*daCMd<&t?-$&\[>:47+\86pi.!45t9S
%$1\i<T.RE"4[XR4atQfs$(`C3`i*;j+426+A+YnalH-dp3ikpeh@Eb;1=hr]A'*pK)pAMgSHGje!]^*n1B6%-M6/+gE6X8"MWc7u
%LC_C\Ya%<m-UASH',Et7'feJ5C<G4'?'C*+J?X`(_])05\g,,2SlBW?Qk82"Fe,aQEpQ@M=nTXHT`#jb=B@dWPJo!^8&W2V9u)Ks
%]F7T(2G@:.LM\/OB+qQZ`7,7HjOp>O!/6.=$Afo-:#`tX&-7LY,q#$Y+NZp%9Ec117]7+H)'nrm/W=,EEQ3_m$r$p8d9NF2*(&iX
%al7cR_emm6+Sods_Z8F;&JWh/]<dc(&@s@D3"C9FOX.]C@k<e;%Q'&/*f^ZQO[I-O9dA&_F&\1THS<Z@77r?1EerA[db;!O.qMZi
%i?5s3[#<j+_C^eN_Jc]UcJ]NDq%H8dFmK8Y/NlUA:E7*0gL/PDj4Ul&js)T5#1@3&7jS%W2Et3:*[Wp.c;3j\LUmY@V#pIW3.!p%
%es6Yt,Q2&>LX[Y+-F>QiBN&Y+i=Nc?"b\mJ$W]k*qiN.jaWCtc:[.'fjTLKC+S11I)LN'$L@c)_+E<uXIEIG*irm`6QB8EdKc"@l
%k--\%.6Y+p0mf.8LuSe/2XVB<al;Asb*df6LU;Z29<ZBdF[?.sPSF.Z:6TO^9F;'aHR8kTNIZ,WK4k\Pdq0_>3"SLV:mbcUnCoi\
%>Ec<;%BbSM3D3'NAr'5M'1!1$&kB7;-?>&7nC1Z#'FHiSC4ekud=tk89%un8+I)7ZV&0E#Llda0#MpWi/KuKo#$>de-LJ)!(<?kD
%*`7QBIHABRdj"Ym%cU]o#R0QgNh,-ON+=uTfp*FXUl],PJO#TkBanpNcHH=4Q'86G\e.CeFXV6_/KM_94XNS=3So[CL+?W?@J_!;
%FBFcL<tQ&k^9DY!EX>c#!j3?+.j3-<a^1!d0QKu$%Q8BdM]sV`la?gn).?=#4:C"<=-c*?F$T3J6LI%+#mDT(aAY!^dM=Oh3Q5Ql
%b$^PVD45RDn2dh1C!&;e0VV8Gblp3q]SgM7(.SX?'8O]/Bp1P1M>\c.6#_)I*+<2YoN16bOTUP/6BPbtlqp:8R+uHpV'1mm0Y<Fc
%5\nfMFRUUuj;5]:#^R)218lh,"N-PF.Nq?H5(eBN.nt6*6!R+3%;<^(U..Dj;f&*0/LQ=kGa:UK#<RZpM9NVM,WFZ[n0S!Q3M.EU
%J@-BMYe!LZl/62f3N,*%9m5V`ac'b0N$2SEkrMlaL,BGM/hhi2A+BD$ADq&B$6t<^BOj?$fS8UU=G0,)?t3L)Dmdr_d9q54@g`qC
%AAl8goT4NR;ea&a@M?t>qGG3L(25gbK:jik^':U%FMsb1HuDXK/5`8)6'4^hT_Y]d:2)0f0+e"^N%Pr%3A-c+AI-FH>[Ab<Ba0A*
%p:+?U>O'>`=UkX'5*DUi1c>rIV9>rNU7TCKI;2DVT,=)/,J"MQ8BO3IM4@e'%L<ZB?hJt"&BBP(N[TcNlX[Otb90c'9Fl7*Bo!gl
%cRdJ17nnTuWS(S%Q$uCJ[1b/<[,;?LVp.pAEX`"g7\03%*$2t[V-_b!(@u(DP=j34/'M9,BkUD<)K\-OZ)a-KD,>kLLX^.^C(>!e
%,f45g0\m?'9XGDk*=_il)NnNQ/Ql:Ec1#jsgu<qGGWiWRYl:M3Ga$d&+p.Upg+EVA&BGdO%0Xs=QQ8_6-@0dEZHS#a7:@0=e#KLf
%5g8"oI)ao,NY>VE]HdX$M,4gBFA*)_EMb=.,ip647tub1-+8d>0dJg0Fc`Ru[",^t:$6X+<"[#;!ki?=66J4HT^Z4^2L/mi6]6ba
%N_2BX'Ulj`Dj?pP8irEiS>+MU:RYc!.?L^jR$b#b-]TmRDT1UM2'`kna]AaS+\@U?,d'KHE)[gn;%W;*SM7@G_7nj5-eKe-W0>!J
%l#L'61nk^7Y<:#;7hqO#pnTD*jZ0UN7Nge[*Xh$Z.9iN>(+6O'&r;S#\r)KdAT>dUP>@"O2J'kg&]0jZ)`;@[\RcorUi@*f;#rY-
%UkC)$TLnYX0lM-3%e3Mf%3NY9:WCr,cD;9AN"G'&OSu"6Cl=)O5WgBX[)'a]'_+!d1mJ+eb=>&BBpcj;e\ZqhKks;()6!Jq:^8S&
%9Lorp3l4As`tE't3!:Ifn5bfRE$6@gO]E[[#&d\$+50>))e&0%RK\(0N\<FKMNC=66:\.(:^W4^FY2+e!WfP]1GnBrfor^og^,>8
%U8WkSiu7%qQcP7<PEds+Sj/>^?C/(j]R+H3F''duE_r5tE0-t(.3sQd'<,:KMiE;p1o;cPRiQa6i:3bC0&74VG%C5s!C.],3jk8I
%%A9!a>a]0EF1nYIc4[iV)XR$i2AS"g@;seYVh7Vgdh'A]rfDIrlP56T$6rR1Q>/2f-K$jdWgWXH*.CQa?-%RFO"6I!=h::P@8olI
%pXN5SrJ1cb64dBO`*)UY+s^!,a3gB-f,[Rcp-^&M@;tT8cQ7h>"@@hubQ=\uTCV:`4poM%#u_ddJO'0r9FF=`7"JU&D99a)RHrh1
%3m*%kf9EI##VT,G9"1[T$O,=+_mDDk#V)`\AB9D15*<!"M1c8&KQ(J+:4p)BD(%h^_R"rt16hs)6?)#l.R8i=LU1FtSfTb;6ufNc
%dZpY[5tnd$g`0q:WS'Q/Ji4.r4K#aM&U8#EVGpFB/@]4m\!$j5@I4#PnqVC=\,_3NKkl3(JIIm6aFfn7PUF)WZ8UK*8DK?T1a0Bq
%#Z2cVPo75/A0%)^iZ9SSKbDFXl]*YGZosA&/Y:*`0n:[?cAR9I)SaTSL%Rd&V<3T@5RN%+,mK&l#Li)=:oJij<+heh2N^6K#=75O
%'=fPp(i^-&PYEi'h"ZMUVc2MOP=/cAXBc^-(+<l,;\Ed;A/#0W!?GbmM]PV*)XN0>>!cAEJ/@9#%_0b[JeiL8AAoIDAqGV.&@DYN
%5qk%M%u9T)O")<Bc%U7m+*M$gn"@5^W"O,:#h_3ZD&OB9=-hE/2+N[[jk*hPb.05"CE18:+A9htOX9X(9$+[tHPin5X(/[XANQgj
%Tk9=ha[Xd=^mOXg!CA+OD#f6b_mLt5Qd!h#J3@D8?72b9?mQsh91]D69(n^8`uJRO<3qSt<)1DHOi+>IH>'7q,=D\<e-OCL@i@\f
%?e$e9,Yni,6N`ttGuOdc(m`m];%<tcF/=j4ojeYn_C.eJI:6[foSF44*6Q_m=G-nLrMIe?PPJf.ateKYX=GDm(m>khB,N?+cN,nN
%KLKMA1a#p9fi#G]b^K]!kr%[_BM]4*G#UI-,YC5&p@IKj/q`9;"g\$Pp[jPXNX6Vag;nH!KlUmqNERM:q%i\g=XJ+0Oc'4])eDIk
%*;Y:5,FnrhKTreD,MU*J%+(t=!g*T&BX0I+ikmmeg"8PGqhRRlU_ab.$(/_mUamGCYY=;a+k(6MohS4I"Zp5p9Ol9-65ppZAD+7_
%QAUj+7R5%j&QaD%np_2G%bQ.cUas,(XpSa2_6T@8BT]64in';'6:*Hrg+'a0OIJjjU$g410dNK>>QC%5;"L?[r<69tEkOH,cH$ck
%B@U?@<3VHVigI^,Fa;aL#G]R!5FQ.k_a_Gt:^3@Np;:U/YgT+=>S21B6N_B>2=%i(dtFA5a7RJd,t4Ul!]Z,[PZbX-JZ,Ik=6:'T
%RGmB_:YFU30=$m>fZ:tR3a[Xm&>UDgLT=+Ab#QJa"C!:E13K9IOm(dAN5>#ee4+I@;S#c/WX3d@e-,\/%J*ufZ!XGAJ"OS#MG%4m
%WuHZBCT+0e82-Jl/O]LZE3tp:(RmN'NaWO>*En\$q.jE[3BD02@&0Ib_+pOq"8oSi`^YiM>Si5\1:&7h5j>l,YGm.o\ian=,9(Lj
%BfC^+7Hg*d:>8pWWdqP'<$sU9aWt(k.RQBj_,Xf]=2J#>a2VXu]k&_k*`4+q;mK2Lg.1.L"NLss!m'D(RgaBE%Wj[n1?-Xi7s%S%
%jiJX-WAHGh<PpRh'K=C)lWd3Q9)"`4eNr^1$qK&PB<&HZLMW'3cD(Z2X)MTjGSJIn<="7?CIKlPZL'?Z-ju^#s,og@*3hk:PX(W]
%o1^:VY^B"#9hMUDB5CBkVXiZR5^Z4g[#$1C(LP3seUb9J"L14ZMYWB_-VJ`G8-qj\)3I/n4Cl;5@pVlUO/=(q("+I[3gYUl:^"fK
%d#XESNm9fp,>8O.;+E-QAWRd<8LqsFG^YTK#Pk(r<c9sL$K?_(M2l%"mVSIni;>^'i[H.Z/&Kh2Hs"bUPCG+s!0<!.PgEc"0P^%/
%W^O>u`O7a2Bre"D-;6PIe8\5*qDW=Z@MnYu'(MS;Kg?bk)BQ3?_g(al'=Ve9E]H_.7[9jZ+\O@ocWV=,@2G3.-#Sp$[Oo2g\7a78
%:0P@Y%`$.ZQpA:sTb_B2dC,!n,=nNMJlp`Ce>::Z+:>o+O9+A)1/EiK6r`PbEg8T8q]KXp=_G2$;.Rbq]YSbQ[+/QVn551I<5^(X
%_'N?('*!\KF8JH&h"#EIb%2Hi:l[fLRJj^M_.RGiN&jUa9;i[brC"aIHc^q/Eo0%1a@AQVjs4KnX2-0:<BOGDO?VW*]Fc1s:AD]m
%_]t/3YVFc>k85WY@#"sh'/7@b3bR;3Q4SeV-tO/L4RJB;:SWmD:nmed9*N&-4EVB!am;*YQEhp5@d9aVMkHFhG7,QbQ_S0Rf#[%e
%dV12k)P'B[^9]kXPH^fBr[CF*:_Q@O@cnb'!Yq=?l:=[MU/Yg"K`JI[Xiabm?o6"301t]CL5haHh,K8c=P8dYlJ,,K+=f4BUciA_
%<AIdbc);B`1-h_6'+PZtFKo\cU2]nk4RK\6dVt!?=tSfVm&u.;L+X!G+O<e@7Lg0u>l@'/Bekd&ML?@l7#Ff=29m7AZX[uO=QAn>
%:2co9JkoTKRk2>u[4_W"ZADN]^J(5(GQ7g<X^G$Fh,GQZW:Z_?&\)_3)kgb.k5cWfVR'?S+tQ;*kNV2s8Q46YC(HulL=t9O\I[1b
%CF(W:mPi#F,c-n=$lO5RFPo`IQKP@d\8Pbj`;%(e@H"4'>Gc)m0MAT6S/1+LL`%rj%+r]^/rNR:9SJUBLD)AscA-tZL5u7klc%Zm
%E;Tlp1!%!q@NW1@>]tbGcg++6PE81CK<K*B0oSW\'M[H,@`a7`*7,J,YS"8ldBSn6'aYMY)jA==@3*F1Xg%O^<L\Q.4ciY&W3ls#
%e<3P;XJ8M`;UO%FAA)>LPDDed/03E>WZqsU%2S\)JV%L7K<.qH,&'(%I)YX=W+7'/s)JjN-W=+e5it<9.NCI-_&XQG?OSB0<2G[3
%9bYj8GZURG`u/^Job(,?Si84Vi/9**g,F8:12IY7rqmO3IeanPbO7'/'O>&9lVs1ad0)C`OEb8^hj+kOL2>t'QFIYNQTPO]_mRHT
%,;d59O\M\rMc4G;MV(I1$MY1%T`feN29@1V^*fE0$<J0u*GH(j<_Z^LJ.Ws2CsK%J@D]shOegoFbOAt_R6n>&6Y/Sm4_Zl)Cnks-
%K;?#8JCPm5Utgru\2[&YTc=.87i\8\OqgbJarRnL,c(!$j!H$jm;jL5WgYT`B;<T/6Z\!_9,f>5KSUn0/D5ar-;E&_WG>j;XGGnt
%ETpGU.q"HWKjiT[1o9HK't/.JCq+t.OpU-d/t\mM*\fc?R@oX_*Mr$6\Io1`<B9#o@hk\O>d/`WQ<[@Z7W@R_E,0Q<%I2p1Z,T4@
%Yk$K69K"=D:fV*0X]pF[S>o@Y&iW7[$(HHqnFDV'#l`DR7ON<DU.'Y\e_N2nR0QY?C;(NG)r`h@ar3\Uh@E&Ne6\2*hPbS1@]1!_
%+p4*C&213Ki)hU9pl9IY8D\]5N=qC7aC3!VP9imi/ltAShe&u&Q:a)j[VeO-;a&ONFdB2Pf,*Z9g';MZ4,eKCW"K,dX5o[R%\\Zg
%giTl:U\72FRBJ/,@Hi@ZPeY)L1fsn&`;d((E(ij^W%[0T6Y^\l8RWLdEd:V[h+eZlEKCshI*T>BI"YY)'[?"=`6Feb1L8IoD-Zre
%E6q!B3KY.&a%;iea/K_9N";RD^<6OIlkQog\;n[-kta(A*7%/dkW,9Wf+84U<TR^LM2lu?_ba&_6`D\k=\X/efI!ml_UP1ciG>DM
%'KrSj*Y/n$C+Ng,*_Z]RK:?@m_mk41WeI-_Jl_E9g&dbuaLX3.eOsp#!eul\oTC:>X1D5s6/Y"/PsZ3%R`a/,2Bn#q@`)0`7?Ws1
%CmqAMPuDrTHs>sGB(<Q9+^FI\6X>k6We1ZGG6N_<WS:)Zi2534YdHM3M)Q_fY1_AL?^3Sbc8^hAYTF8M>,_&BE@\nEdKLn)/IuLR
%8.C>;j'X7ha9XeIaZt)KAkTST`#adY%IdN+,E2u8"\fu'MU(&IJ>fN3EDBE9-jrG,4NeC=K>\Q[6qo@C&MqjG7o^X_"9!1]A5P_H
%C@ThiY*Cus'd$7AP=8)?hH\ulp&Rd:Caj[MblM2?5cqU[jHaUKMSg?KilkpZrN7SbBHWXQL_R@b8#,ke4?M6'3ct,)7^[s`_;\\L
%*%r+8(WAIRW2_)X`Au,DAA(.kp)H_lkd-NGkB^1J$q#dJVc`"=Wo(=RM"<;+]/57$ZU"-OLTh"uVZ`sP0p9f:-HdX/]=8(!ZnPmD
%j!N2fNbYaqD<aA%^FmcE)j*^'PB#U5Fh..gJS?[2Z%+VcL+4WN(GKiu]%.:8'2,c&AN!uO5kRuh<#h*cc:Z_?E7Dq4c/a_r<1>r>
%=5hckAktm'P!_]M;X)m_DED2<`Q]#p:R2+'UN3\QaG^,Z.n],H$*.Ybd3tJYRB04tq$\!d7bId^X5Kn0ELp_0E-l0&Tk]^"8ha(M
%C5O8g%AU+6XCKDo8ABk6+@N_g4,P49%u##E\9VU(f8R[c@HE+mf1)1#X(tu:VkUhD?mF>XFL"uultY$(Up?7l<#?SfaF/)O)RjDd
%!N:T:-eU/Sk-,hNS5_qI"EL;C9Gc$>lDLWbjm1<m@HlcPeBA)H0rXW:&st_8k^Ocfo6[D?#E*.=h%f4^*nNFA=URCGb\\,*38LGd
%L0^%PWrkfm)+t@J`Oq+T)4#U=5nDam-Z>tXPR'8>3"Nd+Be!eUAfV3D\1jE<qOt8ph+[)4bI7X^>C]=q?4bH"6%(Bb2u#F8c&fDt
%7(rBGn3A3M&NA+IHl9#b/;!(85nlKQ@@kt;IKHKQH%-/CV*J<J[lO"35>RkB8Tr"&(IS";>Y3'3dRBPac&m2^,Vaac_^:`H;AG'Y
%A/B<I<AR<3fq-?W#o0H$r1Q4`_P]N,!`&<2-k?$4(f%4]31Lme;-UV/g#J?^3/B6;8N3ZMF&J!R#<K,WYq8-PX)S0LV3VZNL7++P
%!%?DpEFG.sNk4LK=*I=dnKY5PdnkA4`H6*N>$,nuV)K[-a2MCrIFns[5j<o6aeD`Fa$@10B/^Qlr&I*W*1h(mEQUPKe5<\&`jJ0R
%.C\@$Kd_S3Rnd5&:arui'/fOT('.kJR=@h.;E2+rH%V"bD,\u%n?F;[(6A\<Qlk)JOPe2^067-sT.S@K`"$[-j$OLNT!#<eM8tQI
%1ssHg,k.#.`!3%m#,<s,9AT%L^2-DE`CWXU#N7NS?r7l'a_T[Da]bXARs\F=GB?<,$JZ%5mpg<UV&nghj9Yn%>#6hk<>D!:2P\@0
%OaULMOiGK'CJjb8bm4e*Z1j>.%8O`lZ]t#I"3<MjBtLVGd5=$8RZ^[6o)?[O4_@[GSC"8WlCpg),o(AuUDPba.\V[IQRL[S#I^#P
%\R(llbu#;8iVJGq9L)Q8OQ<.GYG5u)9/X</S!D2<2^eA[,jtG@I'TXUF*anO&TCXpd\Xe=EM\\[078.*J`um;.NSSD$XAP+[Ee>6
%PG+0!WBsbK#<7/WE$qNc\C1oU#,,(cbY$I_ipIn6MB5231-J/!gTnh$QLuTYeHKjT`Xo.L@mWL/g(F+r5,[+RrK/%b)lk558Tj:$
%n.J]s\\,4D*eiN]+X(bJAF#h&S@G$?nWF$m"5p>)%\S@7pj-N2$WU8jGMsp\bi^rjDTH!e?.Rp'l\T4R!^U[h9!c'U,!`JG&XgRQ
%nsWE.2rct7j5smcGN/:/7C[.pU`bnVnYIg>Vhl>\A.^dCk((.,.-ufO]nB[XnY&6:EPs)]dP.jbLjh_2V%YcfVAbR>0W\5XFDX>j
%4TK@i-P85gfp'%<FJIiSE!\kf:QZcE2b`QFS@IZRWs.B_/h[r)et7j,jlrF++aRZKKGU\c)p]HBPA<3*c5Vi]@UdY&_jf,$'?ut.
%nmTO>>cK<$"g5CuqggXU/Dpa:X1Kn"k1%KW<HUKEg&Y&s-BghJAA"1#%N+()*7#Y68N)Ek)&ADl3.0U%O,.$+;s,gp,Z=*2HSQ44
%o/22e)m;!H"9Iq9Ent_V%!?[g,Jrn'S53r<+]YXTb(JRG;@fqsQhS:MXWs:!4:dpkd`GBeOBNKf5uX]n&4NFlF6SpjPbg8Q)oC@<
%.9VodQ#rgI4LforZlV&<rHmL7ao_tP7;D)p>"q?j-MC9b_L(g_OZu+H^\Fgn4;W22BeLNYbS#'L(<b^['0]X;a7dmuV8uIqW$7G^
%UW5k2*F4q6_7X5]aYi12njK$P</?m>Bu;!:Tbi9\De-T5Zd^o?OseUqmL5&94H[I"3+]).WAPYG&h`?h/;J-h8[ldP_">7AXGM^p
%a-Y'uRikBF/,:g"PRk%?jImqWNd2/EjE!UAmOdMC7M=R6^e#3B*;76JNVkhT%cDtIO[$am,,pKbED%HmXf$'qD1*JNS@IkLE"2L0
%L8#t_F1d]a>m;3!H#/VB7:!ZlUcL-:j6LXsg[9cf5`iV'GI`!jXc<g2JK5i<"kC1r7*Hh1TaXl[?uiVT*6I1#L0Q*m@l)AFOi!,]
%`_5#SMVl]8lf;e;0GTp6_g]W8H)<^Y#]DsTNT,+6Y7)p(Ojuj2(=uW&NgD4GjNYX+#h7\?Ti%6m6(sVh7?F8o2>R/2bHJE5UkDjs
%L$YG3k>Z;`oN"FeEK>aXAj`"[[3atTYom+F!^bg)Gm:5q4[66K%%2fZ6;^&]aaR208PYobKY/fd1lCc;Mt!K=;+2uOd^llTZJ9^.
%G,jq?q(0QBj=r(<'qeGAEMAd<27=KmPmKj(["qcKWl+!D4Q;VSe:i./#6oEL5#s7(M'6e$8q<f"M_/#2.Y(Y+En5I8$'E_p#Nkod
%jJQa+"hMoH-;MO"jfB4%#5ODd9@`]iB!hn?[,kGcBO(0A-&fM+0_fCIRaRbV=ZoYc#,cT,7#)1G_J&EF@CJ^PJJ0ZG>D"^^-jSm=
%mo"q1j0gYl1@VlS^<I:]@nsGjJd1%*]q.E$.+Bia&PU<#`_$]N@8:T(6!KY4?Js*:H-]5P"f#Zl]Nm,]qtULUInp7#f:tsd7!/rU
%Q*%o2\?o46S.RcMWOh*-+]r!tj)B\XCCEDa5`Ib`0%hYcS=,41<_Tb(EAa$Q')[_+;c!3]JqLZ*Q6P'[3O]\A,_ZeZZGq#bdm8-`
%WDRUZ(^_j^bm\mf;tPnN*[(CW91n9=nj\s\+Vp)*,jFCT"WW\ihl)CGFOO(2Ck9OLI(0dmoDH^in2j%nC,iM8O2#2CQ\XTg6F_(J
%3CRLUnpsLYn%HZIMaA9.O[iQn'/^.J]_sBFgSp3&EfC*;n$/DDM+QC%bJObj=0pS-K`p*d5"L5X"N[<b['>;IfC:RZp2FkMa<UJ3
%YN=i$":bt5D*ImF55D0*#N*pN<!j,EnMttuM1`u=>]nO*#?BkW68\;AK%st]TPK@r<1=]]<J?K%aj\:jd,_lmadL!d)7Ff(lPh/8
%Xs-HYfA:39,*/-)OLWJ2Feue$=lY1/Vt_JH;S(gh#JT2a3/JZ@B18`$LE3pkYA9h]&0;*Q*!:Cn+/:07"hm)(*Z`[?iJthWT;6SN
%&nb!k05-T?'kaZ.P>b>gQsUA"MW>eJ%$ERKE;5baR\7OJI$RBrFEbT#2uGT%+6,GI*&s.Pe\_iSQAh'gqbpDIi.*uS)W0!uP\[1P
%=u25VA%mgli"f;0K3F-r0#f9V"b3S'%o[i?4t:p`;NnZ*Lfef6&4E+-<>K*(Y+k,!4rea_3=+b)g'l7jE)UjXRhM"`Z4%B+<4_Ya
%ipmC'oIU7(dKPD^J5Q'So/2Q"bW(7n'FD7OAqgHsO$W:0!SQ:KE.'@r?,DrSl[6hoGEsDa`,Du#adGq\/QTm$36't\:/N4#Y8l&&
%"pMK?3@_/.o2ddDCF:5k:=AJ+)%Ad>+!(^ND]$WQO!Wk\(hj2BW^8hZ1-m@54o+K1plLl`<Lg(61Z@8,iE\."A`/9_!)j[TW'#a'
%>H$iPL`pb5;J2IZH.N,\^LEs1f(S%[0n5]@]N-0[)MbbsJ#eA#[(OHOY-N:,cJWb'EkcUb[/;2ls/5;>F_"".,kV?;+-&HK2Afuo
%-0L)\D?D,M>j?_:L7.ifZKg4Ni834pM,pYT0M#e0*Zjb3B)Qc=%BT",2rR_cqFZZ!ep728A,$CK1NJZ7THn'Q-jW=3P<>rX(iB/-
%KD=O<BAmpCI$l_i#Go!;L[C[!%$lfZC<-hEjd=[%Pdh^>RSXBGaGh47Ud-_(Ssdl[`'4\V1q^W1K^V1T6l*$^?Jq0Q<:X6-/E_P?
%?]LmU;s:!77A28#[rWCK-Is"qr2XLFgJ*bS"#&U!*:@d*d?(k=dTO%4B,WS(PgRL<T`Q[_%'Ts7SG[>f68IRWA]RpL*=RF&(\occ
%*Fq^7\Dc=(V"aQRMW<KZ#O1%ue;&<QBd^>pi6jq%]g/hrr]%87%d0]W)(E\.&c"AR.!in1Js/1r<.0pG;5o>bL@\^Y;4Rdo<7@_N
%]TDrd0qbpXPU]<=r;\"lNH/R$l<*(W>0b.:.2KOLMQ4j^QV)CDjL$12hVhW_hSI*eU2%0iM]_<8SR&ZC]Hu$_kXH/6AC%In=HB]1
%N'4\u[d37\-L<V?o:cTgnrh\<96$cWEO+$AF;:.cF9;HX;1:GBbM$Gl>Vd7WHg?#0J4o\P2b70F@;0&[Yb!PBb03d(:AkAT@7Cm9
%I;qDJeZt@F6%.[f[qVHB?ZV0UT+LHQ]g2Xuj*$5]I/W$:TYul&\S-<82?a>AJ-rY"3&sA:kRt_=M0FCgN0IS7Y$7Y,S!rE>_0Jk8
%Rs_:V=Dc0*9-mQeZCjOCm'i$>4S-H)65tRcQoBA6V`/N!6A#^46kRGk7CnUBD:BjgWaV-`13>WRMP`slJ?P:n@+YsP9d\IG>474[
%B`Md;g&Zd05b:c@!_(I5\G#h!<>fGRm[R<]!]!otO-8=b<%f1WS_sRE9P$TA*p3RpE6AjkZA4.kOtqcg:Fr8,_6'ZYP3jJX&"?@,
%I`t9omr@gf8,kJZhKT*\V-4U[-p9\ZeX;1N>>`8]dAe*8Z4-gr:cMLKTKu`m70f?C,p]6)Ql8QK#(@SE)2b;>fT>(qdAiI?qN^*\
%VToDB.$='9@T0IqoX(iQ%B?D[M"*6g3-+MMX>=9#TiU1:$\9=m\7r6W>]nc/+QY>_A2Q;tJ-,;EQ^Z>p!H_"Ss29!ZmS=SBarf]2
%)T[Q:gA[J;jg53JMO,f<m\"m.2FtbITj;jt`@ML0rgSui<e2s._i?s)eVdu*:]3bPWDPU=Ri?^;J%"0Yj3u#/%d!>j:KNiZACAkJ
%^m41hdYFgE/D-F1MIgnlMQp</Z>,5>TunRo(;52s5`:3tlD4!G&D(+2AXf(gg513J.d3#m!bAg3ORuTL&L\AjLIe-h;gKNL1B1g)
%eCWJb3>1?oWc#3tOSB)Y5h+poQj-8&%oC_m-Xmeh0I/n&(V0hYH[*Cm@k$F4Nl&dQ&0su&3%2,cj/6.Z'+]7fV03ssT`[c7i3h-S
%`f6;e'.(9%'VA&iX^&Y/AOlXI@:V"c-uuOa6o:4#+',?7?#C64]`ceK:1Y8uClbN5Ql?EF<4q/c=d*](HB<1qbs?>$'`sPLTu:5\
%1g,k:hH[-ZY0#mLY]!7c>DK#uWXZHf6k]:a0LP]E;h2("EA\+7T`0]0o`mM!DMqXD*F&!"YOI]Xa:4uA#8]e>oW7>.45?fS@LM<N
%_Ba@-5bp,J5UHgN*"[@<&MT9e0\q".Df:[.g7@d`8bO+u)W5WPScWq`$/5Ho-t32;0r4W,qR4e+XgII"WeE2WK:?TPAFmtmkN\nQ
%ajegEVJUXj1H$"]W=YKRMG:;f;iGDj?Jfp<?n!E1`dufQ>cb6+\_[d4$P"6hiYjBY_'0NsGe4VKn>kfh'E2Yikr"N]UbP+4ZaoAF
%"/94UCp58?#lee#5,E*;EbQ#]Y)IR<-ntHujopVp(Ye+T$+=jhn#QA%Z>5Z1#L[ZeIQ-i6n8KA29`qiW=W/NWP0RWTfD5;\W]tu>
%!WGZrSc?OflpMnL0oX#c#@B]!5A4>fB+8X/$p%6_%k=(\75rt'2U&iAjZ+%(auUs!YAt1[\&DYc.oq?ma!kfsf#?u:+:Kdh)i#d.
%\?E5&#C&-YhT1SHIT/*F:/l?aH'J'>Bl7nk'aV^=BHHIaA*6:`,^JYedPg*4r:'=K+.d)^U(n-#dZq"ark97%jpTaGZ72)A4b5FV
%K#)8R5["Mj,Q3)+R!&Nbfmuul@nq`6Dn7B*UK.)XY[6USMFCKl&(KE5lh+-ur;i^3DsZdu;eEor0OW:1$:Y1V`YuK)#"eCHnol@K
%JXjDH<um&:A&ok<>\n:FfeI?O9Ee?r<#X;*p=@1k?1$/p?.:seKeNE&r1WT:GARC3U1AjB?M2LcVR#,l('I.1$QQ)r).<YT1.OcY
%^lpP<+4#3sS,eS=af])/6%[h'L)sA+W2C[edtUIm6R-_d*D`YimUsC&Mb:q?Gm.eGg<e+``lYe0HXBUY.V3l%PHg7V>U$L,34eT4
%(5sdW7k$MK`)/EM2JWE"Ya5)I<)a<l,=/9YHteW33W'4,YMS7<K2WUl.5Z0pF\`%;p)<Bo(A5Pj)>YkCP1<IiorcD1.G;s<kBc\6
%+$oC!'rA5`f_'0To,rXT+0.=DKlmq5PMm`9CJ0_aBN!?r(<j@rNJ,AOo.0%>p`sQ=(%hr)2l/"E1]qQqI^6NSC!nQs'%j!<'j;]C
%D9LpSR<;Ob[bs2II8^##s5%rm>!;\L^*"4*<3Ad=fZb`$>5H8Obdim]3mRL8pa)%!pefb`1"!PCW4?UtPi*fp'%a:]?oO%LP(BE!
%o[3N*?f!$UP%JF:]9R(A=^WY1Wk*9Eihe\C3dRN!%Q'!6RIde^.+T66\4TXX'UW2B6:>aRI-&`K84ki6].u;1HF18.8el+KNWmE;
%]?4oM\B][^>**3mfsK%*R35RbU.>ER!ki,'8W'Wg-8\Sc,Y2@bg\97!e3:kra6'0FB#!N_kK(LFH1)X-WAYE^qIK1SCO%k$+Y@^R
%=^(-tc(m;-qHd?"il\KcFY.b+ML6B9>-@Z"ab+38XR&ek)5BG)H%$h#bXm[Bjgd_7aF!K!?AWa9j\h!17.FgDGbO,A764b\4P=H7
%&VBH-Bi*VCflmRp]mLS$Q+a0e/K^O>,YDcEe*iCZ7]uHRIYZ5`?gp8gQpL8-&kbnm%Rs#MKWEm*C9C>_;Cj79!<)iZY/+)11pLEO
%2oVT<-W-U*91nt6"S-55lqns'0L&QQc(IA-K+^R_&P?D>2#6_^\PQJ_f=^S<j@9:1[.s6MimUVsfZ^(d=gSg;g$g@5XO$8Ug2$U-
%aB:'\qc7-#f8O)d3_52FCpX%?c/mo\(q3'-a6]=.8#8%DA-c7l9]pZKYjE27c@nJ!g%(CJOV;4r?cbmXb8=[XMmf>kj;S!IO7b+h
%YqRT)':Q?l<n$QEQYl6HNqpCt>O]]Q\^7_^#B$[AmN%SI3])L?PhYBVOa"at2rEtRpq<1X!m__TpU,:VHm.cR]E^q6]rVp.q^R_W
%Lq&kNO<Yu(HS6`f_&o_i)98T5_<.+CRq;iHKTC$]E&tV>nBo_@Nn7@1X1a8F,S)f%(Ct]^eI5@08)&obEE0>^"S^uaE@4l?fmtaM
%d.5SFbnl5Yp+g7:G67CU'EAh^>thFpEls`6["XprUoJ3^c%Ok=Y*=&JQPWi'>U]YpN8?@IT]/N7J#DLc'B>1PF*IFZ-nB6ECVYgF
%K[1J5e4ipMD5YZ;X!b-`3K.l`&E"\551VpGW53'ak,HFJ3$N-&Q+b_KD_?D*P-4-\nS,@W<J!)aJ#_cbCrgZ3H!7t!-'KBcHBE&W
%3(dHqc^i>GnXjYO+7+DG+7bdKP$A#[=cEmuEZ8f%2C(RaH@A)I`[<oEVfTEpde09VF0=!M_30(/]Ua\6\lB9D_QLQVZ\m;3s04@;
%S^$*s.]L5b[F;R_:@mT3nBEQpo#oC-fK-KqTHOkJ!+YtXEl`EN%KT^@l#1J_:PGQs96WEm.k0>C8'ArGSnX+\qoB",i%6:V]TTqr
%o>=YimI5laP]_Qqkp:GWF%+*Fm.cQUI,%WE]+kb5pe"ct6l"t'j4BCg`kFE5Gkr#--O]O0"'VgaR=%b")GGi9nNQq$?="X3g7,(a
%r0=4&3*uFo0$n`YhjOX\5q]99Nt9e5U?g#J_A4f>>KJ:um<@a:KA(D(VdW]1g]*462gpH$`p?;PS<hS%3`Fm[f&p*77.`7^Mt4^>
%>_au_+[k?+UDt-M;loMt)]W*u6)V&mdk%=l_n"(%g_4R/L+`mM%V@-jb2r'KS;F[?<+2O`*nR[m3#@c$Wil:#eh"OlCA"d=/J5b*
%H2!01?D=1:(N!!3k_L@o]_pJW:&oLOY'$4G?T-6pj5&t[ho:!9I*RT>284LKpDnr%[pC=t#Hg=KO>+q_>1##;3?W;d7ZB;/":CTj
%.diE^(PSLmZA#%%+J6sK%nh)Sp8d8R)%bIaGJ4s'GpRGb<rsL4(n"f?qd`;<XtfF6nA5Y?4<OVpXRcY!3QBJadUPBV,oHR3L1&0C
%)@$Dlqdo7l`5#KH;kHFr)"*J\%\*egSs4/oZjAE'%`JRXQO=CihD?6RP+t/W<'H<8A9Z][R\a5RD\JHq-64q.&LFscG8KkQ^Eeqe
%MBVB'5l\f[+)76<#TVXC&055ACAJRa-qLmf!Bc]eO&J5X7S41'q7,^E>f6fXESM!!NOtX->BS_9V.(lI\3e]^\KHEX@JMlO7L@d?
%YUThlqQN:[OMG!dmk17XUUN;q9D)1%W>2ouD!)\W'1<]*Qbi]=T)=d=:&gE@51E-@(Xo2S/kQoh?)/t<E7$!OUtJGH^7)Y:=f5Ij
%Q\A^JSo-GEa*(80P^;SjU,9mg0;=q;Qfg%-MdL:SN+JIuZins^;XqThXPe`.BA"'N9mC`q-?FgXF/TCAc?VgQEgldk`n&YYA(cO+
%K'L[B4YN-t4QP.T2.5)BBsVitcB2FMNnK2IFWbGe&H21b`TGog_Y[h]FGQ:JaH:Zf!&6I'#MClme/I4qU^D<fgL_aXjAd=?*\n2f
%G*J!";&<2MmR6qg%9P$(jA:o6!cJXiPLD*hp[W0_4'di)ON:a+8MHm?@VjsZ]1+:G@=B-Yc_&8XqZ6d2)]T*KYP=)m2?.J#oNg+@
%[MGgo?q$J+cosA(:YM6\jND\E>3tDfc#!M='M?_Ra;8^SW8iiRUo,Sq7#;_@!?Nkph+GQa>p#E5*-#EP#GXu=o1Z]*TMg^pC?7Ld
%!h>3p2s?M%^/<_kTk3X20tUSN8oPIVe"kS\8">n^[W(@_1mECm3&;jCkKiYg`ST3t">&Do)Ni2C,l5^.$aW?3*k&>LZ=J'c/WAQ'
%QB_Ne-m8Zn_A@Lb*RH%.GtLUWBP>Mkj^gKh#E,NXK8a)GNe18[pL\lf64BMPlqhHJ&YQ-$*@e8Nmb_c4"d`O3rPpmrUGC5.nB19c
%'oA8PbL%<[LuOfa@jGm#8I##;kdDD9Hf;[`,nI'CnFMB!D)"+-nEX.Ci*CoQF4lRGa\0<D7F&'\ag4faGWYY<#XLgqFDGDA/N3O2
%@rC*?5ucmOmU!d3j;F`>oj`Ij/+5RhJ\G./)GZSG9'ghP[rY+Xg[5-NO62%O`F3\Hft>QIa:g+-O]I0<4Wo87YUHb4i68M*h2^C>
%QnaI\,W5C>"JN#O*1k+b!tA7tICWkcfg4M*_35>6a2`QtM_*35,?!WcZRYe662f;NSV\u^j>lrcY@79lP^NugRuIG4,V-<Go"g!]
%7UgU__TH:B,7dVni*iHM*fA2^'V<'s3?f!qQLQQMe'4bf6`bP$o;1?aa++-$#CH@Bai0K(N,S>.md"<PFKq%(0Rmnrg?<b2Mj5D_
%>fV9u9eP&[F97[%-[&RS"A(3TdFLCZ/(W7h-R7>+Q?Ygu!(u6#a`*@J$gjri40;]mb(Iar"J;CFmm$]AKR(,.O&`KKm!u_P]*/0X
%Y<`RiR-eH\d;Udh>!hktiM#2=kq:bQ8PjD_$U3?*GGpEs7tD*^r&'.1W3,0TDB'8\fciY"4&K-P);QPp4$3`+0pUMhD&R3\=K?I@
%PD:PnE#7JPR%,@655%@lf-QUbWcM0QpUF>3&+%LLp4WrO5oj(3g40El`V0UXR4N?mqe@'Haq0\O6J6/++D'jq#<MP_K8@HW*A;u"
%\uAJ,9Gf`DDSZF2X2;/&`go[5$UB<Wo0f,e$^#ZJ]PQ[jn'g2q3/jgJ?Dr*r7b6L:/M3oG"PqY`S"on?FaRSi,#KFuqqZL2':gs`
%9?7,]6#ck/dfCo4$0hpiapjLqEaCH@97e:84XJ5?Q+bi17WsQZ14ct]<,2/6Zd6VQh>YN6GB6fKhOASe*Mi+V]1mkhb_$-g<_:c[
%QUa1?q=$eIK^"!RcJ<a*d!r]e[p=i13pS?Y7R>9nBda0INlrhmEpETW9AeB7nTfVp52fSE):`J;`]9M>XaB_F*/n&W>S-$Ah]G#D
%@RJB'mSiF=Olc5E:XU*IWl$<ua$iU[Zdi(NEqOE@-p=qAZs$;6`;&Hub2HP.G8<k_)2[BP=B8-GGo*Pq-`DsB\2E-5GncQMLem<G
%DIjkLn&AHQ>j;>"3*%^l-rLUn3<nqSI7Z(fc&UX[hf9Z$jB<A)OZXIJ6*u>5Qa8`Lq]H:r^1UCb;UBrr6'ste,hn<6RY(7D;TN75
%DHFYD`7=?iY_o>"Eb@F*^d\@>,&2iOC(>rrRF[6i`/6!b3.AmpKsRMi8f8`A/0E0Tb5MI)$1#`16q_]d7dUh&L4MdJ#NdGp!8AOI
%B%^?6a<9DUnfAslLC05G`BgdfP)J^=<?EUi'aIBf#F4<H$`2'XJr"CE7>;W!1PC[-_56p,P*Hi^TLgW$)s,98E"GO18@HdgVKlL^
%o,<fFK/k8cd1^;l*;b`[[pI<V]UFmG;KW=9QFE3G#JLZcU2oA+ai;qZgef+mnS?#?!T&Qfp<!9DJm@lY#P9_O&)pG4cW]5Io<IiJ
%ITIQ_X7,2DMn+mT3r"\)$^;Gd8sL>=ka,G;H:jXQT1iQ)lR&1A<l5o=m"Jd4fj(Nsc8C!Wb.`Ck.Gu;1U.XFkqWPnd61V^okf5rJ
%b28j*AYH6um%J66LI7Xla`&sHMki@i7A:n`\KA,#2`O3sJ(.s!6:);2b.&a_E+kFVoL)iDFm8-ZQR=f,C8p_lJ"53^adK^Y4_a#)
%h8Bt5%a3qsEUL<;AhMtXG64$j%-I*N^14p1.YKm-&</Ac$=C@Z,6Vr$:%BfGFK<M/GT"?^?2d0(p!sLFr3e`'-r1O?>`?]d[5q/q
%bg[!u#hH;pf\ErdQ-QsgP'W7d^`-AfDXoMJ0`:F---A/@Q??&Y!\-!-;e=L51eDDuC[4"gKhV4thCOo-$BGYcn)WYkY#@Pjjri1q
%4Y<[;49!tNHJd[NiW,9A&e,8&]HT=FFmD[X1Thp.HJkI"VPm8Dn0X;C.TVXFY>b&u"htF*.j>H/>O,<T/1^pTTnliMS3iSH`r(A<
%`n'r%0*Tbo9f'9s\.O<"8N<<KTd5@THI5tFL$$H;i0Hgg:i+t8#c7@"nA,MA6%<9`TiX2`NRht4agLhh%mR2V/LE>\RPsX-Dp@0`
%[+4ti,0XCIk&)q.5?s(A%^A1]G&p:e8[<brZ)=&@<9]#Jns-,*X;'kN<`uGP8@lecs&=?t_:D5L!=Fl3#XV*1=/3rZQgqMR<eaMh
%Z\dp$b6`17e<J.&[?/F$P7'R-$.B=4Eau5bl\2/Z/kdnV3OS6[V$Z6MjNJJab)/0Fd@9$=h,TE"("j4HG!4$M%GRi%^iGkl&C-a2
%>+efqrb47nmCcEIMD^"+GqR>9DH7X>dn&(PSGr(^/Q-EY8tUV2YK?.M8K2f0p4r]HcO:5NS@79ol6Su2SQ<)<C-qV,=O7nR.j^8P
%0hN>EE80emdC&C_S7F#n+Joho9&sJ77WeXR[.1K7?9u7=g"+F62=9Y*31'*ZLYmk9i-Ba!GAY2p</0)TajCrJ?CH8E4;TgSS38#e
%Qm2_l18C(;Y7Acg4+-HVnQfhsjVL\[3O6mLE\qrj1;>gfMBVu=X-igFlI_o_K-o,_EIIX)f!'WZ:[gSO&!g\rnC>-""TMk1Z!W_G
%\[eq3k;$BM,KbdE8]uKd^C%Hs8pQZgR`^o$VJ<+ccdM`sR$^3C),n)]<$p'.X\W9!,%)JP4R"$)lBZIn[fuCY8&QSU$EIAS]-nsY
%'=lOpC`muPnrOdq.ST<sQlZ`4H:AXeVYPY#KAFu=9.t9_e0QV^?K%mGBo];HDjdY652C)0OQ&_#;K=F+#DcUH/l`c9aRmG-?rl6]
%439KbOqD0]\F/qY^+F?tW_Ysa&KCDdraWls^>hG-[oorJ<`Po!.F!(fM*h\E)KSc\*u%kC@-(>sqGaeFBnQ3Yj+#UZ5<nb<baXl`
%+L.[a6u^5Z8c.!e3e2P8k-`@o-<5sENqBA<p<g>flRe&G3Hr56oClP5E):'g%=(eI]r^@NqV!%RO$BZ4AYh^&En+\;?%F]J^jp8b
%/c*qe^:Y)C]$BeUF6>C*g2]55Te;:D''6)<mN\Bfi&"?gV8im]>#bE:5`YI6$HsC\`MDeA5YkTXl6uT4_PBuZLLs0ZU*]/b@O$Th
%JUEbaF"eaK2L=^kR>d(c\XAYD7G='njBQla[0Q6(/iAs3#bIG(VXCc3'[g:4V3TP_n'=AmRq[B^lZaJF>h&rY1sEkkGkCK>ds,qF
%XN(h517$T/NZI0c$%\4*2lDko56%Qrp[utXGFl/f%FB5h(J:/eY\\PZPS>'[*%87gfVg7bZD[J'D>iSbbiU0KB>l^%Hemthb2*6?
%=]U;qXq^UqZ%f'W;J.&ZX]bY'^1\<580LXs.uV84gek\$G>a?HG`75hMsj]9(D`6[;IM[QKU9Z`Kh%iBfbTVL!$@6pe?E?](E'?s
%G,Vas4QqLSO^s:M6NR):'d]+LJ)_*"^b'T?H+^_Rk6.-=::'W@1$p@MnA19'+32YUjk,9Jn4g?JgoG8&c?R;+=knL*m=%'.KEm6Q
%#%r.f+_kZq[o,W.\V=9r#pAW*Gf>(eSS\!MrTN6QgGl*87OOP#Rn^Ug^1^co"8"<jEV\km'R*9qK1"@3je<C!n`=QI]UkS``6>N5
%md?Qmj7H*lFZNa\@A>H$Fk=n^j&R1E%j)/NY;b4Zh)G,brZ8-_eLY[_mqdGGRhtKa\:YAl-r82RgZhQ9!U44D1sC*B+$Q&t+?5*u
%@ar>P98enVgmfC7g0LNZ+`a;oT56,7R5PNA>UAE%/l7oLcl?<b2Q^s_[#G8==34o56tA4/CuP>?Bc_&37Y,S)EfJEN^^F[+d`\83
%jFEO9q:ili`$9@(#=NjU0/RM42LKRK[ui+0VQ"H$IVJ1Y^SSrYa,':P\I7O-EPnTIkr/N_C96^ZETqN.R$(Z0D8qc\6Y,QSm5cnC
%r'=am\hEH+J+6*cYL2c&`.9)&N8i*h5J;NXqE5%RU==gu>A^C"Nmf%,6b0Y+b;ZDl&GD%RR!^CaBGU]ci.:^6^+UFEXOA:<-<rl(
%fBC^u?R%Yp,4BMM3)W$YMjgH:=T-XSV<b]cS!L/a%=_4GpH+fK21HlXAmkZFb$Icb\O/Js]bo9gEMeY2FL6sjTt/Zq_]Ad!F8tQC
%O!,of\cfB-o(4\hOfWa6F"*fOD.LGZNW'n09GeFPFA&e!TWTo[lB)mC0UX]!]7;PGS&Kii-o)ch-R"G+LfcS(Bc.chXTG#'0O5\>
%4Yi=bNld?6L5B=D_r^1Y'qu<kq8PdUH?%qE!mcX6^8@eco>gL;&TTa!!^Ze)A].Bk.0>Xb9!G6G]USBLRO,H6h8PA8X9:JrN'[.Q
%8I>8"HF2dC1W2Pujk_>^.S'KnHJEscM=\W[I&;:Edc&khp!_PH.S7$iFg?Z]`fqTFh;l5sUWZnirZ:Fi\(mUuW[V?,B"Uo+Kk=mr
%;Aq89XTXRZ2&tf[AmIMRKPL[Z$7Ea!Z'rP1qXJ<lGKhSu<Jf9"D3hnU!j7?rFQL3MIQ#*;Cp"mO6m=QqR8%KObnTMFYq;62]%]o'
%UrprXct(;D<1@e6jd$rtTq<33OYK$ab^@.K32lDMR]mZZ6g^Q/[G,eT)a2>1Q'bl"s2Z1ES["d;=EM2@Z.\JCYV44?>g,9!$nn5Y
%VC]k.QgHW&-U5Y^g6drWpZ(A)>*mAOH9!:?(%OXZ!%;]mdsh9N.1HGO[GK>$cVGeNIH-$\DAj]b?Y8/tao'Vas8C\F(W3)T.\0E/
%&AX4\7AmK7C>Fbs<93cdR5<Sa+UNJXg67q@^+?>lZdsCirPq<1IhdB$*_E:QR&upmSMq"37mr=B^+KbG3)1'k<\u$KdBh=KKUHoi
%7=)-q^TGG0_5Z7r,UqQi4=>)i;tD"Hmdo'&QsBkPH?qOLQOVC64>fCoOH^BRZY,j!?[oT8,+Pq!_T/K^`]tSuHiUh@_BT-Q-'rDl
%UV+kTIlr&Sn]e-jPVO5q>=O16$JK!qC'@n&L1"=RI>#Q^.>-#aT=03,n=X*6]&F:PDh^f`bspabAbhC,>F,;=0GWGg$0[U('e$st
%Ghb8urabPHam=RFjfVbW%;DVb.mOOa%%B:=-!<3N>32e,VQP`jh"KNFFA&I*&g*U*,U2ba6NX=,0TtS.>T'?\H,Br>E#r1e.cp7)
%+Y`?Er6Z2>Eu\lb8]^Y4:*>%0mPD]SX>AgMQ!QajS;#ep5,``iQ_guke)>riP+oU.r\cOaJXp.&AlL9;Q=>VS)ZX/;p'EBq\[7Bd
%)mYV>(FB*GR#-^f;HT?c\2<Bto9SlX.2ZB_mPZ)fS@9kk^@?i_\gC-rQ3#%8@*c*E";^R3?@-`p:i>RnK)&".^)Z@mV1#E3q`K.2
%D`MOj`sHm)'Zbk>oACPM`EjghBiKdb1'08C]/Z'fZ<K,]_!S#?^D#tL1?6544cBS4k8b]*c27WWBdls%^G_B=n4sc`XX8Dn+BA*n
%+jVEU-JLDCmLpj3VHjrpQ`NPA\LWH4!e6fnC?$-Xp:j;rE'G!Z,fu0f4F9o(RE-GgCl@*eH4koiN2u4%D4hPT8PpBjVgR0>Yp1st
%3#*RL(s=u\<W^Cfp*-V07KN>.85)"Si=_@X4:Y*Ra3tYYMJ&+X\I"XDG@OT"^T]35Ooh02KN/@G]AU`9Im*R)W3*$H:HGo#D,$10
%@d&)i12sm&\1jTI;m/du+P*RoZ8or:n'F#8SEDRX]^@V>&VsBF(:cnnnu#1sd:(WUn\b9M?\5?n4(3r5>VB=kE6K'i6.i)qG.*`_
%M6J&OC2b'VEp`k;FP*Lk*u-IFL,D/37G@\B!jk@<QMR^a"Zu(OG.T9b-i/;M4XVc$7\V^CiYO$I0[@u?[?@k*b%C6QDje*1)ZX^0
%,g;:M;+$)W,T:PBg3Y*[&M@si8;K`<&uPR("A!mI8A"%NaQOXn4[SP61s&h9^^4iX!Ssp?Ml$@@/l5QUM,]0WoQq%+U-`s=F`N&a
%9o^7;h\a;5IAY.2b9e*'31]o["6\P5\k^XM&BYI#R&%gIaS].L&9P3QJ:9?dgVXNd()A%r^_e6'5>ceh)dNQ;#P;bTU>3l#3'h[A
%[\,mQXG?$E,B$:pF4cG'$V:Uns3mk-h7UXOkq:N?l'B:h*hLsRT#I)3W#2G)T6A<422741^LXQZ_kP/SU+4c"jIbT!MdV'Bl]R#1
%D%Dqt1XO']F6e5C_(2'RF@Q2h:4`!\g!DS8<lK@U@tTHo=tfW4Di*pH.#fC8bfCZAD;eW]LBD.(EXu5<n5=#m5sk=k3'%Pr`7u%s
%,1BZd3)5OY,#d.+g_53OPbE\\1(.]Ng*(*rA_#AF/q/Cn3/Ea`*to7jVHm9G+-tHl_e&b,J)=B`l3,`KCID<HeHn<s'&&q9]:B&Q
%W6sEP`E4b<'34;^KS\a1o&H(kSYaSMh.5DGH2+&I;iFpXE1Q>b:c^88/'2)?CRN;2(P:-,_XaJmL6L#Vrj3`NV$Q`WQh$gmJ(s^3
%o.0-*CgPG5J_6J)e0+)OqI4P3??VTP&d#@[KC"nR]u5/sl+$oQ4tQo_U&;Je3"oDFZ86Am`j'5BE?i*#/j4K"Y$B7@2B/Q<!0">/
%DPp&)$C1c0pOXn3TeGaOdK4`0=VsWRgJ+C"W198FoCr'R).'=]ngf.e`r>LTqmb1+r9qDBWuR1=>V*lK*4m4,M(q=M=Sg\<8"Tl!
%e8`,K5L9*<J*^G(Ion:!mRjZ1nn%$8MrYOM((DCN*n#.0X$I?fohAm)8[@qG8Km'+LDMh&_c/JpN:b*](NR]gCEm0<$%IY@3k4C`
%?TtEuYUTQcKQ\AkOD`MKhW0O4NLYBhpP2SbKpAbb`X@BmgBt&3LV4P;iai#Z<^`@".s$/I=_S9kJl;jYTC#rRPDD_\3i>tf,FX2n
%S"dk=g'bPkKVM;_jJEN"2Lt!1jPiJ</E3r(%X+")_`9D/1`YU0#/,S=)Q2=s32\E2POA-rQNlT*'%="pbKa7M"9>*LK`k@oSs][I
%K)6aI0"/Ma_,m-/G6\qU<Y*<ncD=)q[S3uY@.Md=KHGRq.YiDp]").\7H?ghZCs$Z5Y3V5JGV^amCB1\1'3H0TN+[G*s=9]`#^X0
%T,Q3hBqB;85FYu6rnePCqA7If<%!Kf$:ee]S7<H^\d+td1k*4+YAkFlp-G./<SQ,K$B?gkh(`0S?^p08P*fd%1W7C2[TcRshsOi"
%+N8=.@a!difOq_Iccdb-N,LCZ30/2Mi+[/e>[pL+!o=:F*7B&o==:VlN0]NI&OcM9!//=diHj1smi'E2E>5gbG/5LiJqGKrPn/tf
%E/,dgLIKpA(m>fMnIWhob4p2Q`a7fnA%g-tTXs$8iu,X+aNd#KjbcSXg4I2Raa.*-$gR'=Jj@;LrXo+I681lS2E=D@/-4anT_'^Z
%[ME<c\]3P9\<7NY!2nS/XghSBmI6FHJ,l[&jfK\-I[6ho0ueu8jKX$8Wt:'K08b5C]1PS!O7<7rX8OrT[]?2faLjlp0\7(iJ0p2N
%2@'#l8;Ra&'Pf.2F'.DFX:>^V4,*`#i:*Bl!&chcDT/PU_Sn3HG!UWC&0/_GaZXPH#oI/kV15ok$.'O#],7WA*:c0i`YX(14r^Nj
%6$YIA\$Vb>JRnFY=N9o^Jt_;+7VlTdB=KYd&/N((HX';:M0P'N7$J%@@imLfYEASZrTsG$1KOP8"UU"[F`/PO]/5J\?j287>-5Oo
%;*[3;pt!'>GpU?;U*Rr25;(<MP1huU(iZaj`:bg##hi=:JhPEVj;%a2H"+E=^5tcbZ#O6C>QAOLhZ5nGA"D6@IYddON</-\H!1rT
%HP`1D0HTd.Eh#C`%W3g11/OMYT=[TAC`3D7R?bsapsO`>\m#S'D74$*/HY&X]co'i^C3(OAk_2bBR&0dKQN"E.ib2iO^60X!2Q!I
%_9^df&_#[Z/rhj:I48^9)3=%d,%&K4Q%%NlLZ'&krZCSs6ML&5_N`r`$T<WWJ>De6LL?X2@=U,V>D,J(A:*Y3lRkkl!5PkV$%NUr
%8=Z?=9,;ab^Zm,DAeBp/?3["aPLo>3l_sb?inr@[5Ur-2gZ)mZI4+.[eomhS_tq9)_kfV4_odgWHcR$Pjp_Wb@C#55_"<N<hiqO:
%4J\`=#;NL#DMXiXEG+ef_F5nT!D]=\)H_4K_;/M(7T^-2;&C2uZ7_kbjZ:L@l;sZ2<bqQH2`T@Ga8d6T$D?-2@a"4opk5W1!SS_@
%o<?(WGk^U!oP1[<q,CS)15p[V;a%bdO8A[#2[=^DT"c>UQS*\\+4%(N/#Oi9Jlb\:_ZPCtnj:fNXX:*:X_fZVLUPjX%o-BUG+qa,
%MiAKF+M<poUqmXXRo1+I:o,*_J0#WlU/ff21)?QZ.<=8t!R-kVrREh2!T5qTiPOp/2`@@,geA-J\*K!Im1'j>c6[9[k^SOtBuJo#
%ROuF)l7&figG*hb9Ta(9q*OP^R,qd?NkN%S'>NV&cpnOTqB@%P=33`h,ID`=!oh4j9JF@Oa.=t30_.f9_I\WQHso*3]'5,!VpQCj
%W=ma>.A3HgqnCRiSY?.amt5#]aYr=?Zi1*F,W;T9"$o2e?Q-h0Y7.Qecp#9s@BqbQB%5rkC"X1e7;@*4)-L=8.0:XXgZV`.f)R<.
%5j:msr%Mtb=Z`$I_3oj>3$bu;\5mp(\Dr9LhOR)._gR9a;MU0s^n<d_Ie8tF<dQ8[\Sq8Lm<-(SoB;6$A2/"D`,/JCnO)27i+*am
%5"=XNIN2&.OmO-e4=k)6P9Uu'JX4bA*[u&1XU:Ca6l;YVJd]%WnQ'4;+Q^*ei!!YLpt)2VfalpPZ'oORZX68)FrnXBA2m-'9V69G
%^rgIN'PC"-%>'!P5)0U;$aOCh4Ed^7a)^.!,0RnC[+6)Q+%mo#C'R%97$6n^T2S#*@I\q4^A;\e1Lp?#$9fSb4T&cNWd^nr%]gkd
%6K*jcZIj0+e_AS&JRm.#@V_i8P`#o^'S:>3!Z$Hr>;\90H.7,k=(SSuO#A?>f_Up$(\/KRZ@]Wk+ah.o_"d#H9#fNLQRVJ;W(Mjm
%P*TRHCs@#Doh0O_*mL%h=QNb.//PUUik!?E1GTm9<)OO5nt@-8lH"qmCNC((+CM:3T\+4W<#WfsX`8sQ1Qr"QblPSoQ-f/f.e#+S
%IXC4A9^WI[-_Di(@i0#'GZY\eL"V\4OfS+Y3k^"oeZ7.fcg),V!ES8,bEB9E%)?E&jI8n!S>?K@jARn%^JFZLp(]jo@%@:cNq8LA
%G\/Urq56mcP.,/`T[aFg53b-Qc#=4',-s>g0qCer!`.k!RET0f!c+00'6B#[9MBpdo8?EC/-XY23F<+S"m]^U2U`p"0*'a=#VU[)
%]!B:kKiGSD,/p+&fMc]N7,TXMq@l\jL`t1K_A$V7`qjr*[PKUtDSs!nXRIQbPaCgXJ<LP:a_#tHk/D]rED^Wl?a;fMD.jDWnU3Kr
%96VF3p=Y1C7BiVOWQq8,)+O\V0<K-\J80o6Jd^(?.LJF#WE?^5/n]c>"]9#G-9'73\VTg$Jm0ZCmBk@KPcn@1F^r_R5V1d!Jg4K<
%B3Lt:NeOU)X4?AFNHcc/,_=jc:[RsSEa?;Jk"lDiY17<TCoc?DWOW=fZ+1/rBNnmgj641]HQ(BjCmQk'Ab/\$&TeFsaA#M^\pWI[
%0-\f^!E3X;Bib@iar&4RX@uAQO-jc1-Tb(f#\=AXk2OPWfu,M+BmF*.mUaR)D7gg\ouEd]j7:3+hYpah^:(9V#fD:^oX[H-h77C]
%]d)Kd1kTJDb&#0A=_?%T\ba%S2+T^f^ppS#FU,c:9lON"B5@Z=6GnFZVp/h)Ut+`LbMmKb"drqP`$S]P-H">\&TH_iD/5']5a3:n
%fOA3VS&`7#V\<WtnUI\]DU%]s)(cfZ?.&_":<ODZPW?43J$<gK%PgYCPY0)^*1C4E(13Rc"hF9.4P/S/5X;9QJcW;;3*oG)C`'Lt
%JRRC-boSh>s2I6Z@c[(<&@4[MdjZ+i=G+_trj^"k!7gUHBtA2,@cKgtU^Kp_eh6"oNF`-Ej7an*":Ot!\3VR\$bZf(BbW$H)$\KC
%>@]4^<'4<'/0tQ!^Z_r*ob-qC]d,HXE&UY5KI."_-\fBba@(dUhWk>Yk5&cO]f&l7F]6^u\=ZT+FIEPO/li*):Om-Fh(iQI9;G0#
%G+eO<ao]^lgn6JfjKNgZC`T-U(#9WtbhJs]"qm\%"TVaQ^*H76W=ps2mS*]gN/=E&_M1JKU$qGX_[MXhTq*.]D@@UsnEiP;Q+^kA
%9n==s%R58"!cg)S8r;[i01<+dGFjgSh\Un=?.?Y(E21p%%$?6TQsVUl8VEI.6gODp\n%=m;-%DL"k?3b#Q\,>(+,006g8F^'TM46
%OG@ic*V]eJXb7Fg3!@*==$DaKi^OP2l?W*_<kDEC/,-7R"%,tA:/AEtH2JkQbnF`6*m%mA4HE^%[g]7qWn9;K(HB*[27L<K.m)53
%3cV#b.2I[tL`;a!L<(,!.,@<P8)JI>Bn/'-i]L<EaAB\FXrD4S/.>V^Rq?Oh+6=uR0PhT8ZVLc0MX_)NoL3+V_>B8VN-8(@#E'"#
%?t9-r[q^U'ahhet`:#B;61Pn9\]/So.K4AoHC[@K'<4G;U'U-k9[oX>DZPjDTF4#&*0:G7!+TA1VX[X>p-X-VI'*^/:7tK]c%B\*
%A"'loi`2kaLBU$(D)/\XG:!kXZ^Bp)WncN8,Nt5\@M*+)+\q+3nL;U\n6)*:=/;*E=<<Y(r9Y02ms*S9$Z;ePfJSN$rk\F3CQrJA
%FU+h0'oT&ITj"aLCo<faaek*Y`pIr-S3((9Cq#,>OWDnqfHk78\GIIV']ATdXC<6%/F"Y9>a-:^n?JNA:us3rl[-C"bXCRVn?eQ+
%Zgo=pj@]CD`^4aGj:!$^a&.PN5^\#&#^aA9>4A#eWMfRZW>i<Q!&?V3@<]8(RMKjf6c21m2S]b]>[_iAc9r?4eG\/Q$j"YIE6qQ8
%1JlTh_Q:[:*+2-a>*E]?/p,:hm!dKcCp$pqlWS#i&oiMV'"ndDQpu\U''4!$.Y9]To/ki!5Ju>r#B`i<\O\%(.S$N;Z:IqI^DT^(
%8CG>)/-Y>HcN(;3UKl=CJ7`\X6&"S<=F"cke(pLipA&S(LA0>E<Z`&a(qLmaMb53.NLq/2Q"8V"\HaG2U)7@RMT!XSNrhn41"sPK
%#8EWLL<!sk=iJ=OgTCMH4G"/?\MhYB"+d5R=Mp>dCRtpY.V5neF'a<f_!`4!KB+$t"Y=gq<p2NEK!^nrjh"K$P;X-=W$&Maog7X#
%d\.05'nhKQNY$aHlUMgF!6#p&k+t<K+5sX`h?SrW#s8C*E*'CH+C3>OJSrRUaXP62K.G$26me12/?_UfbHHt>6/bn`EdT7orudu4
%\M4il5sB]Wo]lN[L,01+6pR.)Jo'$l#R'U^'QYk5ktoKT7-D?h2=*pm=BXM&A[gBdCpn:>aB'V:<CZdD\kAP1]%tdp)ZSF][VQs_
%-gK9'9urk/\Km%=E/kLO`n&,q>>&>qDQm7]$T86Pm*U"PR`BPS8Ja<qerQSIO4f>#-!$hm(@+7E?WFb0-$slukkLeeVQ(?CU_pH6
%bO<mq9q8PTltT9=W/XMW9ED!]=.SqX(&6:-C`=cp+NL&fkM3/(KV4E.C3kPsUZFDfTfOrV#qmM/PJWKZ3uDKrRp5@(C=@WQB3Zu`
%+;sofTYl!#P$M^SX;Logm]GUjD"B0mIAa?rnA>,?QlS,dosU;9biQ5]]Ns@t\m@d@QRRZcJEiD2d\8bs,Zj)e_,5n::677;'ca\F
%&V"WjK"Dj#8+RBs.k=J;WVR8.@-\i;DkQ;/ii&mjbU&?R+7;I`LK@Nl##t<KOiFtdXRU#0;6Qr`:bT->B0m[#k).di[*j./\:X'A
%/3p<ti<NP]"I8nl%4F_9[6_JTr@,#t;$mH]Rn`D['NC%a>45eBM\ZiU`.-C-P?gm@E'6k!n\?\"&<5.l:.G&p%9:76)*i;A7D4Es
%@9%:c@Xfp9!)"\Zb8GO-)s8NiJV`j$YtIX=ecBcOB]<R/:ahh1KCG$_r0=%F`+DbiQr[^FE/lS0/nQL4mV(E5,1)P9PYAMC7,)Jf
%;+TfepUNt,FY#g,4<';,'\?GKMbh'@eG"Molr;*0](L#C.O@OiF,,##ZL;,j[M^+o$GN!e/YhP,nA6CZed_9Z-^a[3VD0Bk:TmqO
%q4A=?H,0_dW:/[V#ANbRlMI50Zm^ffq5;;Om"?a$,e&'6J+XQ5pLjap`V$T4/7\B]1Gpg5bTAO"-#4/t`P[2G]))OIOi#5KK`2!C
%*h,\^(6Sc-+T`Ej;</Zq?PjC8Bg.peLV`,Uns`11A$\!tilR4ppu#N;Dd:l)]0P.RK+o4ENmLnt#`43I?,+EV"62A[T*"#0[_"-&
%M69!b@q9jMq]%]K+\K.:iin?E5S+<u3p24Df'ianO`5Ha9KkY<WoX`]^9%eUT&O0,D#r]54"Bkf`V"C8b8KH>K^R-jkE%noa2N1$
%FCX3n%gQmt(t46A/)7#,+,`a)4:!g#m2,PdL=:[R[SroN&[l#j8iac9@7G;XWpeKf@n!>52so1@L^I!e@W2GbFa[mjcqSNB"''KV
%9mSX@kEBe7+1!0V6RUeMnth..*IsZC(rO7`ciIc6emiN+iTNT9<PY(PnJVqFXW?;X2;D$'?^8LDce4T\4.P+Z`IgB3&>V%=!<[M,
%"/r2g!<Ot',7=lBDTr@o^\^'/q!Ic1(oLkdmcJ.iOhI;u*WqphD2inGr]BuA4-n@SA+skq``g?X%]/j):VdR2EV.8(46.ir/GbJp
%-kj4t<*Y49aW/KXOVX4IjekQ2I8?"VGX&%AmWrE"Xu;rA7@\0pR$Qj8>ftt]&XQmjP6ZBTfKrFUluHn-!\akIH(@2OnRGPr1rj_I
%:E+J5ZJ7\U?roNo=5:%fUYb^O71Y[!h7N`4ES:Mf(!?Rh/nCduWctBFO'j<LE%S9tkcJ3nUr*Ot)Vl.4<"A8.$^3E)WC;/k,X$Vo
%no2ej^h%3'j5DBX5.Vj3r*;OOWDk]jX-^1S7igAb,MI='].B'o7+k^0A,8ml.VV+tCMR.M):9,4qq_+dfDk=6*Qk<P'`#:<dX;Fl
%.emLU'<`<8CB,XJ6+j^0YnE@AD?TLoE)MfF20f8^IGoOOBu`DOTeq.);LUfk_I8tAN+@1\843PX1A7lYPcJ:FT:69Sngu&*#=9=U
%YoXI#gmbgbD8/?]D-NN"aL8\cKmlQ[NKYk'0E=p$']S?3S5<%>/]Q(a\E!'hBK]>Gh,*<[ZY[>D$K3fIN)T'O=*XoR]V62m+t/(1
%)2jDU2Y*<r"G#5-JDOu1A"Lr>'hPD1R>k$hQ`CRY><B\GE1Fo#h(]e9iWVTZgsipR[QT)apdT33Lu0LK3HHKt/Zkb335-=>\8bd)
%lSK$cO*3DN9A3KnC8bG41t6skI=EJKftVh_5ms5,TW$H@P*I7PX]\3rdt5pT9FGu+UMT^(`<5DYj'EJQc,:K[;%22i&]SgA@6c8#
%a#V&^fth$T!9M41%Ktfpgk\4L:0m@:(pcM4@'.N0I/k=ICdBqH!.A\lb0Pe+/"ERS3gT8b)86/l,0>1i-/QS0ns)MH$g6Y;:)SVs
%KI>q5#C&A<m%4FpmX"N%f:`3L!f3qh3,YZ3)O<PWRKqL8&MpMcblHFnD--(dD4(U=VscUZ!83(KfD[ZZhY8crRVI/A(n;%Aqc=*+
%]BoSGaf9l8g.pDsdmifVrEM+^+38[@G;5IF(!.#0<cTqG&A%Hk67QY+g.11IKG)*M3#QOf8[.T;+mpFDNJDV>"EGrLb)Ip4:eCZ^
%WE?^\GY&FgZX&QUK?'bW"P,HS(&bd>cXAS5p]S%k<cA3@(65heD37?]WTJ)AW`oZ"KiN5pg\UJYZW#JV)$/5"f?ZNhqB2Dp[csWG
%H.=WYZGl:V^i9[5eu)_K(T,b7a&;IG%%+$SI35ZOA>`qV/g[clUg_/Sf[ddfld3;')si,c)2$(/1CPs*!I0\U"*%<Uc#X5uXDeQP
%R4E&p?$1,K@<>sg_ud+oRDXB&6JP.nkB&1WiaPZ9D(M!DGpl(A]?qim<""Lpna3I.%;CW^6$5RTjkXOD`P`rII>A^.,u2]pLLOo5
%lBcL<Jsc8gmeV@0k&q"o&O4"4]8hl;QesC1K(+<CeSFd$1b8@n`ME67b^?B=p?+*Dor*$'+3EZ#(FF_oQ6D_2&QOr^"uBli62l<.
%gR"iJo@61Db\^P\ITSPdG8I4.2VeFN0-tdZ7Zgt.T<kr>P_0%>c_t+u+c@P<k>Z:63=Fo5`]'NQO$NK(JuZWET.8M<3@_<J(oM>I
%5d,YFM[hCes&I8,Y]UtD&YUJQ;+u8&Tn<TE.YtT@<j6-:[Q'Y4d3i'NH+q#"eWePf_WYCXq_],Q26C:5mZ6Mo39*U@[Uo4FRj!uH
%jli8cAm82g^Vj`'FJ>d&$.5KV/5./$k):BU5g]@s4LB`6`rnIUN5L&R[P8S0"8(IFdk-ZC"`QNC-tV@BG-qh-F10Y%iJLM]=+2IZ
%RS]`EEJ)hI241#\UB78O1/@4Ib3#"?ER7.BfVj*BNs)k,@pN,%'Hg3l=MY#fX#(L52Tgr>I^#nX/Z:)*K6V$:!jJsAI=b.Km1WFs
%k`H!4=Yq"-ETq.K79-=;4,#87c?4;-%973/]Rm%dk;<Rl\^8V8NqjZedQc"UpPn:b!]!QaIa)G<DZ8&W6hBJG_hYGsi80P['P2A@
%AYG]r&3T,B4ZCtZ]l!h8>*0'SMp4j,C3-/QXbD)JI+Ut"ObJ)e(u2SX7rDBL;`;sb]!.GL4f@4c:;n>a#/NBX84n=@f,a&50EFrC
%fB3(e[jH-Os%CDImuE:8e$7XT1Cr4IqP&5\bQpClmEdqI%f0_B:A[HN@eMNTDs<mg52C%IF%'D?>,p<)-JFNI;-;!(@N7Yklr^,r
%l_PdY8qsD"Z@X/OB$2>a5j6pmlC#aK<HbJX@L4uqF^SfNSB]4m4j=D)CGg?F1Rf2eTeATOf@FlD2c\7-WD&3n>:[\n9+^V<](B8"
%PN!el*D?A#hoEh0kFqM;[M*'S6+5@s-sZZ_aRYDo8=1nmb&o6Y!40-+l^hG%Zi0_,h1W*s!1ieOnH64pGtSas#9KVtf%a!$n0u,2
%TnPq\VAF$"NU0mOjlK_Wcp(QA\:Hfm5rB2s-Kq=OSl"F32AT/2KT6BS,P4YqdT%iRRfPkJ-R#l,!qpAMrK'f304n/IW'D;OU\])A
%=\r^3'dZ3%.gjQE5"WnK#Bd2:9#cFOoSEk_A5;kS*-CEk#d%24;LJKdL<BD]!9%RE?iF%c"k3B(;pl)@D1c#(Tl#=>lG=Eu9\U7q
%/I-n1_W07$-8*Lg$ah2(3<?qd6puercEtY(r#&!9AaH<_U"P`bHV@h"V%_Ppa`:LQ(P\(<:HK;%E1'7H&dT9X$WOS)kVW6S_k#8g
%,m=.IAe_kE>I<1?K<GD<rg9U^Ga=[WK1a+(>:&3Lh5)SmF3Vr=cVDe6j_=)93-\ff)IO7GruNU-naut52=p9Q%Um>r^?J$mMEBO,
%J75PVLBrhWQu#hl?)OD0*]K]I`n8&DYo'jMi;8%>1hcW:q+G+*Qp2oW*bpVT9TP"fBf3N\Af6LLi"D1pj4NS8A-lY?PfbIbU&_G"
%*Z0^Lnr".6kRcna%eL,@[9TO3&LpL.5X:Ab9U?Z1:dHED65sSS$E98_l060(#T$^9'*=::8"EPf--r=fC6G-t5X]+F^O?PHIn]`0
%4:I<kB%77T>0uj=>@Bq))A9[?c)$sTGgc$V0!&Z2$:F7NCmS)")"JNGofB/+Gg8!\+7Br[T(Ct=[!LVhmm-M:1p4I-iE.:UOO]<j
%W:XAM#+@TCF3\PQr5*uXJHT0DN7f.qAX*T_")P4ZDsYtm]+sf=!.\5&0`i)'09""SK\k[5?GqVY#1DjiH85dKU*:>&jl7P]D-N8o
%GZ&"4d@nU;^aUCdLdDQkWKeZ2\3SL50"&=5+<S"D)&US4bR!nC1.O3B7^l3'b>L`-eumfl4^S^J/5+m+mLiYqqGrnp<U"'sZh3gu
%%h21!Ld$&+'$bd>[V<G:]U#kJI'0B[@G2a+i#]mpT7l3i%-o)k0A`bk<71a@\Q?!N-%79M<tdh3?qRYnBZ3*Me)2^7LXg[U/t3F[
%TV]bN7*9`7VqPb/T;^`]c+G"13!(!(7c'GecS>BHkeHdI?KdPiguES;LqXfm:lB0JK+p/tMXgj!4i`A&C36sZ%$dPO(]'a7\4kgA
%c2Y94%W$F76,BiHM^^`Ie[j.QfQ?CJMk?:Ubii-='dj;)3WRdj8I4r(Rh\.3C1_Ttro:AFBg4aSUa:sZm',Uj6mED$-l0aQ.E,;'
%[pju8-h"\9^%oCFi<-n`<lC[mN0FTTYTj*KC_$XT$'p7#(Ws--#UOY#1R:$;9'CL-!h-:JJsY?"1I&rci(5odK;s!5X<3h8`*H8h
%831S6:WGSOpl1TY#!$98Nc<N_q3=HS,t6-!*h<FeOH!qO5Zn0\ZqUt$M:4fGOE'L.57.Js-+CMcL:F8#+KKVu]*RI8(8b,!NT>j)
%I]D/3HYZOrJ%P300j'P`!bM@VFpZ6EBM)AMTRDoU,.R;5MeCgkI(Nu4);NA29+/W8#<[[ZU?BL:9&Nt5Gni2@<u3RbJPotETcjpI
%*hSJNe$7O42I'51s)j,ORZ=dH\k^Td>,[+*b&3*+KYI$[4Bk^Q)<][OE^UF7Y3f:FVOGI)1@pb8dL)h(o2Dq:DB3@'7ZTkB,]nua
%HbMEiQdM]o:l*DmPsYNni')^V>68jf@fqtd=p<PB5f"p`'emTXQtYW?Ti=Bpi3AX`#)Jbn)0qnQJ3mC)Y7a_P+``[61OA]!!(c2L
%U:)",>%tA(_S.1-#@o2NMSf"e]WERf+;>>5WX\#V'%hHfM]YQN,Q\Ucr<HW$BR>@@89daV661mX2IQd4*][&;=T:)Shq+^G'p4k#
%EpA%oHnRfg\N0=cB%pm#DJnJg#:M`'I>P?$)3X3d#<68FW7Y]^#W'Z^\:VbEFJ2Gn-K?Eu$aqC"*8o%M%@_.DKRmN&e)SQN%cl,X
%h<@Cg+u0diEQ/(u#RfZFS."2jV2.BJfYqd!qdSQ:b^<WW\JMd;W^^*S</G@n-I`?+0Qi*WU^B2m`9S'bPrhXUj-[&)8\#4s(TTVJ
%7N=-J3ea+BNA'@5aM;t&d1S"E$Y(c)eV4r;E%,\^87-L4-n2)B\;:9+X\)\#;P@aSdqQApj\pXuNihb;o6i"?6u`]-bAD@kS(Aa;
%))T,[pCQB?M)3Oi"5%`P%'klFYnj%OD^YET[9e_m,DNgM_2i?2,a#9qG/-Qug]HrLiZEaX4!(u?Fbh`CE%fY_9CASFP2I;D(.p5l
%A'djQV#%^<GL?$FSpTAU)n=cfCK_KYY^LdDf?GEOh%a57(Ho6=YG@quX?<O]7<2@W]U2J8oaAhaa[D=`&iQI=TAhggZ#/RR.$0g,
%A[V@%TX611>^qqnGC2q!UFiN"A)%Dha!G/]Kfh#S^o&#ka2WJV"gaB_3io\8iQ2\;>q\>UiSfh61Q!-&i2KtKQDBlr2`"-2H7I&:
%ZDU=dkc':,ZHdN[S>O"6ih]KEEDQOtm'bVM6+dPso(]Wu:Yk1Y.Z"BXgZsB;k@HOsPkJ&P/5qQ^XLT`Fm=`BaRW^+b=\;=Y5>uY"
%Qu19!b/DofCaeA-%?oBGk(4-0_Q&`#i(@5"R<`*1F4*&NmhKHf8!U9fpT?h-ZRTaV@P3d"/"Q13[lu0.X+,*Iq]9-2"/7V'$G=HF
%7l4E5QFdmqm`js>gscll^T+7oM[]\bnl8)".fkN3LsQ7:Cr5?("'5iC3?.<T2.!c-jFCEiTZ^)9W4Fr!1Ph_-Qq?FIb`o,J:4J!E
%UM[%Ag@V*W1^<9+R'EapSj((p>)dCR']T570p")&,9Vh@qQ*3Z)o8173mLAGd8G4\H!RqO6#T'YO)*HrVn$Ih$>3@?O)m,Q/eE.P
%J-$SiX(Iga!K%ISQ*EZ-/Vun/(QQcH=Fp5DTMLN1ZR*G+<5,BmbW%4668MGqJh%.m9\^RdZ``;D&3\956SN\+69Y!Grrkr+e'blG
%m>:_m3J(T6j)f$Z"?4Vm@JW$Vhff+)P#EJLD4<e:cAiiEOQ2KIO9/W*j@`q@Z8bN+q[m[3\l#,bj'=i\X-!Z7H$a;6iH3Y]XKUco
%n;^7L*S0k*8mD%2n:Z-EV^Q_(YSe)gpG#malH>Br4pAm=pW^$jPbi<4?22F_2--ndb:lg,#gm*P>fQ>9bT#2*73WES3?)FR?1'%q
%MMs63]0N*6*n/n26I&-&:a8c4%Ib>U9$egfSrt9[N9S1"00`dE:(*U\qn^i]'FnMTNI8@Z.tedlDV&p1F7UO>a28p0!<-`.q8Zs$
%nu3.&NR^(GrZOAWCi-Wb)S*?3egUFWcaf*(Ere/'pH%'erKmsrR*3FR/T<5l3V;JDP^mG#r-a1!R*-hM&mY?$A0CNQ5$lH`7c6s-
%ich`>K\)(%S_1`/CboKtW#u05<m<)#=IVYk8dB68!96iVXMAp'9M5CZ4CX<0k_N]9%C&P,1.'"_]^qJp3r,FsC5@6:`E7jZYh\,P
%Y>aD.QhjCfLR[m(X]eXWG%6:DG*5;JFHod\qS]9fKocNT6H3bm^'8o=o#spV/?Vj/("R_MGG'R\4M5M4/3P[`M2qWjenN/6ekjF)
%*`sPPZN0IPNf$?>'A\1pe76k-f0'r95<pjI8jQG=?R20k(S3PXb2('%DHabH2B^m09HZ;+l2`3e=?XIhjJP_.ED&V=p$I?VJS^jQ
%2eVT$m2e7b2CAHpIN4pkZ58IM@f,L;o!MA#-ZqlU@Cb,nW,nT2Zg,S6XU,RF*TUt`h*-BB80e)eH7tdf7X*C<RY_RB.Lsb/PTYW9
%I342^4K%[;=m<U4l#\a.kIeqhXQVC<^TS,sb"b@`^fYB>2+L&i3^\sn=@)H,PR@p><M'81QNDae7q7/MYr\NhHoR!qYCq@#L-l:D
%:XS=7($N5K(,%UVq)I4JGRotk,Mgjmds]9QRtP<#Ait&9cS;f4XEb5Go#=G%q,A8rCa+q*L$.YJ:MdmDYTN2XT[ik,T2S6'c%N#\
%l/\[T@[@Vd-GHce-Y?SQ0FeLa4G5]'C*NV_Fn-^\h"$&B@9\TQb*#<F>EW:/^(2a#f`t1_-H6?lFSgWJ?VhTAW\T&Q]L62kFV"uC
%N(";&3^lj*b'g<HA`LiLUd_<aUqMR4`W.KZif%[!\fBd5rk\5T*k_*?"u'Y*qCXl$-/6-f)<=hc(4!K*>.p"5-[oRqDW#jQh&fZs
%<'?sL_aqeeGj!0j5e1*m:=lBe?H\Q/fbUrs(D!^2"NFIOdjj%Kl]>dCgMRL4`?p,B<,LAI;FB3PR=l"+fLYu`pdNF(j[tQ!3,miR
%kKTNb^W/1+o7^]R@cWXG+D3\qC0@Z.p**>8:HdEk+D^9:l1;RX8-><=#=h1cq407k5RKt`VQdq5@ZfQ84>R"[Eu,Gu?PC$V4P*O$
%+lJH+R,T<7[43F(``!`7c#M_P<(k`@>J9s25uikIeqfa""Gi^-_jMY&]&?<dZDh\X1j*4cT`rTf)Cukp*2AEh)m3KSKN]:7m3S@k
%1dl$6T7_5E-:1+Q%ikH(>O3;q0G7`#^C,6q'sXJS>HF_6f/ZKdWOm,^5n0+cWPZRo>+jDlSPOUnmagbh-W>:A^o$Ee(_gb]N\[dL
%^nu#ZJ^iXl?_mu9\LBEHJ-aI1d+Y?$KFhJ:qEl@.(O,*?$K[<QIhr\9>(P'$LkK3=nmR[!4O0:Z-srbW?p$8BTGn2"nR6u-jDdd:
%be@mL>\b@;!62Bk@"4XHs7Y^4If8HEmu2Aq>PUO#OHgkog&S:@?c>GYl@l:cp*dcoJS[:l*3!6!_%5o"LHK8-4OR4qEg#Tr4Fq4P
%cT5V+2WL16edL;661k'>Ag&gY9s1ad?ZOB37pkBeW[Utbqqlnk5De:Y;Z!*:WJhk]lUU82F\si\=;$r!897qC@Y3fu*R<)U6YDP&
%[89piliMU'*]SuFejIYFl%+FVNrmYlJRSYm+afj$-^aVhI.8Ch?#[/$Y7b^Dp\GPp;S"d'N;XN\V3"Fl2^@)ACSD(3i17f5kc,*G
%7-W4a?N7^.h\VT:<H9o`[fW(@M%2;mcEO$!a!-?NKplc%ZsjpqB327E=r.B%EYlnr"K!`hR#Xgq_e7Xai-$i";SRNFfXQ%;9*(>S
%KHN4h^#_WX<R45=*EmV&5Hg^GR]F3RX&,R;]F68+(+[+#r6B5/q>@LQh\Ru0S?Mpe^FD1D)dulM3j:?tDD-\70eaX&0F[Y]aCjJp
%OC,TUl\P%P+f7P)%F!(!G=_o5!):cL1dX&ceb1h_+-WDAO'-@U+MpV)SlPYCb3[.]i=*<B:CUgk-=;%$&])B$XZT*&,$0P5ZO.?W
%[0-02%b(\K+L:.J:r?/]r.RIbKCTXGbpWCd&(IBnSq$/Oo$UdJPE?Y/W:A9]b-kfPlrh`dq.9N/>V5Q/GiKH-**QFIk5UTOC>Psp
%5:4ta<RK_sa_IuDV<SHA:!ppiFfEqSOd<G)*(A-ED@9o.66><iB2mAOX`jfSUJUjAN#aheY$nFc$sbBbPAtJI-!7U&Uf&]^?:Ac,
%DVXs]^?$R9<A.'bq8Rk+NP>:`PQ/Z$',32A1"VdRj/'SC0Ff6C3Vs<aqLWeK3"KEXlmk?k+FM'DqJ!aLfS&fZ..q.;daufW$lL[4
%A3iSb0IE3h@h'-?lION+r;2"\!s9[rF=<^Sai8&OD:>RFm#&>LO#Gbajc.L^0u#qDN(e#"R(K?>Kc,#]QC=a1'.)XDM72>.bGAL!
%)6aO@KY^P^G)gt%%PB6j)<*T[q:MDPE0dg8#hYeE%$9[$llb,@f@ZQn0>od^JRj.iqJ1uUgP:,_kH70j<TP\N>E;BnTgC;.S$4)H
%8;6%.U]nge=&"U5%A-6ERai'Pj`[6H.F0T6T#5i]L\2>_nO%%V@MIL8:t]ag,!$i$#:m]riGJ]DF:T=f[3IDO@ec]YAOVI_LC8_G
%<pM(!jDm?#i8BBTkITn\a]3L8KL!5#LbkmrP;S9a@:D,3-?529WG:67_3OR%kR5tXJ&nYB2YrE;cP/$h%^/si=^'-5Z7HdpDdWi2
%FsCXG5TN20#J1R(V<Rg93;N??ohD>Nkqp?8J9tb9C,]KaXL6NoZl*XFQp/o@[:;_;Yh@kAi=9HDEL"Zud#$g_HtdBfD>l:7;(-A7
%Jf<\Tlc8r!U\Q(#Fu:-Jh=ULdKd5J;VE1Ml<%*AR-BSjUo;oZ`_>+e7l@+p+hmr"Q)+<QjZbMU?^9@DZ`Mu3"^hf,4"]qZ;$AabT
%bCu=c";RO?%q6t%n2'B5fO?cf9%`T'!o/c504Q&TJQBuRJCq(/XI>UCY3*1U/YRu"BS2/L@S&?p-FV0kk2`f"W`UA^0*ki&e\9)m
%6<g,T=>gLG`GpON(V:b>idjO,]iR'3;HnB<b>RI$Yr7!B>.Hbk.S\.J<2GGFb)m7-*M<QiHXb&E'ip(b\%2.F/q5'LYWku)P'AU7
%+GJA(9>W042/uBQ+_%ih2.cM]X*&Xg`*d$YW]mnIC/,si_MSlk=qb./NpAC";c&6,26k;=P:P1Pi]^pV.N=,GI::8%W4'r:iFAsV
%\p2]ilFMl]pZ8s:M8`UgPDR&Nl1sB6Hf&*9Qp?L(*LD>)^M3m1XH<[<jIU%>!TPJI0f0ua'gZ-745?JRV]P**%-Rd[:^i&Q9)YE?
%&YR,j',@#Gl,\f*bCb9EHD:0Mb+*72X1U.'d&U8D244MDBt=r=%m;TTH^F4.QrP&(^hCZHpK5><4?Yss^.YTIL`U^Zf+j[8Q^JoP
%'0LVJICu[s&E%8AFu.!r^)Yl1qm,NIn.`-`D3Lk`\&#9&=Y:04!bo2Urh\2"!H#1&%1`at'Ve/9+7j(FEn"qk=j5'7Z<dZSFMt:(
%#>*kJ""X()#Aj`\Yq5htK-;S]H<T81QLJZ'Bdf[e%no?^RS^jWHB8m-X3/l<F9c-:X=ktr##XB7kM28f5K<L9,90=$d+\3BQat*C
%=KmK?X!hYjNY?(oPi%XU'?l$*.5`G]H:Ob>HPdmO(YOnu"?$D*`J+]BX)mZolb#2,:!Lf_LM<"T*?Nssbb:hs>;p4mO^0+]$S'$J
%>"kQr)DJ6qT9ptPV/hX#7t@Bl+7$o@h4WlGL/#'<O@2!kW2=SGPj\m[Hd:nW2YE/f3cB2":U5r&RKh?lfl<$+-.2r1%B#V/JTu\g
%TYcN%?Ee#%SZikQ2-ca9VPgr7.;Ql!gNl3qC,KI>4Q6@]q?G11BrYD#DH^:a8$r\tS-1Rj/DCEq(KV>n06rqjf:FH4[I8W6'WRMC
%f5f=EJMj1g_h>kURXsSl_T(m;HSV:bQ(t=e%5-eUOEG_-("u!=FO=M`>E3li5fA@RCJ[]k;"Pa[];["8SD@&"6CqHfJ:l$>f]'\m
%,?b^^m=9M<B90K:j2M*,!t\BV6S8$)h4U!8fGL[5b/,tf<m9@=g2sF5VP4qVkfL%5.ll%`cjO<@PQ9%([9+XCAQ);0UPEshWJHdZ
%72n_Gq.l9W$E=78$o.171'4_mricjHZ%It)/D8.8De%dpG%4E?A,MF:fLoFmA80WF^3<aVWsU7,!Ga]".=hYVm<.&`M,Jn0Ob7%%
%r![#n2$qLS5heQC@i])\7)]_-<k]:+7(4VtJopp1>'1#4%nW5l:^hGCkfffD@(F_)aD-5Gd;p!_Adegb6!"`[auHA\hoQ7glpSRf
%UE$U3QdAHu+F8PVGVKr)^02+s>!%U`R,LZd[OT"V-H*-U[To`=USg&a?p#7tdc\dmO3)ZS>(co=3>>9\Zu%Anh6Z(NiYE3UZ^W(K
%e[e=jZkGEl&%@*4"/[SR0Jh[!^0CCgLS<Qto3Ha*oc\$!Dj+3D$6;`7D7dr/6g\SPaqi!W=nO=pF0[liYm`J->hYmIK;3M^P]?C>
%@`?3`LC*DNd/_o)rPJ-M_pk6mWO@LS0Td&p@9Y"r='fGhT)9hjR0On^l8IP.[kS7f0Z`UC2H;_s(LYOO/A3o[SpiS7V,'=Q=lTuL
%@N"PmMT:m69;$IbN%Y;K0Z2;>&_J@\0C-XD_Y!b?[<g`Z*,*$](,g=Iofp=^Q^&)X'sad=AH.`t*IV6Gl3>No2e%X+@*G*KOXBC7
%4uH#M41quU=*%XQD!<926AN/k&\m_Koi0RL24`]Fe-f>PK'qjQN5VJC8ged&b<5,teqjm2Q2RV;Njar^i(gM.9r>"%^6JA?d?kAO
%=#<@Z,#0%:q_sVTb3,S`gJM\<FfXT^lL<>A/V)u>G0eC!B;.5S#_FaMp9&lp+->(tA#5_DmZo35/mG2mFDfsUcG&C[ZEVU@CQr2g
%3/-kWlcsP:kMnLqTRshEiMUm]XD0;:L(H=&XGjk[eb.?E<V]Uup"VT>JD"g^H68V0@:3?#]2:"cfcR9B=r1n)TT?3-nBA[]FFZ_Y
%k@_l%1?HVd6kZ_g1lm8i\Z3.[cnAIcZHo?eWauNdS#ajWBCPdN8*.DOBDo$u_!]d8pOM_i&^)R<M[/1I'#k33k.UU?WN,Mc2gn_(
%O1^QSP6siN+;G&9f1W=ZI[b(S,LDes?"?"%hD*GeF.t1+Q):s\=\8*@Y.&GeTFP"b>DH_l?>m0]HDI,i.hPB_nOt>0O`!&;UCL9B
%F<&OX<V`>K%5S.*@CH_U2ig]3+?f_o.l.*o15kr,,.1`.Q<<TDh&L%t`-s(iLX04b(SMq;Gq^pljmNZb8eY5@3_J8[/p'&:J<2SF
%<qrf[Wh3ZG0"eo[^cEGh>hJ?ATl,e\Qso!;A>#f?J!<STC)q4I:>DR54<X&L`]i-8:e1&N2Y'8W)gBaS-s/>-0V];*[<C*NVC.E-
%06\0kH?@.Ja98-$p<i>\.e@Vk\IFBd/?\77ANL=gjK\h-"9C#?DK5\Y6Al0"'^'8d=@2U&=#4_)ACB_i<TaBf[lO\8(9k<6R+c9n
%I`-QiPKAE!cg#ek5loK:q!]&:^`.V?R0Q9sn)co=g$%TdmtppZGVL=3=ELlJ+qZg>Z'9H2FjKjuSd<%&9nDHdN5R-fbouhu&iRRT
%:D\[*%tT3jn6k6,/Uk7"@drTJ`.bpIUoRHgp3(8AejVs:*$G@&#2s!9Y+'[QBK#JQ_K9#;j2UQL&M^ag::05PnAhj34CXS.H"r9!
%rD4$Y4/;NN5Z6eu\f(k5ZV;GRj*C2HbEt"78'#P[l`lFn'Q,A>(VXX/QLg,R`E!u,*.-LWaG+EaAYn:h,6_/Gml\Zqo)kpQ1/Wn!
%6TRoL:tm2LN*.M5Fgd8>SD$#;SoHgBqr_BD9b@sCP=6-C?0BOQ$u/qm*(S/JO2hD^bmTMt1:F\p1`[!of/u2)Tr6UBRf7KeCj6+n
%#d*33G2ANd#qK;,Cl`tiC:]Ao1JAY[\OFMl>YOeF;^8*>SA+SXCP73t0p&W+Drsm"Z:3@C)r-rW5%3nmKrrBt_EfTb(*\mV#\].c
%?$JG1g6->AnMX.=2%'XS8+l3qQc:]sI6g8"=^]Fbilo0^)-03.+QL@HJ^Pkn7b92j4'^BPJV>g&L#D"=h'cH!i&@47oFSdJP0Y3j
%bW#6]9>L(^f.hQo@8.BQLa+PAN-'*o($B*GcUfI-'L-]Tduh;>rl5LgAl<CG6;3[kcm\We$nj+TVor8GOEb)'A$nZC);0(uc7U#i
%<Eg<pVU`a*n;sMgdLNtsK\FI<Yhsbl1#B&rj<(Tp%-):22KH"3j=ai-A$9E9N[6TA,TPee'?T)Ds35eQo=)5;?]^=FW\52],,nR:
%Q=%X_U0-gL?12<tbka.PnNc%eN;TQC)tZ>2oR/j7Dba[F"aX7#cGFbO?r7qo[I-d=0Um50V8@nn)(Uh92.je3Rn"6Pk9Atb!1+Hd
%jM'sWEs;ZT("Z\SilqigG,GTXrF(a4>CcL5A'DBO(Y*%6"icM=lC$1C4-*U1kLNI!Gfc(\."SO748^7CCH^T1LGIl"W%$O:r\7@9
%GgCR6]E!?DU(!nf`-*magqC?-9UC;XEgY0R`bB0l$W$/lH&OIu`qsdF;F'L#h$Z(bd^1[P4oH:5!Z/FW6QST]fL?t;Zb[NO_+I#V
%oQ.nG7RS`$71`@JI^0s(.BgS6@pDXD3X4"9:iM/b!29JaXa$gM\,=;[iN*-fXS4huB8Rue(C'1(dLpTl!+V>$c7j)oURuNOEmpNk
%nR]+<%6B_a)T2+eZbDC'RSdNN90"L!*<jG&^G^if<::?7pGm*(UNWi9V.gp/[lWP4"i4&E!a`F\Q/UsLBI@dkC]fCufGbUTV8P"\
%EMe"Y7G-3\dAL5hg%9;3,[VM5R*A(bgB.,hX**Wt`d.$r`P_DE=J_Y!SE1HpDk#8@e+AkOhDds\`<mVCjJ2pQnPe>ZR#5GA=pRs5
%Q]r$3#j6Q?m+oAmVf;H0jXSG1`VQm3F]HWJqXTEX-*ahelD\tS-YL/#kktZ9s"@H!'<j\Er/e9f=(S`ir=#^,1!_hn/H-'X/"u1l
%[KW4^D=)+eCUj6aDbO,69$((p>Y<)'d;I[En9a_-fn.CSC2/1-_X>Zj!n53D_9pPsQ<6%*BhW'AbglWM3R;28pJliQB/+k^>lMO$
%GHAil>!\BTH0Fm)lP]s6Su'H<i^00=`[S5HIQVa1c`Xj#>`oW3mOBBe<R^+FWQ5JGPaT]DFOT[S_g#]Ro]=Lqa!nO)34,K",=^`E
%*KS^.Z(L+^`@T7o[4N_0F<d>40A5H1^9EseQ9C/Ho^+4,6MJ(enqdA)d1E@NaO('lg/9,5HP[`tHTeL%267QA%d@sokU>ZL\D!_b
%0K^@?C^<-DH(`JqLQ^Xq600*-N8as7<SXq9KCBiJ,`+MHQn"#TNulT!-:i6-o&9asO-VApCmB/Bq1OT=)RCo*EQQFkg$V&MNbH^$
%3DcE)l5<6t0rRq'We(_0iAn"oUDNd@f.s.7e^)6=^&uiFQ&Q@*Z=/.<=oQEXnm>XZ8]a/.Gd2@,f:l0e'?@`XWodaUY2k9t#ZAJR
%)oO/:+G_if$M;,-+`Vh'<[25N"0jq.YLB@2&lKiVgV#Ufi>>2nea\;U[NY"?]b_]o@G=I4WE+6Po4jA_.'I?LL$\1T`AP$19=?0,
%)k5mS^T4AG70W.i&m7;f@fb[8nPgIJT^g%'<^C.g1VTip23CJ.r`hP*)3Jo&e+.;(L#hA%i1HuZ1dLgafC@MOl<uFMF'oT<blhi%
%dPsA`!1,X7:*Vng)Mbslgg\*eQPXZq#+*C3eP1eterK#=,Pa_+BT_5Fn)TH7,W`/L.;bVZjREpBLKG^R]/GuLXjlPs,W$-cKi#Lr
%\G$5D'KZ_+'GAk"knH5LVG@s/JYU]7QAQM!`W&Ig_rea:PLun=I*@GggWI+*';Di.c<VfUXJ4,sg&2$0R.heO!nN_I6T8&%AX/7<
%,qLWO04T8f&a!MN/*-+XmS+=1]Ji2US4Y/OJe@IbS@;9-n![n,`Dqn]L=uYb_3O!O>-=57\$-@0Ll9?#ikdHX^J4+YcSPQ=$on6E
%Q`gdao<WL4_Vj[u4b2`7bIPLf)r'B0cu&+n`9ZVS7(3]]AQcCcl8*fjJ@W4>!#?64V8\DXIZrq#3*fQA@RUr/C:.ItP_1ZX=%jGb
%It>mt[6APJ(2U>-f&3Vh=!!_T=F5]>A'XaUgC-[ZSEP]`qfiP#E(Dg.0kY09p_o.F`2`Gb9/[o]3(jeih7g/-5uLd3bs3bBDQKD-
%K\X]1M*M3$+i[44%HtAEGfAK?:1tT.V6-M#;4NAk5Ed&3[EHUBEGF-h1l>+AXWo?-2BH67@?R65c:2Z$k4t"AdWC>l4dr-2\V.eK
%33OZ(&OM-h6Mt"%4_%;(5S')C8`%pmq!oQYO8?=iBIW3\hJgD"=W?G,GnF7ii(,PL'hT3n5'=gJE,#r%GPuM()so#jEDeMK`6V41
%s0PX%!S$+=e\=m;=#kCj7>@@O)LQ-H(HfbmrenOd,8g,n3,o&`J;QfZi60u/*ZqFFTh@rI(1>34UY%[R41b9o@\&@Q$BiAM#tTrl
%7+AF]-?dfSrr^@D2?E@FY9"n80KDsAZ7#V;#ttJ9iPt;[lCeEqistp\R:ucrUuF1;_7SRg_a$GKMtR?Xq,P(A[q&FXmWGC!17XGS
%'g\R;nlWmD\gOc?Qs!]?cOZ]Ka^(ZuH0U&<-D?:?%GPcrirIaP/"&WAI`QOGcKiqN4*(mA$.qO^3S?=$$'VKm.b3kn:pp*c"e1Zb
%e!bGgE\UQ8X']"C:pLAX?]9ZCEV3CWn4IiTfW[!.`SQf6=g)$sb@<:0?9ncPBuka-iEnKqpPiMpR`+6J@eZ4jj#GeOog][Ig9%e(
%rHNsqS>5Y:A09A8H'WKtJqakkGKXaM'p?F9COqI3SQTCj7'[lPSTs"1Q0t!\L:Zj>=tAtso!e8.K82Fo7mXb:qDUq#pYC.(]kq^D
%08e@@TEi\d<4dE4cSfQEZXk_fc%>pM=!rN1[TBW2+OY;;8>4sFOk*ajA26:D93[%6AGoSN^e>@qLPb=(k(3mp-udd]'5,X.WZaF=
%]n0W?j.aXJE!eo_[\OusCMEEHE&k5+=)8*@1K[`#h3ir@T[$_Y149r#Tf,r,PI4.VZVnt*7kDU(-pO<`@ee;ufrRg>YTl"0*_D>0
%1kf%>\rkA@WtVjtDI/%)@'e7j29Fn*H6CW>diiAb5U[D==0Chg"Ird9ZXSR6BRNF>:+u5,N>E2B3-Y.8X=Dg7&eiQM5?jL[g733F
%.7RX'NQmC7@A8X,q/5;oZMOZ`d<Gfc)YG)IS(FSteB$$e7#9sqal11cj"1'T4KCeTLuU9aj)b&+pNHJ2I1&]*BH:-L,V`)P$"IIT
%jk?kW1].KrU=Bn<H=S@FpA/7hPmWap@e0c6.8`uZRoXSl;&jdV5ok$;TKtOp7dTN>:DA6^q-IC;#%qCH:8s])F5r;VK#)t=IYPTE
%IOt^LT='Irh6OCg$i3KY6%':S,'oYaKhL<;F?=ItLM(gh%sj0>'%MS@E2,`hHuCXgM^2Ei_!%G'`eF:6,"l_W_]-A63;]fC<t*P5
%c?q%T:4`/1c&]cHQiN2;-m4,e1D!do)2Im)1&f<!ep3L1r2$>P+uJB4I6tBU=dU'4'hr3uWS.?T>:O4q^u%nYb:Xe(<*\pcT=EP;
%fJffH@,F=Y#6XZ%W&mJ"TRXQ-JZ6#1=:]]!!P;iX(QJ\uRQsm0ggJ,gEHG-)n_XpXGn2s!f;Y.eH'.iC=+0ul=n!Q%.R_Dc."W-S
%1L=J:>YZ?Mr>h=O\#5R0!Uu$ig0!sdD&U^hc=:EeqAKBG5T-@EkId-#nj9RjhU$#1lj$ZeXIt;%[hVO'U[Kq05de-79fIOpc4d(I
%h(F8`T9V6qaI[+RMZY<g0Xjt/Pt$kM=tc^-$>ZK5@T*XY9V7U1+fpBm'T<A8.:UbjcRiuS(n?8@#fFGR7@'c;Wm`F5cjgsqX?h%b
%.6'Z<P.GC-#X-b6qI+oo#,hf&A"eYk%U%.nJE,F9+Mk`'mT:*DJ2^H8=c1:^`YV7=L/lJ)'YM,?37;2"h@tP1n5O(rT]o1(Ik*8/
%#8eXY6:m]63VL<78(2i'i7'1R/#j4[e1]J4pZ*$>5VJJVB-A#smeQdcJDYJ^;`+9`>UXcnhL+fX.7/K&W=lOOMcS3Ak;3:sqn=Kh
%S5!LIb$UV'fYR+.[+^Y.rqY$[ptbMTl?UDo22_\`"6;*2+sRJrLXN])P/_b9=O4'M>)^(;9\*ZhN:<)o_,oj8b4B/Zfs+bm%+.X-
%"\G8;/BlC1[nA3@r@0N8pB46AB^at6S>s)\HVAItTD]6#9[MB%[fLOg,uajfVF&1W3\-dcj)B2D6$o.t?7@gpl<!%G^EFQ)WImac
%qRpO65BZ]>LW>N3-Ch;kGiNnCeI/tpb7E#bN0fIaDO*:$2D?9@Z6=*rRM.YuP=_^(#Y'Z2Mb7iUN"M'g7Y)s+-Lnf-$Nf<1I";@f
%`n._#(,;43RMo]!*f[q.[m[AB7,t,)G%2W]-7t?7nLuao7?D"nT!9e.L24,EemWV#8A@CR6[cW"+aq4H`.d4;F-U_[&I\K_oQ4NS
%r033On&rCJhiOIJI%A5FFfTL>DUpZ8%bTsCZ;We#>M\.NhpNjM8-AfcA@mrg;#S#eDYpE*<m4$o<3d^2h.<N>,(!=%[tNn\4D\=!
%qPe`VOtl'HeND+LV3(`-2@ZgWlWCaOS#QV\K7Wd,fEj1?(IN;s2OE7UQl!1!$h300g,-Z^J&bO`@G\Y8NZZHZnt-Bh8LKT_?^<0>
%qE4-kHUT1*F_(n<jCUa$jb1^cZmjRD<1Lk9=a=BW(D3XVBiLX(K:J894uS956Mfqd,JJ?h:(s5]B&a5]O?/ic_"]=u$*lgN/oJJ9
%JBlVL1%Nq2`h"r/%YPO3EsV"]?&t\p[-.HA,H$<I1G\K(SLuF\jc:NoTIiU,X[aM1cO%5MKBI$:,C-]d@LoV;7M!G8;0P"$6B-.d
%'UIN@Gqg-B`Ib@b\5.bnR:*UqZ%@D:Qqq;S1V%rnne7!A7oE`]W;UGIO=/WSV59:iEB\!Pc0>IOGJbSi<M_u;No>O"ZO9ehp$"'*
%4Wf@<@ZP?I0H,#,\uF>1ChLUp14Gi9mlT-FWik5A:9B+6IF0T+iF;eGm9B0X2IGN+PtO3XgUTd?Xb42nPB"?kl[7FX=5F_"R_+CW
%lonJ5O]]jl&pFff3X.L:G)h$q)H`6`(rfS@<c2`<FOdCB6>5NP@2$sOQ3ZOmoo`T;rT+iDR%:3Cfe5r;m?BdurZ?IT9h,iSqR=n[
%POAeS3<.5B-B*kI#)i#]%8N6ZHKGG\jd*%8c4,Ur(>T_GWHInmf=K(j!UGkr-tm&GW3cAG[<E:16P74)\3L/PTCh&</^%S$.pEh?
%5ssbVZ1Z5q:`6P,>5$qB;VMULV(<Ol69;tLhsPGT.uWj#A2,67%EI=J':T[C9*MJu^?$3q*m%%#E9_[=d;9Y&5F^!0YW!7n:r$Nu
%FrR(46g=lf%HV\Bd?P(G,O&qL#rNUj_:ST+pT_m(gr1f=nS6+!NerCg%EURgjP(2Ef(+/!#bij(i[T$&b@,;h82"g?m;X/C/G>2O
%7cQ\mbP-hlr@g>,]U(7bPi7cY$1M%7;])ULfg$E\8N9<__mRhVb]o[Jn%1"/$F_-O]C2Y70Ajtqe$]kN\jJ$h-0E>&#Y$WA%tGC$
%M(#[kr8Yc+'CmqQ]BS+1]8UYraNS)`"#.:V>ln`q>4=GTZNOM[p7I]=@6(Ctmc2h-ga:<CfH(`rbFec$00S3:,fGF"+"C[U:^L?S
%/F;RIPW'OUc7Fpk7,^h]aF:X@r(;!1nk>2(WQDndh&tb/3)ZiVj8!pS,FV.s(5bpJ6M$__+r^_qj.*osN^ZI.Z?^h*eIGBiEI=F]
%n%*C08E%iQgi`TVUrG#o#FRWZ>L,1Bg.__^LaHP>ViG%]_fPSO.!@XA4>P,MGE1f1"l(9KQ.O:bA:RoMou6jupMu-9M$4+6psI)E
%r:+7QL#XDtC]V/jY]\p:)Ajt1Ln]mE?elHR*sR#G%"[nf9"[q_Bd5lojEM"9!>2b$3Y#;%<ca4pKY@Rr$Aj@7#:L[[Z<mq(n5C1^
%s,GZ<*cTe*;_QWV8%P/NkWF9M*;\P?cekuVr5ZQL.O6G2?)?aXet'(TYSPsh@3S39Oo#+]a^@5diSCX$m?UKLoL'4be`>QfbIZ1Y
%\@e]#56KegSO^MBj)2a.haL$:r8T;CCga!(#%V3WI,@ZYL?C%!J=,o0ksTT%H_L#3)c%XCWdk?J)[,Qj]/_K.'eP<b?FcNUE5.:a
%NH7:;/C%_UEPqHNdEfq;%qu&'4f+I-<r6^j^99:A<5(L8,ajpQp@Y6u)E]82,<2AjiBYC#GN,M[9Y-lhUASt;"loXCJ,_Z1jZicN
%gF'?6G/PkoJa2Q^8Qj9^&j&16^cTb?YKRl1BTppQkc4'gOO_Mk/a()V%!Jt1TdK@`[DU,;%?\4EG.1ahj&GeaF+?P9[a.ZajhoZ3
%Yq[1Fd]`aYZWA)C?m%U:Lo#7ca$2=$P(+o>VPYs@NUd7?OC)P)pEtb/!A\Dj75acDbods(/Z9DZ9pZcl0l;Lse,n#e<DF.=iQ-"]
%s&sq<EVbp'Fb)pW`V+-W4EF8WI_3fY"^q,J+d.%V5a5cn"GhbYJ,+Z:Je@=:p\=OZepl;a>5iqBfpC;75#@a16Bj]:5:XLm#tFbk
%<A<>qkLu-NPbp]o!`--VF],iWAAM*fW+FoOnc=D)cI;HtrQj)bTu[Z0;!Xr%"iq)=QU7>nXB6>@J62uc"h#049$;$k\V=epM7/lS
%lp3#F,0FXUlM0(V$fEUe!@uj*nV/ROjW^T)'>'p?3_gQTJ,q.;NC``AC6&r)EVQLKlanNJ=og9<R2DO=91JLlrUAM>`l$6>RZ%5A
%cURJ-YNeUfIs8lOY^XeBo$.53C?`tZW[@=aOPEX4PGaZ""k?1.[h-8`%>)W,X<1@1gOm=tefs)9&#lRXq)6c<Y?c&/5H[-#:!Xo.
%m!WTQ+IfUmBCJ$*If<f!7htX<Mm6Wj7ZNY_b=f4Kc`>/Kr"EqrC4&8-G5ahi\Sc`mpu_&B)1Y\!OmiHnGmkjEBdZ`2D-0^@"%mt\
%e:4K4S43<-AW1>W\!=3:\V-9W+<3Mqp8`'qAch`d.)sD`TX;UV.;kFU4d,9m6tF[%41b&LbIY@fkI(:VCFnXd/ZZA<[$nQu6nlE6
%'o9oX2t_@FKCuceHN*\65(7-mdp\SBDi%Z5\-qPe1ac.*#1=k<:E<oR$ZgFQa)&.lRS$]Pc199T1N(9.PAqbI0F_[(QePM=I`AbW
%97FO@/US)ipsfO(K%g\"C[E=TiJg0MWa$I&;7U8GAJ_2RG#>[DDZ[q/)e/g;n;a@u>#An=\*65tOYp+uG%iF3'\9gQWnBR]5!4V?
%:S[,jo*DhsGWlV%@0+":"m`><Ip0mQis__KL*>>R9tQd^51)9j?0"<EG+3M8osn\',L-O9mGJ=%70IED:Y8+Z[q(qZ;KT2^o4VuI
%,_m<e>INiQ1K@m-%R#7o:PZot$a_uScZ&?(UO#>;,9%]=bX.@)T7VmNY-;eM#<7\j>0:-k+B5-pJs<@3^(c5i`:U(<kDu8,j*0)K
%*3bF1`Zi*:VBM786?Rlkj'h(a*8kA&]eORq.F(QTF`?JBRoAX#Z?_muM5f@[\V]V#$O9WuWI2=(AX_UOJ]jOMWcA@.H&-huT2]Vu
%nO2uS\d"A35O*Y4;.RZ7r8(B@S)lsoS'hbpBE,fl!H3&R`HjR0VH[u=Lu+DYWgLq"W)idXj`^V<bB)u'@.ii5V*[KV.]DX_%:F&W
%Z>pd]>8[WYI\6J!4q(h'ONoDpi.iq2hdNa9Z7DI5Y90mqWb3KHO1MTa/U&^)qSWeAdjhU#[&oHl#X1Pffcm!#qFi\.k;P-]LLhYE
%;ib/*Cg"m85[VdEh$b69_AHkXmBS!Y_tH*%M9DaQGHf2$:Oc-aj$<6F]@Cm"Z9M!&e3Cn_?fujX+4s2@ZUmA"jQRe6&Jcm)9OXP)
%.k?2T69u?]l*3>DB*Th;8)hRIfg]J^"dqB$6n7,pYj&=JbTHAdk;D'=E&crN`F^dr$3p(YnF:6X'c]/oORPN)$,OsdBZ<jAmhO3L
%Eq+"CWV*^M=Sjfa//^C;N2uq%-:T+$P$Hgi/&76#4Y*HXX?rBnYbX2GnR:uCC#f(MK#N8!;[6'@+#+'4/OSiZEVT8K6L:Gds*de)
%$i\;n'9@sTW;s"7/&Ib7/NSg_+JXj>1r^mE@qIHP8dl<:=51c3ZU>K1'/jij!<e2E*9;p!Z.391)ilNALRKNP:LVqLXC/I&Sg"&J
%>e#?VR/A\VSS"8Q?k"+)37k/%fRHJLkYMK.XWLQ60s'Dn6_Y9U`l+Z,:,2Ptrau&+U71;I^-J5<+5gH$_\`+rf3i3%s7lZ>6#&UV
%Yk@,0oGOEZoBSC1>O?N*nis%g=7?4GH&pA\*P(e4;8Ch!0r]di,r]Hp:o]&I[G9!libJdgkrB9"ZZ;/1[V:I2H6%US`']D2hPJqR
%GioW\1*_a&;4GK7j7#eo3;rP/>o4fXe7)_!"tpV<LaPR.NI%oc@B.Ga`s.]jeP':&<UXVNO>(fhPk+Ep*sYup0GFfKc's1\B`7^s
%e^M&$',g]LHBt7P'%Yo@-l[4*);bt9?H&-2UY(OKXkX>)"KL(<iFo*6@(=`@2+5fEnRi6i'D(T$_lc97@Rl\*La;);D:a"]n=="@
%>E"Ot!AA"@N]XD:3sMpBjXdq^r>.([/%E4GqWg'eKfYr0plJTt*VXN70SE[YkGg;j@KJ+03$PB1M;Ao8L-3U$5Z*U!`A4V#DZ0?M
%+T,$rh"u,cSp\AK3I^po+oKejbNln#28E"aHhtW<$X2nNr+d[[V_0$F^b;dH]<EKG)2,k8h#XLoA')Np6PcPd^peeBde/7cUKS9.
%jaNR-ff3j[kp>P1_XspJ*`dY)"C&s&REYa5+bheq`uuP+R`JZW%W,R=6NpmKLAe,-p2TA*;"62q$V<5`)"]Q,TX>W6iR.=6%#k5'
%Kk#O8Lm:92.]?<)kAkeiP!=]^ABFiI_>7"d?D>'J$`QNfI$>_el2MhEFm[II#LT_)4qlL^1<^R<RT5$Lq*Oa'g#hh4]06cT1o03F
%daVFB^6+>+>W%7&ZjuNi=ZKIN\[Hr(j!AKpX3&*AZRYSip4#tQ)DMn'UjrL*UbGf;G"$+0e^U[%k9A\Q*HG.`/UTh%A1Go+C;#@e
%;pm,]_jZPZre+`0Dj&]0pWU5QQWH@/9K)Wk[=(T]Q[H9q(3hB.5G6p6:N]aj,0=[jh[TPqo<R;)a6kG-Vt6,e)[LQP5TGu=J^Eh%
%Fr.$&_p!@hr;5]Jqk:(Y)LmkAHM;!;3F.e?dZmG9dQOM+W3]-V<aC8L@PYYf\bTOL\q3X](sbBnR#B3.V8Y0HSN9qDC($TFO^lf_
%)f,=1b!VMaWYkT'Ws#LoPdEJ*<<3gP@V8`!ORc<#&<1I4Vp4P'%^mH%YhS6lZ08kJIa%\q@`qH3=*k%al8D^d?p[DJ13UmJ"LAk4
%F[s>#=Wm1J.]mp%0h-qDfS5`.3_.VmU<2EY<eOI@Wl!.)Tcf_F8n/Sap00f8_%S(V/3>eC;Q`C1WYKBC6JqOHr[7E_U4kqVE*V*m
%Z8*HQHu0NnXq<%@88tpeY$-r\8J*^%enPr^kdErh1el$8QGb.1faX7(iYQENLL336&Y7tahEW.TNi\JI"FRnB3u?\6BQ<EcE-<*p
%HP:O1*8QJV_58F\\tM9=3X/0Y0,1'UlP4MGU"3nN&8U!bT(t'(a0Cnpp$jF_%.,u@b>R"BM$=p_Kt;'!N6kBZ;dP0>q:EER%$b)R
%5R\<4lMq6.+,4gP;Cc11]b*bu==I<dW7k=HV7(b?C&,(r],`IBfTrg'RlNh7/ePup8["5b?a4S)*n;$4:rFAs"!<aHpr<21r"WW%
%A7bMtgCTimKh;Sjfg@\1!Y60Wrkd/$=^3K?QBNPZh/2B2$S/GeZbNo1#Td'pm8Ks3S7<)W'NDcf'UTm-8S^;)5cJEnJ8F;o1(($<
%EKV?WoqDs0NNq+$\\T`uUJ5P]MGUQX5XG`D:8HPhDn1!uYq>"\%9&bhkp#Of3F/of"/&\9;a7/-&2hs\gad=8%,Y9`g5roLK^?%o
%:`45'9%sR"3apsXXH-X%a-T-9C/;UZ:Z]4A&NAdFPmANX/j36$#7g>*(;bb>HuldubHZk?,i$ut3I&>cKViI.isNH$@H5OJ_#Go)
%LJST-T<AhDkR"ec)^Z^0Q!EqDGTOl_.VTgB;it2fd[n+UoGo!,o]/R;?'"LB.h/6j23<JGG;j?(,a*uf`g]k+V%GQdKc>?VKsD>b
%[9Y^j=KMN0/@e)?X(Pr&NXD2*91e!g.t.(C^9(X_rSPYED"<<IJnWpDc-6%he"e^.L1Y+`@.N<?,GsF4&5\IK/\REiiF#%WUaHZ;
%P-&bWIZ;cVM#iaY[9,l5EkTCd7191q1U>7X=r"Fd:`LTOQM&T)[UQ$9Zi8`qPneIO=H[kT3[UD757B<b(*A^4*cP5_,cRG>aapRe
%[)5pB^u@ujfW#jrZric!\m\5HDH''b1ras_5+98*a[YYGAK&2Y_DoD][[M)sci_a?k#i0N$f$7t=lRA=(6D'H*jO?."ZEi322?:j
%M&\$sV=p]4_)3bG)d#n9c?3q)?,`J58!pWJ>(QHp4m\*fAQ/4A007YS1c+buM3KL=&"8NY.OE8,>?!J=]VMGZD>BP]>(OP"K,Yu#
%%6<nlA`-nF=ta>]TkTdM-c/?6*4"ol$#,Bq)n)8>M8J"ij*AD3iLec(Jr)p=Cjdg(135GSq[-pS2m'%6'tBrIV'FNi;@s-^0H73g
%gBrXb(tMKV'_h$K(NO>k?Jf2J&AY/V(<IQ>!H'Wc"iNQ@Z<:hA1\^`.J)OWg\==dq@18kRED&'03qmsYUJ3m$n\hIE\UndI2<T%u
%-_[N[VDAG?N/ahgl<`NY$]VUsDen!0^B6]\Llls1X`X.>oQcIV46-RRS:0J@R3JZK)9Xg6i^oNJL)VVoWU$R([U"&9oc/iZOG4oh
%SF-nugU-"f"`2R0@"((hAI(O,P:J]?!QH?(D_5iB@(@@6lS.0]/MN"EBCK2k/:Dj^8pAMG?/F+?RR&_[=_#PSXXEt.V5/X\Q\oae
%6f1..p8Ul*"NhZX7>)=,QF2l\jHn\:S%BPb)h'!2IS-0?^Bk'd.4I]NT1;nKG!01r^k2ct&/-53?oaQCVOr-)o'dQDanW@UDkD]2
%\IbYQ-%A-/go!0L:LY"PF\#2O;BbB\bp4%F%FZ1)="0/Ia!&kojiKfEbU]c`U`rL,kmH1$,R?-ISIhPPAC9(L_qbf%amtX:2''7b
%<5^7BFEm/kiSHi$8U+=%^qQ8[LtH+CmhJ,+W_!>&4Y;XB#mIf'&?tpb!O`c$)7i\#Oq"HV9Ffg48`lX!/:=%0/oOL!lHlX"^h1/k
%0l,Eq&ahllh*:NBk(+Fni04;"Sa??^[8WUO@9I7m$#tO6HFa9@d$1PYH>?-_ZD,$_[qDrAQ+<_-/r?=;K_=t"MPg[9XD[N-]#)fQ
%h15/!qn.c#nEs!HY1f5Y'pY,PZ(dQZVJ[0%=at5qB+\pcU+kC";7s@6<YZD8^B/=h(n=AB(<)smDs<P$qLFkJdcBBu"LF=48VXpO
%_nk0XRZqg3E_1R^d?_tcJ2brU0O<jMF7,S<ZS^k;U)UmFVH*3h7W[m7(+h-ijc;Sa/[&*W6Lu&0>'Y\0_DZGcZIcZ<$r84%!Hgn*
%:H0-JTEL4+9q^TaA-sfp_W15?-AP5hr3nfK`pa::I%^gU1"'"#$:gt'G86ooU\P.kh%JH%nCBP_6hL-=q!H,5gFk+REWME[jds\l
%;itpB*KEK./%An:TZdm,\G#U^&@sBqk@H*-HAsLD-$YWSLkdRI!s3jS$05K,fJj:6NMusGc]VLb#L'#2Md)i0hq!VAK=!@tSFUH>
%=68e2(6nGJ.>]Cr;U=>,Y@F85A+F"2$Hj\#5uEbVp)Gc`6o2l[f-1tk,f&8\+\V:aB`ErAlW3R\gdHM00bX+)[0X5e#nW+-kodbV
%]KtUX'lG.3.pN=T)Zj)(n$DaE-%Z]R7",OsfFk&=.eY!XMXi2!Q-C:g:,4CuSh(3HDh=r_.Tr)B,>$37.Eo7=`,4bq5jmVTWG=?V
%aC,00'6Ct:NA+_+pOt\qMm3JD6V01l#l(2J&^k_AP;QZ%&I*_@K(DBe`DQrroH7"te2F^(&\I:$nA/>,aoS35/Q[%f/8,;64HXc:
%T!g$nKfX$LYVYprAN0$Ag://IaNq3LJiQ;e]VA7go[5h>aV8"GW_#<>$&XjkS^?S,ca_F2hEoj/h4<.R^A5G_"s=smL_fO6+*l(0
%*lW+A_K0B%/NWu8CRU;<$"3q(ETNSBV@lYfO+nK;08@U=#>]7"OZ2_!P7Uojo6a#Ma80=V`lESo3^6COn+SrR6>Ra00f(`[FL&jJ
%G\nm8,fcE>l>Zrf<FW#$pXmN%I<d:RL<SWa4;'OUCkml/>g>$"rpcGb\NA0"i0;[/K^YJ*#ApM=>J;4l^6bsmD+U*7U%GVuZl9o$
%KAJci$TsTM#[#*fNJ9+DC_Z7=oH&6)fY3+Y_F\fQV]BW8@V%5J"B7lQps/cq&R&[P%W6R(ZN!6J^*i.)d\.A&Xht8g:^RN?V\[q3
%M&Sh\6qfbD0/,BM,&Ft<.B#IHoSYp1L^fGl/@1i\;Ups(B6;l3D?fCX0SD_%'aNdr#_>MU8I[+5V]ZSJ"n_D[JXkY(4A2rt#2=DK
%C&>jIAjWcI5^%=^;shr%a]%bn1eJnFfjk>.VD_"l29?GH]9780jJ9Lb(;7SiV<;$@>\GUpHLR%j8mL)34J?O7S?YYbi"E51LtMY7
%\aLkU\S(L2[\LWaj/,Go91=)FOQ]F[1"B6/F:Q^A$G6Xt-_\]%$WU<^bTK9seK4&W%D2I6:Vad4.XO[U.5i<t*tXa=7r>*scgBdp
%\,!eBA*YFiq2`:,^OGe6TRZpWT7;@`fmf$+Vu4@'md]iHp%L[5*Zjs%F(tB\bNJT&?JiH+5FhAF<blM9j.F@il-F6G]=H0JEV[?e
%b28]^[N/<A]t&"7^AQgKh`'@C&$g\/p#Y*%l^_A5"hiaJrST!84mX9Jgn/ccT<I[+s#o.e]fR:,89j,iT52uK8GW(nBqa\0>Nf_L
%%+b(<X4Im.mgdCUl1&E:korj/_$fkgr\=HBLHkP5I"$CH713@-BAhHMG:sKahX=e.*UZ/jjQ4;ImGVf(3k]go4WaTfJ%BrOIsB%o
%G.;jCp#b-sON8(tHhRB,5CNCMrr>>!:NQ~>
%AI9_PrivateDataEnd
