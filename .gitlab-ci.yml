# .base-rules:
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "main"'
#       when: always
#     - if: '$CI_PIPELINE_SOURCE == "push"'
#       when: never
#     - if: $CI_COMMIT_TAG
#       when: never

# cache: &global_cache
#   key: $CI_COMMIT_REF_SLUG
#   policy: pull-push
#   paths:
#     - node_modules/
#     - package-lock.json
#     - dist/

# staging ------------------------------------------------------------------------------
deploy-staging:
  stage: deploy
  before_script:
    - 'npm i'
    - 'npm run build'
  script:
    - 'pm2 restart ecosystem.config.js --update-env'
  after_script:
    - 'pm2 save'
    - 'pm2 logs sipstack_whois:8385 --nostream --lines 1'
  # cache:
  #   <<: *global_cache
  #   policy: push
  environment:
    name: development
  tags:
    - shell
    - dev-110
    - staging
  only:
    - develop

# production  ------------------------------------------------------------------------------
## pm2 method
# build-main:
#   stage: build
#   # extends: .base-rules
#   # before_script:
#   # - source ~/.bashrc
#   script:
#     - npm i
#     - npm run build
#   # cache:
#   #   <<: *global_cache
#   #   policy: push
#   artifacts:
#     paths:
#       - dist/
#     expire_in: 1 week
#   tags:
#     - shell
#     - dev-110
#     - development
#   only:
#     - main

# deploy-main:
#   stage: deploy
#   before_script:
#     - 'npm i http-server'
#   #   - 'npm run build'
#   script:
#     # - 'pm2 restart ecosystem.config.js --env production --update-env'
#     - 'pm2 restart ecosystem.config.js --update-env'
#   after_script:
#     - 'pm2 save'
#     - 'pm2 logs sipstack_whois:8385 --nostream --lines 1'
#   environment:
#     name: production
#   # cache:
#   #   <<: *global_cache
#   #   policy: pull
#   needs:
#     - job: build-main
#   tags:
#     - shell
#     - app-511
#     - production
#   only:
#     - main
## new docker app-510 -------------------
build-main:
  stage: build
  script:
    - npm i
    - npm run build
    - docker build -t registry.sipstack.com/sipstack/www .
    - docker push registry.sipstack.com/sipstack/www
  tags:
    - shell
    - dev-110
    - development
  only:
    - main
# old (unused) ------------------------------------------------------------------------------

# deploy-develop:
#   stage: deploy
#   before_script:
#     - 'npm i'
#     - 'npm i http-server'
#     - 'bin/build-jobs.sh'
#     - 'bin/build-blog.sh'
#     - 'bin/build-kb.sh'
#     - 'npm run build'
#   script:
#     - 'pm2 start ecosystem.config.js'
#   after_script:
#     - 'pm2 save'
#     - 'pm2 logs sipstack_www:8380 --nostream'
#   environment:
#     name: development
#   tags:
#     - shell
#     - dev-110
#   only:
#     - develop

# before_script:
#   - echo "Run stuff before script..."

# after_script:
#   - echo "Run stuff after script..."

# build-develop: ## staging to: https://dev- ...
#   image: node:18.16.0-bullseye ## only way to get npm / gulp to work
#   stage: build
#   script:
#     - npm install
#     - npm run build
#     - bin/release.sh
#   artifacts:
#     expire_in: 1 day
#     paths:
#       - dist/
#   only:
#     - develop

# build-main: ## staging to: https:// ...
#   image: node:18.16.0-bullseye ## only way to get npm / gulp to work
#   stage: build
#   script:
#     - npm install
#     - npm run build ## double check it runs with NODE_ENV=production
#     - bin/release.sh
#   artifacts:
#     expire_in: 1 day
#     paths:
#       - dist/
#   only:
#     - main

# deploy-develop:
#   image: alpine:latest
#   stage: deploy
#   before_script:
#     - 'command -v ssh-agent >/dev/null || ( apk add --update openssh )'
#     - eval $(ssh-agent -s)
#     - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
#     - mkdir -p ~/.ssh
#     - chmod 700 ~/.ssh
#     - ssh-keyscan $SSH_HOST >> ~/.ssh/known_hosts
#     - chmod 644 ~/.ssh/known_hosts
#     - ping -c 1 $SSH_HOST
#   script:
#     - ssh $SSH_USER@$SSH_HOST "cd ~/code/athenty/secure && rm package-lock.json && git pull && bin/dev.sh"
#     - ssh $SSH_USER@$SSH_HOST "cd ~/docker/compose/athenty && docker-compose up -d secure"
#   only:
#     - develop
#   # rules:
#   #   - if: '$CI_COMMIT_MESSAGE =~ /(nopipe|no-pipeline)/'
#   #     when: never

# deploy-main:
#   image:
#     name: docker:stable
#   services:
#     - name: docker:dind
#       alias: thedockerhost
#   variables:
#     DOCKER_HOST: tcp://thedockerhost:2375/
#     DOCKER_DRIVER: overlay2
#     DOCKER_TLS_CERTDIR: ''
#   stage: deploy
#   environment:
#     name: production
#   # before_script: # bring SSH keys to deploy to server
#   #   - apk add openssh-client sshpass
#   script:
#     - du -sh dist
#     - du -sh src
#     - RELEASE=$(head -1 RELEASE)
#     - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" $CI_REGISTRY --password-stdin
#     - docker build --pull -t $CI_REGISTRY_IMAGE .
#     - docker push $CI_REGISTRY_IMAGE:latest
#     - docker image tag $CI_REGISTRY_IMAGE:$latest $CI_REGISTRY_IMAGE:$RELEASE
#     - docker image push $CI_REGISTRY_IMAGE:$RELEASE
#   # after_script: # issue update on docker app server
#   #   - sshpass -p "$WEB_PASSWORD" ssh -oStrictHostKeyChecking=no gitlab@$WEB_SERVER "hostname"
#   dependencies:
#     - build-main
#   only:
#     - main

## remove below and uncomment other mains on production
# deploy-main:
#   image: alpine:latest
#   stage: deploy
#   before_script:
#     - 'command -v ssh-agent >/dev/null || ( apk add --update openssh )'
#     - eval $(ssh-agent -s)
#     - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
#     - mkdir -p ~/.ssh
#     - chmod 700 ~/.ssh
#     - ssh-keyscan $SSH_HOST >> ~/.ssh/known_hosts
#     - chmod 644 ~/.ssh/known_hosts
#     - ping -c 1 $SSH_HOST
#   script:
#     - ssh $SSH_USER@$SSH_HOST "cd ~/code/athenty/secure-production && rm package-lock.json && git pull && bin/prod.sh"
#     - ssh $SSH_USER@$SSH_HOST "cd ~/docker/compose/athenty && docker-compose up -d secure-production"
#   only:
#     - main
